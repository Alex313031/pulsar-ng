const ChildProcess = require('child_process');

/**
 * @name spawn
 * @function
 * @desc Spawn a command and invoke the callback when it completes with an
 * error and the output from standard out.
 * @param {string} command - The underlying OS command to execute.
 * @param {array} [args] - The array with arguments to be passed to command.
 * @param {spawnCallback} [callback] - The function to call after the commnad has
 * run.
 */
exports.spawn = function(command, args, callback) {
  let error;
  let spawnedProcess;
  let stdout = '';

  try {
    spawnedProcess = ChildProcess.spawn(command, args);
  } catch (error) {
    process.nextTick(() => callback && callback(error, stdout));
    return;
  }

  spawnedProcess.stdout.on('data', data => {
    stdout += data;
  });
  spawnedProcess.on('error', processError => {
    error = processError;
  });
  spawnedProcess.on('close', (code, signal) => {
    if (!error && code !== 0) {
      error = new Error(`Command failed: ${signal != null ? signal : code}`);
    }

    if (error) {
      if (error.code == null) error.code = code;
      if (error.stdout == null) error.stdout = stdout;
    }

    /**
     * @callback spawnCallback
     * @param {Error} [error] - An Error object returned by the command, `null`
     * if no error was thrown.
     * @param {integer} error.code - Error code returned by the command.
     * @param {string} error.stdout - The string output text generated by the command.
     * @param {string} stdout - The string output text generated by the command.
     */
    callback && callback(error, stdout);
  });

  // This is necessary if using Powershell 2 on Windows 7 to get the events to raise
  // http://stackoverflow.com/questions/9155289/calling-powershell-from-nodejs
  return spawnedProcess.stdin.end();
};
