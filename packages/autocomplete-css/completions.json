{
  "tags": [
    "a",
    "abbr",
    "acronym",
    "address",
    "applet",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "bgsound",
    "big",
    "blink",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "center",
    "cite",
    "code",
    "col",
    "colgroup",
    "content",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "font",
    "footer",
    "form",
    "frame",
    "frameset",
    "head",
    "header",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "image",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "nobr",
    "noembed",
    "noframes",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "plaintext",
    "portal",
    "pre",
    "progress",
    "q",
    "rb",
    "rp",
    "rt",
    "rtc",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "shadow",
    "slot",
    "small",
    "source",
    "spacer",
    "span",
    "strike",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "tt",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "xmp"
  ],
  "properties": {
    "-webkit-text-fill-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The -webkit-text-fill-color CSS property specifies the fill color of characters of text. If this property is not set, the value of the color property is used."
    },
    "-webkit-text-stroke-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The -webkit-text-stroke-color CSS property specifies the stroke color of characters of text. If this property is not set, the value of the color property is used."
    },
    "-webkit-text-stroke-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The -webkit-text-stroke-width CSS property specifies the width of the stroke for text."
    },
    "-webkit-text-stroke": {
      "values": [
        "thin",
        "medium",
        "thick",
        "currentcolor"
      ],
      "description": "The -webkit-text-stroke CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties -webkit-text-stroke-width and -webkit-text-stroke-color."
    },
    "touch-action": {
      "values": [
        "auto",
        "none",
        "pan-x",
        "pan-left",
        "pan-right",
        "pan-y",
        "pan-up",
        "pan-down",
        "pinch-zoom",
        "manipulation"
      ],
      "description": "The touch-action CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser)."
    },
    "-webkit-align-items": {
      "values": [],
      "description": ""
    },
    "-webkit-align-content": {
      "values": [],
      "description": ""
    },
    "-webkit-align-self": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-name": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-duration": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-timing-function": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-iteration-count": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-direction": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-play-state": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-delay": {
      "values": [],
      "description": ""
    },
    "-webkit-animation-fill-mode": {
      "values": [],
      "description": ""
    },
    "-webkit-animation": {
      "values": [],
      "description": ""
    },
    "-webkit-backface-visibility": {
      "values": [],
      "description": ""
    },
    "-webkit-background-clip": {
      "values": [],
      "description": ""
    },
    "-webkit-background-origin": {
      "values": [],
      "description": ""
    },
    "-webkit-background-size": {
      "values": [],
      "description": ""
    },
    "-webkit-border-bottom-left-radius": {
      "values": [],
      "description": ""
    },
    "-webkit-border-bottom-right-radius": {
      "values": [],
      "description": ""
    },
    "-webkit-border-top-left-radius": {
      "values": [],
      "description": ""
    },
    "-webkit-border-top-right-radius": {
      "values": [],
      "description": ""
    },
    "-webkit-border-radius": {
      "values": [],
      "description": ""
    },
    "-webkit-box-shadow": {
      "values": [],
      "description": ""
    },
    "-webkit-box-sizing": {
      "values": [],
      "description": ""
    },
    "-webkit-flex": {
      "values": [],
      "description": ""
    },
    "-webkit-flex-basis": {
      "values": [],
      "description": ""
    },
    "-webkit-flex-direction": {
      "values": [],
      "description": ""
    },
    "-webkit-flex-flow": {
      "values": [],
      "description": ""
    },
    "-webkit-flex-grow": {
      "values": [],
      "description": ""
    },
    "-webkit-flex-shrink": {
      "values": [],
      "description": ""
    },
    "-webkit-flex-wrap": {
      "values": [],
      "description": ""
    },
    "-webkit-filter": {
      "values": [],
      "description": ""
    },
    "-webkit-justify-content": {
      "values": [],
      "description": ""
    },
    "-webkit-mask": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-box-image": {
      "values": [],
      "description": "  Non-standard_header() "
    },
    "-webkit-mask-box-image-outset": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-box-image-repeat": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-box-image-slice": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-box-image-source": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-box-image-width": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-clip": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-composite": {
      "values": [],
      "description": "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the -webkit-mask-image property."
    },
    "-webkit-mask-image": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-origin": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-position": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-repeat": {
      "values": [],
      "description": ""
    },
    "-webkit-mask-size": {
      "values": [],
      "description": ""
    },
    "-webkit-order": {
      "values": [],
      "description": ""
    },
    "-webkit-perspective": {
      "values": [],
      "description": ""
    },
    "-webkit-perspective-origin": {
      "values": [],
      "description": ""
    },
    "-webkit-transform-origin": {
      "values": [],
      "description": ""
    },
    "-webkit-transform-style": {
      "values": [],
      "description": ""
    },
    "-webkit-transform": {
      "values": [],
      "description": ""
    },
    "-webkit-transition-delay": {
      "values": [],
      "description": ""
    },
    "-webkit-transition-duration": {
      "values": [],
      "description": ""
    },
    "-webkit-transition-property": {
      "values": [],
      "description": ""
    },
    "-webkit-transition-timing-function": {
      "values": [],
      "description": ""
    },
    "-webkit-transition": {
      "values": [],
      "description": ""
    },
    "-webkit-text-size-adjust": {
      "values": [],
      "description": ""
    },
    "-webkit-box-align": {
      "values": [],
      "description": ""
    },
    "-webkit-box-flex": {
      "values": [],
      "description": ""
    },
    "-webkit-box-ordinal-group": {
      "values": [],
      "description": ""
    },
    "-webkit-box-orient": {
      "values": [],
      "description": ""
    },
    "-webkit-box-pack": {
      "values": [],
      "description": ""
    },
    "mix-blend-mode": {
      "values": [
        "normal",
        "multiply",
        "screen",
        "overlay",
        "darken",
        "lighten",
        "color-dodge",
        "color-burn",
        "hard-light",
        "soft-light",
        "difference",
        "exclusion",
        "hue",
        "saturation",
        "color",
        "luminosity",
        "plus-darker",
        "plus-lighter"
      ],
      "description": "The mix-blend-mode CSS property sets how an element's content should blend with the content of the element's parent and the element's background."
    },
    "isolation": {
      "values": [
        "auto",
        "isolate"
      ],
      "description": "The isolation CSS property determines whether an element must create a new glossary(stacking context)."
    },
    "background-blend-mode": {
      "values": [],
      "description": "The background-blend-mode CSS property sets how an element's background images should blend with each other and with the element's background color."
    },
    "align-content": {
      "values": [
        "normal",
        "first",
        "last",
        "baseline",
        "space-between",
        "space-around",
        "space-evenly",
        "stretch",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "flex-start",
        "flex-end"
      ],
      "description": "The CSS align-content property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis."
    },
    "justify-content": {
      "values": [
        "normal",
        "space-between",
        "space-around",
        "space-evenly",
        "stretch",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "flex-start",
        "flex-end",
        "left",
        "right"
      ],
      "description": "The CSS justify-content property defines how the browser distributes space between and around content items along the Glossary(Main Axis, main-axis) of a flex container, and the inline axis of a grid container."
    },
    "place-content": {
      "values": [
        "normal",
        "left",
        "right"
      ],
      "description": "The place-content CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the align-content and justify-content properties) in a relevant layout system such as Grid or Flexbox."
    },
    "justify-self": {
      "values": [
        "auto",
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end",
        "left",
        "right"
      ],
      "description": "The CSS justify-self property sets the way a box is justified inside its alignment container along the appropriate axis."
    },
    "align-self": {
      "values": [
        "auto",
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end"
      ],
      "description": "The align-self CSS property overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the glossary(Grid Areas, grid area). In Flexbox, it aligns the item on the glossary(cross axis)."
    },
    "place-self": {
      "values": [
        "auto",
        "normal",
        "stretch",
        "left",
        "right"
      ],
      "description": "The place-self CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the align-self and justify-self properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it."
    },
    "justify-items": {
      "values": [
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end",
        "left",
        "right",
        "legacy"
      ],
      "description": "The CSS justify-items property defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis."
    },
    "align-items": {
      "values": [
        "normal",
        "stretch",
        "first",
        "last",
        "baseline",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "self-start",
        "self-end",
        "flex-start",
        "flex-end"
      ],
      "description": "The CSS align-items property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the glossary(Cross Axis). In Grid Layout, it controls the alignment of items on the Block Axis within their glossary(Grid Areas, grid area)."
    },
    "place-items": {
      "values": [
        "normal",
        "stretch",
        "left",
        "right",
        "legacy",
        "center"
      ],
      "description": "The CSS place-items shorthand property allows you to align items along both the block and inline directions at once (i.e. the align-items and justify-items properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it."
    },
    "row-gap": {
      "values": [
        "normal"
      ],
      "description": "The row-gap CSS property sets the size of the gap (gutters,gutter) between an element's rows."
    },
    "column-gap": {
      "values": [
        "normal"
      ],
      "description": "The column-gap CSS property sets the size of the gap (Gutters,gutter) between an element's columns."
    },
    "gap": {
      "values": [
        "normal"
      ],
      "description": "The gap CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap."
    },
    "grid-row-gap": {
      "values": [],
      "description": ""
    },
    "grid-column-gap": {
      "values": [],
      "description": ""
    },
    "grid-gap": {
      "values": [],
      "description": ""
    },
    "anchor-scroll": {
      "values": [
        "none",
        "default",
        "implicit",
        "popover"
      ],
      "description": ""
    },
    "anchor-name": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "anchor-default": {
      "values": [
        "implicit",
        "popover"
      ],
      "description": ""
    },
    "position-fallback": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "animation-composition": {
      "values": [
        "replace",
        "add",
        "accumulate"
      ],
      "description": "The animation-composition CSS property specifies the Glossary(composite operation) to use when multiple animations affect the same property simultaneously."
    },
    "animation-timeline": {
      "values": [
        "auto",
        "none"
      ],
      "description": "The animation-timeline CSS property specifies the timeline that is used to control the progress of an animation."
    },
    "animation-name": {
      "values": [
        "none"
      ],
      "description": "The animation-name CSS property specifies the names of one or more @keyframes at-rules that describe the animation to apply to an element. Multiple @keyframe at-rules are specified as a comma-separated list of names. If the specified name does not match any @keyframe at-rule, no properties are animated."
    },
    "animation-duration": {
      "values": [],
      "description": "The animation-duration CSS property sets the length of time that an animation takes to complete one cycle."
    },
    "animation-timing-function": {
      "values": [
        "linear"
      ],
      "description": "The animation-timing-function CSS property sets how an animation progresses through the duration of each cycle."
    },
    "animation-iteration-count": {
      "values": [
        "infinite"
      ],
      "description": "The animation-iteration-count CSS property sets the number of times an animation sequence should be played before stopping."
    },
    "animation-direction": {
      "values": [
        "normal",
        "reverse",
        "alternate",
        "alternate-reverse"
      ],
      "description": "The animation-direction CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward."
    },
    "animation-play-state": {
      "values": [
        "running",
        "paused"
      ],
      "description": "The animation-play-state CSS property sets whether an animation is running or paused."
    },
    "animation-delay": {
      "values": [],
      "description": "The animation-delay CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation."
    },
    "animation-fill-mode": {
      "values": [
        "none",
        "forwards",
        "backwards",
        "both"
      ],
      "description": "The animation-fill-mode CSS property sets how a CSS animation applies styles to its target before and after its execution."
    },
    "animation": {
      "values": [
        "none"
      ],
      "description": "The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state."
    },
    "background-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The background-position CSS property sets the initial position for each background image. The position is relative to the position layer set by background-origin."
    },
    "background-position-x": {
      "values": [
        "center",
        "left",
        "right",
        "x-start",
        "x-end"
      ],
      "description": "The background-position-x CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by background-origin."
    },
    "background-position-y": {
      "values": [
        "center",
        "top",
        "bottom",
        "y-start",
        "y-end"
      ],
      "description": "The background-position-y CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by background-origin."
    },
    "background-position-inline": {
      "values": [
        "center",
        "start",
        "end"
      ],
      "description": ""
    },
    "background-position-block": {
      "values": [
        "center",
        "start",
        "end"
      ],
      "description": ""
    },
    "background-clip": {
      "values": [
        "border-box",
        "padding-box",
        "content-box"
      ],
      "description": "The background-clip CSS property sets whether an element's background extends underneath its border box, padding box, or content box."
    },
    "border-top-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-top-color CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties border-color or border-top."
    },
    "border-right-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-right-color CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties border-color or border-right."
    },
    "border-bottom-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-bottom-color CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties border-color or border-bottom."
    },
    "border-left-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-left-color CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties border-color or border-left."
    },
    "border-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-color shorthand CSS property sets the color of an element's border."
    },
    "border-radius": {
      "values": [],
      "description": "The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners."
    },
    "corner-shape": {
      "values": [
        "round",
        "angle"
      ],
      "description": ""
    },
    "corners": {
      "values": [
        "round",
        "angle"
      ],
      "description": ""
    },
    "border-limit": {
      "values": [
        "all",
        "sides",
        "corners",
        "top",
        "right",
        "bottom",
        "left"
      ],
      "description": ""
    },
    "border-clip": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "border-clip-top": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "border-clip-right": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "border-clip-bottom": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "border-clip-left": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "background-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The background-color CSS property sets the background color of an element."
    },
    "background-image": {
      "values": [
        "none"
      ],
      "description": "The background-image CSS property sets one or more background images on an element."
    },
    "background-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat"
      ],
      "description": "The background-repeat CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all."
    },
    "background-attachment": {
      "values": [
        "scroll",
        "fixed",
        "local"
      ],
      "description": "The background-attachment CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block."
    },
    "background-origin": {
      "values": [
        "border-box",
        "padding-box",
        "content-box"
      ],
      "description": "The background-origin CSS property sets the background's origin: from the border start, inside the border, or inside the padding."
    },
    "background-size": {
      "values": [
        "auto",
        "cover",
        "contain"
      ],
      "description": "The background-size CSS property sets the size of the element's background image."
    },
    "background": {
      "values": [],
      "description": "CSSRef(CSS Background)"
    },
    "border-top-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset"
      ],
      "description": "The border-top-style CSS property sets the line style of an element's top border."
    },
    "border-right-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset"
      ],
      "description": "The border-right-style CSS property sets the line style of an element's right border."
    },
    "border-bottom-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset"
      ],
      "description": "The border-bottom-style CSS property sets the line style of an element's bottom border."
    },
    "border-left-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset"
      ],
      "description": "The border-left-style CSS property sets the line style of an element's left border."
    },
    "border-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset"
      ],
      "description": "The border-style shorthand CSS property sets the line style for all four sides of an element's border."
    },
    "border-top-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The border-top-width CSS property sets the width of the top border of an element."
    },
    "border-right-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The border-right-width CSS property sets the width of the right border of an element."
    },
    "border-bottom-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The border-bottom-width CSS property sets the width of the bottom border of an element."
    },
    "border-left-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The border-left-width CSS property sets the width of the left border of an element."
    },
    "border-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The border-width shorthand CSS property sets the width of an element's border."
    },
    "border-top": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentcolor"
      ],
      "description": "The border-top shorthand CSS property sets all the properties of an element's top border."
    },
    "border-right": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentcolor"
      ],
      "description": "The border-right shorthand CSS property sets all the properties of an element's right border."
    },
    "border-bottom": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentcolor"
      ],
      "description": "The border-bottom shorthand CSS property sets an element's bottom border. It sets the values of border-bottom-width, border-bottom-style and border-bottom-color."
    },
    "border-left": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentcolor"
      ],
      "description": "The border-left shorthand CSS property sets all the properties of an element's left border."
    },
    "border": {
      "values": [
        "thin",
        "medium",
        "thick",
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "currentcolor"
      ],
      "description": "CSSRef(CSS Borders)"
    },
    "border-top-left-radius": {
      "values": [],
      "description": "The border-top-left-radius CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "border-top-right-radius": {
      "values": [],
      "description": "The border-top-right-radius CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "border-bottom-right-radius": {
      "values": [],
      "description": "The border-bottom-right-radius CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "border-bottom-left-radius": {
      "values": [],
      "description": "The border-bottom-left-radius CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner."
    },
    "border-image-source": {
      "values": [
        "none"
      ],
      "description": "The border-image-source CSS property sets the source image used to create an element's border image."
    },
    "border-image-slice": {
      "values": [
        "fill"
      ],
      "description": "The border-image-slice CSS property divides the image specified by border-image-source into regions. These regions form the components of an element's border image."
    },
    "border-image-width": {
      "values": [
        "auto"
      ],
      "description": "The border-image-width CSS property sets the width of an element's border image."
    },
    "border-image-outset": {
      "values": [],
      "description": "The border-image-outset CSS property sets the distance by which an element's border image is set out from its border box."
    },
    "border-image-repeat": {
      "values": [
        "stretch",
        "repeat",
        "round",
        "space"
      ],
      "description": "The border-image-repeat CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword fill in the border-image-slice property."
    },
    "border-image": {
      "values": [
        "none",
        "fill",
        "auto",
        "stretch",
        "repeat",
        "round",
        "space"
      ],
      "description": "The border-image CSS property draws an image around a given element. It replaces the element's regular border."
    },
    "box-shadow": {
      "values": [
        "none",
        "inset"
      ],
      "description": "The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color."
    },
    "margin-top": {
      "values": [
        "auto"
      ],
      "description": "The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "margin-right": {
      "values": [
        "auto"
      ],
      "description": "The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "margin-bottom": {
      "values": [
        "auto"
      ],
      "description": "The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "margin-left": {
      "values": [
        "auto"
      ],
      "description": "The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer."
    },
    "margin": {
      "values": [
        "auto"
      ],
      "description": "The margin CSS shorthand property sets the margin area on all four sides of an element."
    },
    "margin-trim": {
      "values": [
        "none",
        "block",
        "inline",
        "block-start",
        "inline-start",
        "block-end",
        "inline-end"
      ],
      "description": "The margin-trim property allows the container to trim the margins of its children where they adjoin the container's edges."
    },
    "padding-top": {
      "values": [],
      "description": "The padding-top CSS property sets the height of the padding area on the top of an element."
    },
    "padding-right": {
      "values": [],
      "description": "The padding-right CSS property sets the width of the padding area on the right of an element."
    },
    "padding-bottom": {
      "values": [],
      "description": "The padding-bottom CSS property sets the height of the padding area on the bottom of an element."
    },
    "padding-left": {
      "values": [],
      "description": "The padding-left CSS property sets the width of the padding area to the left of an element."
    },
    "padding": {
      "values": [],
      "description": "The padding CSS shorthand property sets the padding area on all four sides of an element at once."
    },
    "break-before": {
      "values": [
        "auto",
        "avoid",
        "always",
        "all",
        "avoid-page",
        "page",
        "left",
        "right",
        "recto",
        "verso",
        "avoid-column",
        "column",
        "avoid-region",
        "region"
      ],
      "description": "The break-before CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored."
    },
    "break-after": {
      "values": [
        "auto",
        "avoid",
        "always",
        "all",
        "avoid-page",
        "page",
        "left",
        "right",
        "recto",
        "verso",
        "avoid-column",
        "column",
        "avoid-region",
        "region"
      ],
      "description": "The break-after CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored."
    },
    "break-inside": {
      "values": [
        "auto",
        "avoid",
        "avoid-page",
        "avoid-column",
        "avoid-region"
      ],
      "description": "The break-inside CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored."
    },
    "orphans": {
      "values": [],
      "description": "The orphans CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column."
    },
    "widows": {
      "values": [],
      "description": "The widows CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column."
    },
    "margin-break": {
      "values": [
        "auto",
        "keep",
        "discard"
      ],
      "description": ""
    },
    "box-decoration-break": {
      "values": [
        "slice",
        "clone"
      ],
      "description": "The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages."
    },
    "all": {
      "values": [
        "initial",
        "inherit",
        "unset",
        "revert",
        "revert-layer"
      ],
      "description": "The all shorthand CSS property resets all of an element's properties except unicode-bidi, direction, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin."
    },
    "color-scheme": {
      "values": [
        "normal",
        "light",
        "dark",
        "only"
      ],
      "description": "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in."
    },
    "forced-color-adjust": {
      "values": [
        "auto",
        "none",
        "preserve-parent-color"
      ],
      "description": "The forced-color-adjust CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS."
    },
    "print-color-adjust": {
      "values": [
        "economy",
        "exact"
      ],
      "description": "The print-color-adjust CSS property sets what, if anything, the Glossary(user agent) may do to optimize the appearance of the element on the output device."
    },
    "color-adjust": {
      "values": [
        "economy",
        "exact"
      ],
      "description": ""
    },
    "color": {
      "values": [
        "currentcolor"
      ],
      "description": "The color CSS property sets the foreground color value of an element's text and text decorations, and sets the currentcolor value. currentcolor may be used as an indirect value on _other_ properties and is the default for other color properties, such as border-color."
    },
    "opacity": {
      "values": [],
      "description": "The opacity CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency."
    },
    "contain": {
      "values": [
        "none",
        "strict",
        "content",
        "size",
        "layout",
        "style",
        "paint"
      ],
      "description": "The contain CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree."
    },
    "container-type": {
      "values": [
        "normal",
        "size",
        "inline-size"
      ],
      "description": "The container-type CSS property is used to define the type of containment used in a container query."
    },
    "container-name": {
      "values": [
        "none"
      ],
      "description": "The container-name CSS property specifies a list of query container names used by the [@container](/en-US/docs/Web/CSS/@container) at-rule in a container query."
    },
    "container": {
      "values": [
        "none",
        "normal",
        "size",
        "inline-size"
      ],
      "description": "The container shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query."
    },
    "content-visibility": {
      "values": [
        "visible",
        "auto",
        "hidden"
      ],
      "description": "The content-visibility CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster."
    },
    "content": {
      "values": [
        "normal",
        "none"
      ],
      "description": "The content CSS property replaces an element with a generated value. Objects inserted using the content property are anonymous replaced elements."
    },
    "quotes": {
      "values": [
        "auto",
        "none"
      ],
      "description": "The quotes CSS property sets how the browser should render quotation marks that are added using the open-quotes or close-quotes values of the CSS content property."
    },
    "string-set": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "bookmark-level": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "bookmark-label": {
      "values": [],
      "description": ""
    },
    "bookmark-state": {
      "values": [
        "open",
        "closed"
      ],
      "description": ""
    },
    "display": {
      "values": [
        "block",
        "inline",
        "run-in",
        "flow",
        "flow-root",
        "table",
        "flex",
        "grid",
        "ruby",
        "list-item",
        "table-row-group",
        "table-header-group",
        "table-footer-group",
        "table-row",
        "table-cell",
        "table-column-group",
        "table-column",
        "table-caption",
        "ruby-base",
        "ruby-text",
        "ruby-base-container",
        "ruby-text-container",
        "contents",
        "none",
        "inline-block",
        "inline-table",
        "inline-flex",
        "inline-grid"
      ],
      "description": "The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex."
    },
    "order": {
      "values": [
        "reading",
        "layout"
      ],
      "description": "The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order."
    },
    "reading-order": {
      "values": [],
      "description": ""
    },
    "layout-order": {
      "values": [],
      "description": ""
    },
    "visibility": {
      "values": [
        "visible",
        "hidden",
        "collapse"
      ],
      "description": "The visibility CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a table."
    },
    "wrap-flow": {
      "values": [
        "auto",
        "both",
        "start",
        "end",
        "minimum",
        "maximum",
        "clear"
      ],
      "description": ""
    },
    "wrap-through": {
      "values": [
        "wrap",
        "none"
      ],
      "description": ""
    },
    "flex-direction": {
      "values": [
        "row",
        "row-reverse",
        "column",
        "column-reverse"
      ],
      "description": "The flex-direction CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)."
    },
    "flex-wrap": {
      "values": [
        "nowrap",
        "wrap",
        "wrap-reverse"
      ],
      "description": "The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked."
    },
    "flex-flow": {
      "values": [
        "row",
        "row-reverse",
        "column",
        "column-reverse",
        "nowrap",
        "wrap",
        "wrap-reverse"
      ],
      "description": "The flex-flow CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior."
    },
    "flex": {
      "values": [
        "none",
        "content"
      ],
      "description": "The flex CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container."
    },
    "flex-grow": {
      "values": [],
      "description": "The flex-grow CSS property sets the flex grow factor of a flex item's main size."
    },
    "flex-shrink": {
      "values": [],
      "description": "The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink."
    },
    "flex-basis": {
      "values": [
        "content",
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The flex-basis CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing."
    },
    "font-size-adjust": {
      "values": [
        "none",
        "ex-height",
        "cap-height",
        "ch-width",
        "ic-width",
        "ic-height",
        "from-font"
      ],
      "description": "The font-size-adjust CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters)."
    },
    "font-family": {
      "values": [],
      "description": "The font-family CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element."
    },
    "font-weight": {
      "values": [
        "normal",
        "bold",
        "bolder",
        "lighter"
      ],
      "description": "The font-weight CSS property sets the weight (or boldness) of the font. The weights available depend on the font-family that is currently set."
    },
    "font-stretch": {
      "values": [
        "normal",
        "ultra-condensed",
        "extra-condensed",
        "condensed",
        "semi-condensed",
        "semi-expanded",
        "expanded",
        "extra-expanded",
        "ultra-expanded"
      ],
      "description": "The font-stretch CSS property selects a normal, condensed, or expanded face from a font."
    },
    "font-style": {
      "values": [
        "normal",
        "italic",
        "oblique"
      ],
      "description": "The font-style CSS property sets whether a font should be styled with a normal, italic, or oblique face from its font-family."
    },
    "font-size": {
      "values": [
        "math"
      ],
      "description": "The font-size CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative &lt;length&gt; units, such as em, ex, and so forth."
    },
    "font": {
      "values": [
        "normal",
        "italic",
        "oblique",
        "small-caps",
        "bolder",
        "lighter",
        "ultra-condensed",
        "extra-condensed",
        "condensed",
        "semi-condensed",
        "semi-expanded",
        "expanded",
        "extra-expanded",
        "ultra-expanded",
        "math",
        "caption",
        "icon",
        "menu",
        "message-box",
        "small-caption",
        "status-bar"
      ],
      "description": "The font CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font."
    },
    "font-synthesis-weight": {
      "values": [
        "auto",
        "none"
      ],
      "description": ""
    },
    "font-synthesis-style": {
      "values": [
        "auto",
        "none"
      ],
      "description": ""
    },
    "font-synthesis-small-caps": {
      "values": [
        "auto",
        "none"
      ],
      "description": ""
    },
    "font-synthesis": {
      "values": [
        "none",
        "weight",
        "style",
        "small-caps"
      ],
      "description": "The font-synthesis CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser."
    },
    "font-kerning": {
      "values": [
        "auto",
        "normal",
        "none"
      ],
      "description": "The font-kerning CSS property sets the use of the kerning information stored in a font."
    },
    "font-variant-ligatures": {
      "values": [
        "normal",
        "none",
        "common-ligatures",
        "no-common-ligatures",
        "discretionary-ligatures",
        "no-discretionary-ligatures",
        "historical-ligatures",
        "no-historical-ligatures",
        "contextual",
        "no-contextual"
      ],
      "description": "The font-variant-ligatures CSS property controls which Glossary(ligature, ligatures) and Glossary(contextual forms) are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text."
    },
    "font-variant-position": {
      "values": [
        "normal",
        "sub",
        "super"
      ],
      "description": "The font-variant-position CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript."
    },
    "font-variant-caps": {
      "values": [
        "normal",
        "small-caps",
        "all-small-caps",
        "petite-caps",
        "all-petite-caps",
        "unicase",
        "titling-caps"
      ],
      "description": "The font-variant-caps CSS property controls the use of alternate glyphs for capital letters."
    },
    "font-variant-numeric": {
      "values": [
        "normal",
        "lining-nums",
        "oldstyle-nums",
        "proportional-nums",
        "tabular-nums",
        "diagonal-fractions",
        "stacked-fractions",
        "ordinal",
        "slashed-zero"
      ],
      "description": "The font-variant-numeric CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers."
    },
    "font-variant-alternates": {
      "values": [
        "normal",
        "stylistic()",
        "historical-forms",
        "styleset(",
        "character-variant(",
        "swash()",
        "ornaments()",
        "annotation()"
      ],
      "description": "The font-variant-alternates CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in @font-feature-values."
    },
    "font-variant-east-asian": {
      "values": [
        "normal",
        "jis78",
        "jis83",
        "jis90",
        "jis04",
        "simplified",
        "traditional",
        "full-width",
        "proportional-width",
        "ruby"
      ],
      "description": "The font-variant-east-asian CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese."
    },
    "font-variant": {
      "values": [
        "normal",
        "none",
        "common-ligatures",
        "no-common-ligatures",
        "discretionary-ligatures",
        "no-discretionary-ligatures",
        "historical-ligatures",
        "no-historical-ligatures",
        "contextual",
        "no-contextual",
        "small-caps",
        "all-small-caps",
        "petite-caps",
        "all-petite-caps",
        "unicase",
        "titling-caps",
        "stylistic()",
        "historical-forms",
        "styleset(",
        "character-variant(",
        "swash()",
        "ornaments()",
        "annotation()",
        "lining-nums",
        "oldstyle-nums",
        "proportional-nums",
        "tabular-nums",
        "diagonal-fractions",
        "stacked-fractions",
        "ordinal",
        "slashed-zero",
        "jis78",
        "jis83",
        "jis90",
        "jis04",
        "simplified",
        "traditional",
        "full-width",
        "proportional-width",
        "ruby",
        "sub",
        "super",
        "text",
        "emoji",
        "unicode"
      ],
      "description": "The font-variant CSS shorthand property allows you to set all the font variants for a font."
    },
    "font-feature-settings": {
      "values": [
        "normal"
      ],
      "description": "The font-feature-settings CSS property controls advanced typographic features in OpenType fonts."
    },
    "font-language-override": {
      "values": [
        "normal"
      ],
      "description": "The font-language-override CSS property controls the use of language-specific glyphs in a typeface."
    },
    "font-optical-sizing": {
      "values": [
        "auto",
        "none"
      ],
      "description": "The font-optical-sizing CSS property sets whether text rendering is optimized for viewing at different sizes."
    },
    "font-variation-settings": {
      "values": [
        "normal"
      ],
      "description": "The font-variation-settings CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values."
    },
    "font-palette": {
      "values": [
        "normal",
        "light",
        "dark"
      ],
      "description": "The font-palette CSS property allows specifying one of the many palettes contained in a font that a user agent should use for the font. Users can also override the values in a palette or create a new palette by using the [@font-palette-values](/en-US/docs/Web/CSS/@font-palette-values) at-rule."
    },
    "font-variant-emoji": {
      "values": [
        "normal",
        "text",
        "emoji",
        "unicode"
      ],
      "description": "The font-variant-emoji CSS property specifies the default presentation style for displaying emojis."
    },
    "copy-into": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "position": {
      "values": [
        "static",
        "relative",
        "absolute",
        "sticky",
        "fixed"
      ],
      "description": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements."
    },
    "float": {
      "values": [
        "block-start",
        "block-end",
        "inline-start",
        "inline-end",
        "snap-block",
        "snap-inline",
        "left",
        "right",
        "top",
        "bottom",
        "none"
      ],
      "description": "The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning."
    },
    "footnote-display": {
      "values": [
        "block",
        "inline",
        "compact"
      ],
      "description": ""
    },
    "footnote-policy": {
      "values": [
        "auto",
        "line",
        "block"
      ],
      "description": ""
    },
    "grid-template-columns": {
      "values": [
        "none",
        "subgrid"
      ],
      "description": "The grid-template-columns CSS property defines the line names and track sizing functions of the glossary(grid column, grid columns)."
    },
    "grid-template-rows": {
      "values": [
        "none",
        "subgrid"
      ],
      "description": "The grid-template-rows CSS property defines the line names and track sizing functions of the glossary(grid_row, grid rows)."
    },
    "masonry-auto-flow": {
      "values": [
        "pack",
        "next",
        "definite-first",
        "ordered"
      ],
      "description": "The masonry-auto-flow CSS property modifies how items are placed when using masonry in CSS Grid Layout."
    },
    "align-tracks": {
      "values": [
        "normal",
        "first",
        "last",
        "baseline",
        "space-between",
        "space-around",
        "space-evenly",
        "stretch",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "flex-start",
        "flex-end"
      ],
      "description": "The align-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis."
    },
    "justify-tracks": {
      "values": [
        "normal",
        "space-between",
        "space-around",
        "space-evenly",
        "stretch",
        "unsafe",
        "safe",
        "center",
        "start",
        "end",
        "flex-start",
        "flex-end",
        "left",
        "right"
      ],
      "description": "The justify-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis."
    },
    "grid-template-areas": {
      "values": [
        "none"
      ],
      "description": "The grid-template-areas CSS property specifies named glossary(grid areas), establishing the cells in the grid and assigning them names."
    },
    "grid-template": {
      "values": [
        "none",
        "subgrid",
        "minmax(",
        "fit-content("
      ],
      "description": "The grid-template CSS property is a shorthand property for defining glossary(grid column, grid columns), glossary(grid_row, grid rows), and glossary(grid areas, grid areas)."
    },
    "grid-auto-columns": {
      "values": [
        "minmax(",
        "fit-content("
      ],
      "description": "The grid-auto-columns CSS property specifies the size of an implicitly-created grid column glossary(grid tracks, track) or pattern of tracks."
    },
    "grid-auto-rows": {
      "values": [
        "minmax(",
        "fit-content("
      ],
      "description": "The grid-auto-rows CSS property specifies the size of an implicitly-created grid row glossary(grid tracks, track) or pattern of tracks."
    },
    "grid-auto-flow": {
      "values": [
        "row",
        "column",
        "dense"
      ],
      "description": "The grid-auto-flow CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid."
    },
    "grid": {
      "values": [
        "none",
        "subgrid",
        "auto-flow",
        "dense"
      ],
      "description": "The grid CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration."
    },
    "grid-row-start": {
      "values": [],
      "description": "The grid-row-start CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its glossary(grid areas, grid area)."
    },
    "grid-column-start": {
      "values": [],
      "description": "The grid-column-start CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the glossary(grid areas, grid area)."
    },
    "grid-row-end": {
      "values": [],
      "description": "The grid-row-end CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its glossary(grid areas, grid area)."
    },
    "grid-column-end": {
      "values": [],
      "description": "The grid-column-end CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its glossary(grid areas, grid area)."
    },
    "grid-row": {
      "values": [],
      "description": "The grid-row CSS shorthand property specifies a grid item's size and location within a glossary(grid row) by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its glossary(grid areas, grid area)."
    },
    "grid-column": {
      "values": [],
      "description": "The grid-column CSS shorthand property specifies a grid item's size and location within a glossary(grid column) by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its glossary(grid areas, grid area)."
    },
    "grid-area": {
      "values": [],
      "description": "The grid-area CSS shorthand property specifies a grid item's size and location within a glossary(grid, grid) by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its glossary(grid areas, grid area)."
    },
    "object-fit": {
      "values": [
        "fill",
        "none",
        "contain",
        "cover",
        "scale-down"
      ],
      "description": "The object-fit CSS property sets how the content of a replaced element, such as an img or video, should be resized to fit its container."
    },
    "image-resolution": {
      "values": [
        "from-image",
        "snap"
      ],
      "description": "The image-resolution CSS property specifies the intrinsic resolution of all raster images used in or on the element. It affects content images such as replaced elements and generated content, and decorative images such as background-image images."
    },
    "object-view-box": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "object-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The object-position CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background."
    },
    "image-orientation": {
      "values": [
        "from-image",
        "none",
        "flip"
      ],
      "description": "The image-orientation CSS property specifies a layout-independent correction to the orientation of an image."
    },
    "image-rendering": {
      "values": [
        "auto",
        "smooth",
        "high-quality",
        "pixelated",
        "crisp-edges"
      ],
      "description": "The image-rendering CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants."
    },
    "dominant-baseline": {
      "values": [
        "auto",
        "text-bottom",
        "alphabetic",
        "ideographic",
        "middle",
        "central",
        "mathematical",
        "hanging",
        "text-top"
      ],
      "description": ""
    },
    "vertical-align": {
      "values": [
        "first",
        "last",
        "baseline",
        "text-bottom",
        "alphabetic",
        "ideographic",
        "middle",
        "central",
        "mathematical",
        "text-top",
        "sub",
        "super",
        "top",
        "center",
        "bottom"
      ],
      "description": "The vertical-align CSS property sets vertical alignment of an inline, inline-block or table-cell box."
    },
    "baseline-source": {
      "values": [
        "auto",
        "first",
        "last"
      ],
      "description": ""
    },
    "alignment-baseline": {
      "values": [
        "baseline",
        "text-bottom",
        "alphabetic",
        "ideographic",
        "middle",
        "central",
        "mathematical",
        "text-top"
      ],
      "description": ""
    },
    "baseline-shift": {
      "values": [
        "sub",
        "super",
        "top",
        "center",
        "bottom"
      ],
      "description": ""
    },
    "line-height": {
      "values": [
        "normal"
      ],
      "description": "The line-height CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height."
    },
    "text-edge": {
      "values": [
        "leading",
        "text",
        "cap",
        "ex",
        "ideographic",
        "ideographic-ink",
        "alphabetic"
      ],
      "description": ""
    },
    "leading-trim": {
      "values": [
        "normal",
        "start",
        "end",
        "both"
      ],
      "description": ""
    },
    "inline-sizing": {
      "values": [
        "normal",
        "stretch"
      ],
      "description": ""
    },
    "initial-letter": {
      "values": [
        "normal",
        "drop",
        "raise"
      ],
      "description": "The initial-letter CSS property sets styling for dropped, raised, and sunken initial letters."
    },
    "initial-letter-align": {
      "values": [
        "border-box",
        "alphabetic",
        "ideographic",
        "hanging",
        "leading"
      ],
      "description": "The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph."
    },
    "initial-letter-wrap": {
      "values": [
        "none",
        "first",
        "all",
        "grid"
      ],
      "description": ""
    },
    "line-grid": {
      "values": [
        "match-parent",
        "create"
      ],
      "description": ""
    },
    "line-snap": {
      "values": [
        "none",
        "baseline",
        "contain"
      ],
      "description": ""
    },
    "box-snap": {
      "values": [
        "none",
        "block-start",
        "block-end",
        "center",
        "baseline",
        "last-baseline"
      ],
      "description": ""
    },
    "link-parameters": {
      "values": [
        "none",
        "param("
      ],
      "description": ""
    },
    "list-style-image": {
      "values": [
        "none"
      ],
      "description": "The list-style-image CSS property sets an image to be used as the list item marker."
    },
    "list-style-type": {
      "values": [
        "none"
      ],
      "description": "The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element."
    },
    "list-style-position": {
      "values": [
        "inside",
        "outside"
      ],
      "description": "The list-style-position CSS property sets the position of the ::marker relative to a list item."
    },
    "list-style": {
      "values": [
        "inside",
        "outside",
        "none"
      ],
      "description": "The list-style CSS shorthand property allows you to set all the list style properties at once."
    },
    "marker-side": {
      "values": [
        "match-self",
        "match-parent"
      ],
      "description": ""
    },
    "counter-reset": {
      "values": [
        "reversed(",
        "none"
      ],
      "description": "The counter-reset CSS property resets a CSS counter to a given value."
    },
    "counter-increment": {
      "values": [
        "none"
      ],
      "description": "The counter-increment CSS property increases or decreases the value of a CSS counter by a given value."
    },
    "counter-set": {
      "values": [
        "none"
      ],
      "description": "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element."
    },
    "block-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The block-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode."
    },
    "inline-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The inline-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode."
    },
    "min-block-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The min-block-size CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode."
    },
    "min-inline-size": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The min-inline-size CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode."
    },
    "max-block-size": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The max-block-size CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by writing-mode. That is, if the writing direction is horizontal, then max-block-size is equivalent to max-height; if the writing direction is vertical, max-block-size is the same as max-width."
    },
    "max-inline-size": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The max-inline-size CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the max-width or the max-height property, depending on the value of writing-mode."
    },
    "margin-block-start": {
      "values": [
        "auto"
      ],
      "description": "The margin-block-start CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation."
    },
    "margin-block-end": {
      "values": [
        "auto"
      ],
      "description": "The margin-block-end CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation."
    },
    "margin-inline-start": {
      "values": [
        "auto"
      ],
      "description": "The margin-inline-start CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "margin-inline-end": {
      "values": [
        "auto"
      ],
      "description": "The margin-inline-end CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the margin-top, margin-right, margin-bottom or margin-left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "margin-block": {
      "values": [
        "auto"
      ],
      "description": "The margin-block CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
    },
    "margin-inline": {
      "values": [
        "auto"
      ],
      "description": "The margin-inline CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-block-start": {
      "values": [],
      "description": "The padding-block-start CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-block-end": {
      "values": [],
      "description": "The padding-block-end CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-inline-start": {
      "values": [],
      "description": "The padding-inline-start CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-inline-end": {
      "values": [],
      "description": "The padding-inline-end CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-block": {
      "values": [],
      "description": "The padding-block CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
    },
    "padding-inline": {
      "values": [],
      "description": "The padding-inline CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
    },
    "border-block-start-width": {
      "values": [],
      "description": "The border-block-start-width CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-end-width": {
      "values": [],
      "description": "The border-block-end-width CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-start-width": {
      "values": [],
      "description": "The border-inline-start-width CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-end-width": {
      "values": [],
      "description": "The border-inline-end-width CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-width": {
      "values": [],
      "description": "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-width": {
      "values": [],
      "description": "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-start-style": {
      "values": [],
      "description": "The border-block-start-style CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-end-style": {
      "values": [],
      "description": "The border-block-end-style CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-start-style": {
      "values": [],
      "description": "The border-inline-start-style CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-end-style": {
      "values": [],
      "description": "The border-inline-end-style CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-style": {
      "values": [],
      "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-style": {
      "values": [],
      "description": "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-start-color": {
      "values": [],
      "description": "The border-block-start-color CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-end-color": {
      "values": [],
      "description": "The border-block-end-color CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-start-color": {
      "values": [],
      "description": "The border-inline-start-color CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-end-color": {
      "values": [],
      "description": "The border-inline-end-color CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-color": {
      "values": [],
      "description": "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-inline-color": {
      "values": [],
      "description": "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "border-block-start": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-block-start CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet."
    },
    "border-block-end": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-block-end CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet."
    },
    "border-inline-start": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-inline-start CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet."
    },
    "border-inline-end": {
      "values": [
        "currentcolor"
      ],
      "description": "The border-inline-end CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet."
    },
    "border-block": {
      "values": [],
      "description": "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet."
    },
    "border-inline": {
      "values": [],
      "description": "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet."
    },
    "border-start-start-radius": {
      "values": [],
      "description": "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "border-start-end-radius": {
      "values": [],
      "description": "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "border-end-start-radius": {
      "values": [],
      "description": "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "border-end-end-radius": {
      "values": [],
      "description": "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode."
    },
    "clip-path": {
      "values": [
        "fill-box",
        "stroke-box",
        "view-box",
        "none"
      ],
      "description": "The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden."
    },
    "clip-rule": {
      "values": [
        "nonzero",
        "evenodd"
      ],
      "description": ""
    },
    "mask-image": {
      "values": [
        "none"
      ],
      "description": "The mask-image CSS property sets the image that is used as mask layer for an element."
    },
    "mask-mode": {
      "values": [
        "alpha",
        "luminance",
        "match-source"
      ],
      "description": "The mask-mode CSS property sets whether the mask reference defined by mask-image is treated as a luminance or alpha mask."
    },
    "mask-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat"
      ],
      "description": "The mask-repeat CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all."
    },
    "mask-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The mask-position CSS property sets the initial position, relative to the mask position layer set by mask-origin, for each defined mask image."
    },
    "mask-clip": {
      "values": [
        "fill-box",
        "stroke-box",
        "view-box",
        "no-clip"
      ],
      "description": "The mask-clip CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area."
    },
    "mask-origin": {
      "values": [
        "fill-box",
        "stroke-box",
        "view-box"
      ],
      "description": "The mask-origin CSS property sets the origin of a mask."
    },
    "mask-size": {
      "values": [
        "auto",
        "cover",
        "contain"
      ],
      "description": "The mask-size CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio."
    },
    "mask-composite": {
      "values": [
        "add",
        "subtract",
        "intersect",
        "exclude"
      ],
      "description": "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it."
    },
    "mask": {
      "values": [
        "no-clip"
      ],
      "description": "The mask CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points."
    },
    "mask-border-source": {
      "values": [
        "none"
      ],
      "description": "The mask-border-source CSS property sets the source image used to create an element's mask border."
    },
    "mask-border-mode": {
      "values": [
        "luminance",
        "alpha"
      ],
      "description": "The mask-border-mode CSS property specifies the blending mode used in a mask border."
    },
    "mask-border-slice": {
      "values": [
        "fill"
      ],
      "description": "The mask-border-slice CSS property divides the image set by mask-border-source into regions. These regions are used to form the components of an element's mask border."
    },
    "mask-border-width": {
      "values": [
        "auto"
      ],
      "description": "The mask-border-width CSS property sets the width of an element's mask border."
    },
    "mask-border-outset": {
      "values": [],
      "description": "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box."
    },
    "mask-border-repeat": {
      "values": [
        "stretch",
        "repeat",
        "round",
        "space"
      ],
      "description": "The mask-border-repeat CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border."
    },
    "mask-border": {
      "values": [
        "none",
        "fill",
        "auto",
        "stretch",
        "repeat",
        "round",
        "space",
        "luminance",
        "alpha"
      ],
      "description": "The mask-border CSS shorthand property lets you create a mask along the edge of an element's border."
    },
    "mask-type": {
      "values": [
        "luminance",
        "alpha"
      ],
      "description": "The mask-type CSS property sets whether an SVG mask element is used as a _luminance_ or an _alpha_ mask. It applies to the <mask> element itself."
    },
    "clip": {
      "values": [
        "auto"
      ],
      "description": "> Warning: Where possible, authors are encouraged to use the newer clip-path property instead."
    },
    "column-span": {
      "values": [
        "none",
        "all",
        "auto"
      ],
      "description": "The column-span CSS property makes it possible for an element to span across all columns when its value is set to all."
    },
    "column-width": {
      "values": [
        "auto"
      ],
      "description": "The column-width CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the column-width value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width."
    },
    "column-count": {
      "values": [
        "auto"
      ],
      "description": "The column-count CSS property breaks an element's content into the specified number of columns."
    },
    "columns": {
      "values": [
        "auto"
      ],
      "description": "The columns CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths."
    },
    "column-rule-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The column-rule-color CSS property sets the color of the line drawn between columns in a multi-column layout."
    },
    "column-rule-style": {
      "values": [
        "none",
        "hidden",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset"
      ],
      "description": "The column-rule-style CSS property sets the style of the line drawn between columns in a multi-column layout."
    },
    "column-rule-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The column-rule-width CSS property sets the width of the line drawn between columns in a multi-column layout."
    },
    "column-rule": {
      "values": [],
      "description": "The column-rule shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout."
    },
    "column-fill": {
      "values": [
        "auto",
        "balance",
        "balance-all"
      ],
      "description": "The column-fill CSS property controls how an element's contents are balanced when broken into columns."
    },
    "spatial-navigation-contain": {
      "values": [
        "auto",
        "contain"
      ],
      "description": ""
    },
    "spatial-navigation-action": {
      "values": [
        "auto",
        "focus",
        "scroll"
      ],
      "description": ""
    },
    "spatial-navigation-function": {
      "values": [
        "normal",
        "grid"
      ],
      "description": ""
    },
    "overflow-clip-margin-top": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-right": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-bottom": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-left": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-block-start": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-inline-start": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-block-end": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-inline-end": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": "The overflow-clip-margin CSS property determines how far outside its bounds an element with [overflow: clip](/en-US/docs/Web/CSS/overflow) may be painted before being clipped."
    },
    "overflow-clip-margin-inline": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "overflow-clip-margin-block": {
      "values": [
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "text-overflow": {
      "values": [
        "clip",
        "ellipsis",
        "fade"
      ],
      "description": "The text-overflow CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('…'), or display a custom string."
    },
    "block-ellipsis": {
      "values": [
        "none",
        "auto"
      ],
      "description": ""
    },
    "line-clamp": {
      "values": [
        "none",
        "auto"
      ],
      "description": ""
    },
    "-webkit-line-clamp": {
      "values": [
        "none"
      ],
      "description": "The -webkit-line-clamp CSS property allows limiting of the contents of a block to the specified number of lines."
    },
    "continue": {
      "values": [
        "auto",
        "discard",
        "-webkit-discard",
        "overflow",
        "paginate",
        "fragments"
      ],
      "description": ""
    },
    "max-lines": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "overflow-x": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto"
      ],
      "description": "The overflow-x CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content."
    },
    "overflow-y": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto"
      ],
      "description": "The overflow-y CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content."
    },
    "overflow-block": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto"
      ],
      "description": "The overflow-block CSS property sets what shows when content overflows the block start and block end edges of a box. This may be nothing, a scroll bar, or the overflow content."
    },
    "overflow-inline": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto"
      ],
      "description": "The overflow-inline CSS property sets what shows when content overflows the inline start and end edges of a box. This may be nothing, a scroll bar, or the overflow content."
    },
    "overflow": {
      "values": [
        "visible",
        "hidden",
        "clip",
        "scroll",
        "auto"
      ],
      "description": "The overflow CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions."
    },
    "scroll-behavior": {
      "values": [
        "auto",
        "smooth"
      ],
      "description": "The scroll-behavior CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs."
    },
    "scrollbar-gutter": {
      "values": [
        "auto",
        "stable",
        "both-edges"
      ],
      "description": "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed."
    },
    "overscroll-behavior": {
      "values": [
        "contain",
        "none",
        "auto"
      ],
      "description": "The overscroll-behavior CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for overscroll-behavior-x and overscroll-behavior-y."
    },
    "overscroll-behavior-x": {
      "values": [
        "contain",
        "none",
        "auto"
      ],
      "description": "The overscroll-behavior-x CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached."
    },
    "overscroll-behavior-y": {
      "values": [
        "contain",
        "none",
        "auto"
      ],
      "description": "The overscroll-behavior-y CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached."
    },
    "overscroll-behavior-inline": {
      "values": [
        "contain",
        "none",
        "auto"
      ],
      "description": "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached."
    },
    "overscroll-behavior-block": {
      "values": [
        "contain",
        "none",
        "auto"
      ],
      "description": "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached."
    },
    "float-reference": {
      "values": [
        "inline",
        "column",
        "region",
        "page"
      ],
      "description": ""
    },
    "clear": {
      "values": [
        "inline-start",
        "inline-end",
        "block-start",
        "block-end",
        "left",
        "right",
        "top",
        "bottom",
        "none"
      ],
      "description": "The clear CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The clear property applies to floating and non-floating elements."
    },
    "float-defer": {
      "values": [
        "last",
        "none"
      ],
      "description": ""
    },
    "float-offset": {
      "values": [],
      "description": ""
    },
    "page": {
      "values": [
        "auto"
      ],
      "description": ""
    },
    "top": {
      "values": [
        "auto"
      ],
      "description": "The top CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements."
    },
    "right": {
      "values": [
        "auto"
      ],
      "description": "The right CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements."
    },
    "bottom": {
      "values": [
        "auto"
      ],
      "description": "The bottom CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements."
    },
    "left": {
      "values": [
        "auto"
      ],
      "description": "The left CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements."
    },
    "inset-block-start": {
      "values": [
        "auto"
      ],
      "description": "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "inset-inline-start": {
      "values": [
        "auto"
      ],
      "description": "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "inset-block-end": {
      "values": [
        "auto"
      ],
      "description": "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "inset-inline-end": {
      "values": [
        "auto"
      ],
      "description": "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "inset-block": {
      "values": [],
      "description": "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "inset-inline": {
      "values": [],
      "description": "The inset-inline CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    "inset": {
      "values": [],
      "description": "The inset CSS property is a shorthand that corresponds to the top, right, bottom, and/or left properties. It has the same multi-value syntax of the margin shorthand."
    },
    "flow-into": {
      "values": [
        "none",
        "element",
        "content"
      ],
      "description": ""
    },
    "flow-from": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "region-fragment": {
      "values": [
        "auto",
        "break"
      ],
      "description": ""
    },
    "block-step-size": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "block-step-insert": {
      "values": [
        "margin",
        "padding"
      ],
      "description": ""
    },
    "block-step-align": {
      "values": [
        "auto",
        "center",
        "start",
        "end"
      ],
      "description": ""
    },
    "block-step-round": {
      "values": [
        "up",
        "down",
        "nearest"
      ],
      "description": ""
    },
    "block-step": {
      "values": [
        "none",
        "margin",
        "padding",
        "auto",
        "center",
        "start",
        "end",
        "up",
        "down",
        "nearest"
      ],
      "description": ""
    },
    "line-height-step": {
      "values": [],
      "description": "The line-height-step CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit."
    },
    "border-boundary": {
      "values": [
        "none",
        "parent",
        "display"
      ],
      "description": ""
    },
    "ruby-position": {
      "values": [
        "alternate",
        "over",
        "under",
        "inter-character"
      ],
      "description": "The ruby-position CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (over), under it (under), or between the characters on their right side (inter-character)."
    },
    "ruby-merge": {
      "values": [
        "separate",
        "merge",
        "auto"
      ],
      "description": ""
    },
    "ruby-align": {
      "values": [
        "start",
        "center",
        "space-between",
        "space-around"
      ],
      "description": "The ruby-align CSS property defines the distribution of the different ruby elements over the base."
    },
    "ruby-overhang": {
      "values": [
        "auto",
        "none"
      ],
      "description": ""
    },
    "overflow-anchor": {
      "values": [
        "auto",
        "none"
      ],
      "description": "The overflow-anchor CSS property provides a way to opt out of the browser's scroll anchoring behavior, which adjusts scroll position to minimize content shifts."
    },
    "scroll-start": {
      "values": [
        "auto",
        "start",
        "end",
        "center",
        "left",
        "right",
        "top",
        "bottom"
      ],
      "description": ""
    },
    "scroll-start-target": {
      "values": [
        "none",
        "auto"
      ],
      "description": ""
    },
    "scroll-start-x": {
      "values": [
        "auto",
        "start",
        "end",
        "center"
      ],
      "description": ""
    },
    "scroll-start-y": {
      "values": [
        "auto",
        "start",
        "end",
        "center"
      ],
      "description": ""
    },
    "scroll-start-inline": {
      "values": [
        "auto",
        "start",
        "end",
        "center"
      ],
      "description": ""
    },
    "scroll-start-block": {
      "values": [
        "auto",
        "start",
        "end",
        "center"
      ],
      "description": ""
    },
    "scroll-snap-type": {
      "values": [
        "none",
        "block",
        "inline",
        "both",
        "mandatory",
        "proximity"
      ],
      "description": "The scroll-snap-type CSS property sets how strictly snap points are enforced on the scroll container in case there is one."
    },
    "scroll-padding": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding shorthand property sets scroll padding on all sides of an element at once, much like the padding property does for padding on an element."
    },
    "scroll-margin": {
      "values": [],
      "description": "The scroll-margin shorthand property sets all of the scroll margins of an element at once, assigning values much like the margin property does for margins of an element."
    },
    "scroll-snap-align": {
      "values": [
        "none",
        "start",
        "end",
        "center"
      ],
      "description": "The scroll-snap-align property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value."
    },
    "scroll-snap-stop": {
      "values": [
        "normal",
        "always"
      ],
      "description": "The scroll-snap-stop CSS property defines whether or not the scroll container is allowed to pass over possible snap positions."
    },
    "scroll-padding-top": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-top property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-right": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-right property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-bottom": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-bottom property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-left": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-left property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-inline-start": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-block-start": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-inline-end": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-block-end": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport."
    },
    "scroll-padding-block": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-block shorthand property sets the scroll padding of an element in the block dimension."
    },
    "scroll-padding-inline": {
      "values": [
        "auto"
      ],
      "description": "The scroll-padding-inline shorthand property sets the scroll padding of an element in the inline dimension."
    },
    "scroll-margin-top": {
      "values": [],
      "description": "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-right": {
      "values": [],
      "description": "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-bottom": {
      "values": [],
      "description": "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-left": {
      "values": [],
      "description": "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-block-start": {
      "values": [],
      "description": "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-inline-start": {
      "values": [],
      "description": "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-block-end": {
      "values": [],
      "description": "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-inline-end": {
      "values": [],
      "description": "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets."
    },
    "scroll-margin-block": {
      "values": [],
      "description": "The scroll-margin-block shorthand property sets the scroll margins of an element in the block dimension."
    },
    "scroll-margin-inline": {
      "values": [],
      "description": "The scroll-margin-inline shorthand property sets the scroll margins of an element in the inline dimension."
    },
    "scrollbar-color": {
      "values": [
        "auto",
        "currentcolor"
      ],
      "description": "The scrollbar-color CSS property sets the color of the scrollbar track and thumb."
    },
    "scrollbar-width": {
      "values": [
        "auto",
        "thin",
        "none"
      ],
      "description": "The scrollbar-width property allows the author to set the maximum thickness of an element's scrollbars when they are shown."
    },
    "shape-inside": {
      "values": [
        "auto",
        "outside-shape",
        "shape-box",
        "display"
      ],
      "description": ""
    },
    "shape-padding": {
      "values": [],
      "description": ""
    },
    "shape-outside": {
      "values": [
        "none",
        "margin-box"
      ],
      "description": "The shape-outside CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes."
    },
    "shape-image-threshold": {
      "values": [],
      "description": "The shape-image-threshold CSS property sets the alpha channel threshold used to extract the shape using an image as the value for shape-outside."
    },
    "shape-margin": {
      "values": [],
      "description": "The shape-margin CSS property sets a margin for a CSS shape created using shape-outside."
    },
    "text-size-adjust": {
      "values": [
        "auto",
        "none"
      ],
      "description": "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property."
    },
    "width": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The width CSS property sets an element's width. By default, it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area."
    },
    "height": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The height CSS property specifies the height of an element. By default, the property defines the height of the content area. If box-sizing is set to border-box, however, it instead determines the height of the border area."
    },
    "min-width": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The min-width CSS property sets the minimum width of an element. It prevents the used value of the width property from becoming smaller than the value specified for min-width."
    },
    "min-height": {
      "values": [
        "auto",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The min-height CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for min-height."
    },
    "max-width": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The max-width CSS property sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width."
    },
    "max-height": {
      "values": [
        "none",
        "min-content",
        "max-content",
        "fit-content()"
      ],
      "description": "The max-height CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for max-height."
    },
    "aspect-ratio": {
      "values": [
        "auto"
      ],
      "description": "The aspect-ratio CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions."
    },
    "contain-intrinsic-width": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The contain-intrinsic-width CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment."
    },
    "contain-intrinsic-height": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The contain-intrinsic-length CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment."
    },
    "contain-intrinsic-block-size": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The contain-intrinsic-block-size CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment."
    },
    "contain-intrinsic-inline-size": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The contain-intrinsic-inline-size CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment."
    },
    "contain-intrinsic-size": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The contain-intrinsic-size CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment."
    },
    "min-intrinsic-sizing": {
      "values": [
        "legacy",
        "zero-if-scroll",
        "zero-if-extrinsic"
      ],
      "description": ""
    },
    "box-sizing": {
      "values": [
        "content-box",
        "border-box"
      ],
      "description": "The box-sizing CSS property sets how the total width and height of an element is calculated."
    },
    "voice-volume": {
      "values": [
        "silent",
        "x-soft",
        "soft",
        "medium",
        "loud",
        "x-loud"
      ],
      "description": ""
    },
    "voice-balance": {
      "values": [
        "left",
        "center",
        "right",
        "leftwards",
        "rightwards"
      ],
      "description": ""
    },
    "speak": {
      "values": [
        "auto",
        "never",
        "always"
      ],
      "description": ""
    },
    "speak-as": {
      "values": [
        "normal",
        "spell-out",
        "digits",
        "literal-punctuation",
        "no-punctuation"
      ],
      "description": ""
    },
    "pause-before": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong"
      ],
      "description": ""
    },
    "pause-after": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong"
      ],
      "description": ""
    },
    "pause": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong"
      ],
      "description": ""
    },
    "rest-before": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong"
      ],
      "description": ""
    },
    "rest-after": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong"
      ],
      "description": ""
    },
    "rest": {
      "values": [
        "none",
        "x-weak",
        "weak",
        "medium",
        "strong",
        "x-strong"
      ],
      "description": ""
    },
    "cue-before": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "cue-after": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "cue": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "voice-family": {
      "values": [
        "preserve"
      ],
      "description": ""
    },
    "voice-rate": {
      "values": [
        "normal",
        "x-slow",
        "slow",
        "medium",
        "fast",
        "x-fast"
      ],
      "description": ""
    },
    "voice-pitch": {
      "values": [
        "absolute",
        "x-low",
        "low",
        "medium",
        "high",
        "x-high"
      ],
      "description": ""
    },
    "voice-range": {
      "values": [
        "absolute",
        "x-low",
        "low",
        "medium",
        "high",
        "x-high"
      ],
      "description": ""
    },
    "voice-stress": {
      "values": [
        "normal",
        "strong",
        "moderate",
        "none",
        "reduced"
      ],
      "description": ""
    },
    "voice-duration": {
      "values": [
        "auto"
      ],
      "description": ""
    },
    "table-layout": {
      "values": [
        "auto",
        "fixed"
      ],
      "description": "The table-layout CSS property sets the algorithm used to lay out table cells, rows, and columns."
    },
    "border-collapse": {
      "values": [
        "separate",
        "collapse"
      ],
      "description": "The border-collapse CSS property sets whether cells inside a table have shared or separate borders."
    },
    "border-spacing": {
      "values": [],
      "description": "The border-spacing CSS property sets the distance between the borders of adjacent cells in a table. This property applies only when border-collapse is separate."
    },
    "caption-side": {
      "values": [
        "top",
        "bottom"
      ],
      "description": "The caption-side CSS property puts the content of a table's caption on the specified side. The values are relative to the cssxref('writing-mode') of the table."
    },
    "empty-cells": {
      "values": [
        "show",
        "hide"
      ],
      "description": "The empty-cells CSS property sets whether borders and backgrounds appear around table cells that have no visible content."
    },
    "text-transform": {
      "values": [
        "none",
        "capitalize",
        "uppercase",
        "lowercase",
        "full-width",
        "full-size-kana"
      ],
      "description": "The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby."
    },
    "word-boundary-detection": {
      "values": [
        "normal",
        "manual",
        "auto()"
      ],
      "description": ""
    },
    "word-boundary-expansion": {
      "values": [
        "none",
        "space",
        "ideographic-space"
      ],
      "description": ""
    },
    "white-space": {
      "values": [
        "normal",
        "pre",
        "nowrap",
        "pre-wrap",
        "break-spaces",
        "pre-line"
      ],
      "description": "The white-space CSS property sets how Glossary(whitespace, white space) inside an element is handled."
    },
    "text-space-collapse": {
      "values": [
        "collapse",
        "discard",
        "preserve",
        "preserve-breaks",
        "preserve-spaces"
      ],
      "description": ""
    },
    "text-space-trim": {
      "values": [
        "none",
        "discard-inner",
        "discard-before",
        "discard-after"
      ],
      "description": ""
    },
    "tab-size": {
      "values": [],
      "description": "The tab-size CSS property is used to customize the width of tab characters (U+0009)."
    },
    "word-break": {
      "values": [
        "normal",
        "keep-all",
        "break-all",
        "break-word"
      ],
      "description": "The word-break CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box."
    },
    "line-break": {
      "values": [
        "auto",
        "loose",
        "normal",
        "strict",
        "anywhere"
      ],
      "description": "The line-break CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols."
    },
    "hyphens": {
      "values": [
        "none",
        "manual",
        "auto"
      ],
      "description": "The hyphens CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate."
    },
    "hyphenate-character": {
      "values": [
        "auto"
      ],
      "description": "The hyphenate-character CSS property sets the character (or string) used at the end of a line before a hyphenation break."
    },
    "hyphenate-limit-zone": {
      "values": [],
      "description": ""
    },
    "hyphenate-limit-chars": {
      "values": [
        "auto"
      ],
      "description": "The hyphenate-limit-chars CSS property specifies the minimum word length to allow hyphenation of words as well as the minimum number of characters before and after the hyphen."
    },
    "hyphenate-limit-lines": {
      "values": [
        "no-limit"
      ],
      "description": ""
    },
    "hyphenate-limit-last": {
      "values": [
        "none",
        "always",
        "column",
        "page",
        "spread"
      ],
      "description": ""
    },
    "overflow-wrap": {
      "values": [
        "normal",
        "break-word",
        "anywhere"
      ],
      "description": "The overflow-wrap CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box."
    },
    "word-wrap": {
      "values": [
        "normal",
        "break-word",
        "anywhere"
      ],
      "description": ""
    },
    "text-wrap": {
      "values": [
        "wrap",
        "nowrap",
        "balance",
        "stable",
        "pretty"
      ],
      "description": ""
    },
    "wrap-before": {
      "values": [
        "auto",
        "avoid",
        "avoid-line",
        "avoid-flex",
        "line",
        "flex"
      ],
      "description": ""
    },
    "wrap-after": {
      "values": [
        "auto",
        "avoid",
        "avoid-line",
        "avoid-flex",
        "line",
        "flex"
      ],
      "description": ""
    },
    "wrap-inside": {
      "values": [
        "auto",
        "avoid"
      ],
      "description": ""
    },
    "text-align": {
      "values": [
        "start",
        "end",
        "left",
        "right",
        "center",
        "justify",
        "match-parent",
        "justify-all"
      ],
      "description": "The text-align CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like vertical-align but in the horizontal direction."
    },
    "text-align-all": {
      "values": [
        "start",
        "end",
        "left",
        "right",
        "center",
        "justify",
        "match-parent"
      ],
      "description": ""
    },
    "text-align-last": {
      "values": [
        "auto",
        "start",
        "end",
        "left",
        "right",
        "center",
        "justify",
        "match-parent"
      ],
      "description": "The text-align-last CSS property sets how the last line of a block or a line, right before a forced line break, is aligned."
    },
    "text-justify": {
      "values": [
        "auto",
        "none",
        "inter-word",
        "inter-character"
      ],
      "description": "The text-justify CSS property sets what type of justification should be applied to text when text-align: justify; is set on an element."
    },
    "text-group-align": {
      "values": [
        "none",
        "start",
        "end",
        "left",
        "right",
        "center"
      ],
      "description": ""
    },
    "word-spacing": {
      "values": [
        "normal"
      ],
      "description": "The word-spacing CSS property sets the length of space between words and between tags."
    },
    "letter-spacing": {
      "values": [
        "normal"
      ],
      "description": "The letter-spacing CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of letter-spacing causes characters to spread farther apart, while negative values of letter-spacing bring characters closer together."
    },
    "line-padding": {
      "values": [],
      "description": ""
    },
    "text-spacing": {
      "values": [
        "normal",
        "none",
        "auto",
        "no-compress",
        "trim-start",
        "space-start",
        "space-first",
        "trim-end",
        "space-end",
        "allow-end",
        "trim-adjacent",
        "space-adjacent",
        "ideograph-alpha",
        "ideograph-numeric",
        "punctuation"
      ],
      "description": ""
    },
    "text-indent": {
      "values": [
        "hanging",
        "each-line"
      ],
      "description": "The text-indent CSS property sets the length of empty space (indentation) that is put before lines of text in a block."
    },
    "hanging-punctuation": {
      "values": [
        "none",
        "first",
        "force-end",
        "allow-end",
        "last"
      ],
      "description": "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box."
    },
    "text-decoration-line": {
      "values": [
        "none",
        "underline",
        "overline",
        "line-through",
        "blink",
        "spelling-error",
        "grammar-error"
      ],
      "description": "The text-decoration-line CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline."
    },
    "text-decoration-style": {
      "values": [
        "solid",
        "double",
        "dotted",
        "dashed",
        "wavy"
      ],
      "description": "The text-decoration-style CSS property sets the style of the lines specified by  cssxref(text-decoration-line) . The style applies to all lines that are set with text-decoration-line."
    },
    "text-decoration-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The text-decoration-color CSS property sets the color of decorations added to text by  cssxref(text-decoration-line) ."
    },
    "text-decoration-thickness": {
      "values": [
        "auto",
        "from-font"
      ],
      "description": "The text-decoration-thickness CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline."
    },
    "text-decoration": {
      "values": [
        "none",
        "underline",
        "overline",
        "line-through",
        "blink",
        "auto",
        "from-font",
        "solid",
        "double",
        "dotted",
        "dashed",
        "wavy"
      ],
      "description": "The text-decoration shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property."
    },
    "text-underline-position": {
      "values": [
        "auto",
        "from-font",
        "under",
        "left",
        "right"
      ],
      "description": "The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value."
    },
    "text-underline-offset": {
      "values": [
        "auto"
      ],
      "description": "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position."
    },
    "text-decoration-trim": {
      "values": [
        "auto"
      ],
      "description": ""
    },
    "text-decoration-skip": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The text-decoration-skip CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors."
    },
    "text-decoration-skip-self": {
      "values": [
        "auto",
        "skip-all",
        "skip-underline",
        "skip-overline",
        "skip-line-through",
        "no-skip"
      ],
      "description": ""
    },
    "text-decoration-skip-box": {
      "values": [
        "none",
        "all"
      ],
      "description": ""
    },
    "text-decoration-skip-spaces": {
      "values": [
        "none",
        "all",
        "start",
        "end"
      ],
      "description": ""
    },
    "text-decoration-skip-ink": {
      "values": [
        "auto",
        "none",
        "all"
      ],
      "description": "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders."
    },
    "text-emphasis-style": {
      "values": [
        "none",
        "filled",
        "open",
        "dot",
        "circle",
        "double-circle",
        "triangle",
        "sesame"
      ],
      "description": "The text-emphasis-style CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the text-emphasis shorthand."
    },
    "text-emphasis-color": {
      "values": [
        "currentcolor"
      ],
      "description": "The text-emphasis-color CSS property sets the color of emphasis marks. This value can also be set using the text-emphasis shorthand."
    },
    "text-emphasis": {
      "values": [
        "none",
        "filled",
        "open",
        "dot",
        "circle",
        "double-circle",
        "triangle",
        "sesame"
      ],
      "description": "The text-emphasis CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for text-emphasis-style and text-emphasis-color."
    },
    "text-emphasis-position": {
      "values": [
        "over",
        "under",
        "right",
        "left"
      ],
      "description": "The text-emphasis-position CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased."
    },
    "text-emphasis-skip": {
      "values": [
        "spaces",
        "punctuation",
        "symbols",
        "narrow"
      ],
      "description": ""
    },
    "text-shadow": {
      "values": [
        "none",
        "inset"
      ],
      "description": "The text-shadow CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color."
    },
    "translate": {
      "values": [
        "none"
      ],
      "description": "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    "rotate": {
      "values": [
        "none"
      ],
      "description": "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform property."
    },
    "scale": {
      "values": [
        "none"
      ],
      "description": "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    "transform-style": {
      "values": [
        "flat",
        "preserve-3d"
      ],
      "description": "The transform-style CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element."
    },
    "perspective": {
      "values": [
        "none"
      ],
      "description": "The perspective CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective."
    },
    "perspective-origin": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The perspective-origin CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the perspective property."
    },
    "backface-visibility": {
      "values": [
        "visible",
        "hidden"
      ],
      "description": "The backface-visibility CSS property sets whether the back face of an element is visible when turned towards the user."
    },
    "transform": {
      "values": [
        "none"
      ],
      "description": "The transform CSS property lets you rotate, scale, skew, or translate an element."
    },
    "transform-origin": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The transform-origin CSS property sets the origin for an element's transformations."
    },
    "transform-box": {
      "values": [
        "content-box",
        "border-box",
        "fill-box",
        "stroke-box",
        "view-box"
      ],
      "description": "The transform-box CSS property defines the layout box to which the transform, individual transform properties scale, and rotate, and transform-origin properties relate."
    },
    "transition-property": {
      "values": [
        "none",
        "all"
      ],
      "description": "The transition-property CSS property sets the CSS properties to which a transition effect should be applied."
    },
    "transition-duration": {
      "values": [],
      "description": "The transition-duration CSS property sets the length of time a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur."
    },
    "transition-timing-function": {
      "values": [
        "linear"
      ],
      "description": "The transition-timing-function CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect."
    },
    "transition-delay": {
      "values": [],
      "description": "The transition-delay CSS property specifies the duration to wait before starting a property's transition effect when its value changes."
    },
    "transition": {
      "values": [
        "none"
      ],
      "description": "The transition CSS property is a shorthand property for  cssxref(transition-property) ,  cssxref(transition-duration) ,  cssxref(transition-timing-function) , and  cssxref(transition-delay) ."
    },
    "outline": {
      "values": [
        "invert",
        "auto"
      ],
      "description": "The outline CSS shorthand property sets most of the outline properties in a single declaration."
    },
    "outline-width": {
      "values": [
        "thin",
        "medium",
        "thick"
      ],
      "description": "The CSS outline-width property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the border."
    },
    "outline-style": {
      "values": [
        "auto"
      ],
      "description": "The outline-style CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the border."
    },
    "outline-color": {
      "values": [
        "currentcolor",
        "invert"
      ],
      "description": "The outline-color CSS property sets the color of an element's outline."
    },
    "outline-offset": {
      "values": [],
      "description": "The outline-offset CSS property sets the amount of space between an outline and the edge or border of an element."
    },
    "resize": {
      "values": [
        "none",
        "both",
        "horizontal",
        "vertical",
        "block",
        "inline"
      ],
      "description": "The resize CSS property sets whether an element is resizable, and if so, in which directions."
    },
    "cursor": {
      "values": [
        "url(",
        "src(",
        "auto",
        "default",
        "none",
        "context-menu",
        "help",
        "pointer",
        "progress",
        "wait",
        "cell",
        "crosshair",
        "text",
        "vertical-text",
        "alias",
        "copy",
        "move",
        "no-drop",
        "not-allowed",
        "grab",
        "grabbing",
        "e-resize",
        "n-resize",
        "ne-resize",
        "nw-resize",
        "s-resize",
        "se-resize",
        "sw-resize",
        "w-resize",
        "ew-resize",
        "ns-resize",
        "nesw-resize",
        "nwse-resize",
        "col-resize",
        "row-resize",
        "all-scroll",
        "zoom-in",
        "zoom-out"
      ],
      "description": "The cursor CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element."
    },
    "caret-color": {
      "values": [
        "auto",
        "currentcolor"
      ],
      "description": "The caret-color CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. This is sometimes referred to as the text input cursor. The caret appears in elements such as input or those with the contenteditable attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property."
    },
    "caret-shape": {
      "values": [
        "auto",
        "bar",
        "block",
        "underscore"
      ],
      "description": ""
    },
    "caret": {
      "values": [
        "auto",
        "bar",
        "block",
        "underscore"
      ],
      "description": ""
    },
    "nav-up": {
      "values": [
        "auto",
        "current",
        "root"
      ],
      "description": ""
    },
    "nav-right": {
      "values": [
        "auto",
        "current",
        "root"
      ],
      "description": ""
    },
    "nav-down": {
      "values": [
        "auto",
        "current",
        "root"
      ],
      "description": ""
    },
    "nav-left": {
      "values": [
        "auto",
        "current",
        "root"
      ],
      "description": ""
    },
    "user-select": {
      "values": [
        "auto",
        "text",
        "none",
        "contain",
        "all"
      ],
      "description": "The user-select CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its Glossary(Chrome, chrome)), except in textboxes."
    },
    "accent-color": {
      "values": [
        "auto",
        "currentcolor"
      ],
      "description": "The accent-color CSS property sets the accent color for user-interface controls generated by some elements."
    },
    "appearance": {
      "values": [
        "none",
        "auto"
      ],
      "description": "The appearance CSS property is used to control native appearance of UI controls, that are based on operating system's theme."
    },
    "input-security": {
      "values": [
        "auto",
        "none"
      ],
      "description": ""
    },
    "-webkit-user-select": {
      "values": [],
      "description": ""
    },
    "-webkit-appearance": {
      "values": [],
      "description": ""
    },
    "view-transition-name": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "will-change": {
      "values": [
        "auto",
        "scroll-position",
        "contents"
      ],
      "description": "The will-change CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required."
    },
    "direction": {
      "values": [
        "ltr",
        "rtl"
      ],
      "description": "The direction CSS property sets the direction of text, table columns, and horizontal overflow. Use rtl for languages written from right to left (like Hebrew or Arabic), and ltr for those written from left to right (like English and most other languages)."
    },
    "unicode-bidi": {
      "values": [
        "normal",
        "embed",
        "isolate",
        "bidi-override",
        "isolate-override",
        "plaintext"
      ],
      "description": "The unicode-bidi CSS property, together with the direction property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The unicode-bidi property overrides this algorithm and allows the developer to control the text embedding."
    },
    "writing-mode": {
      "values": [
        "horizontal-tb",
        "vertical-rl",
        "vertical-lr",
        "sideways-rl",
        "sideways-lr"
      ],
      "description": "The writing-mode CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (html element for HTML documents)."
    },
    "text-orientation": {
      "values": [
        "mixed",
        "upright",
        "sideways"
      ],
      "description": "The text-orientation CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when writing-mode is not horizontal-tb). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers."
    },
    "glyph-orientation-vertical": {
      "values": [
        "auto",
        "0deg",
        "90deg",
        "90"
      ],
      "description": ""
    },
    "text-combine-upright": {
      "values": [
        "none",
        "all",
        "digits"
      ],
      "description": "The text-combine-upright CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes."
    },
    "z-index": {
      "values": [
        "auto",
        "inherit"
      ],
      "description": "The z-index CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one."
    },
    "page-break-before": {
      "values": [
        "auto",
        "always",
        "avoid",
        "left",
        "right",
        "inherit"
      ],
      "description": "> Warning: This property has been replaced by the break-before property."
    },
    "page-break-after": {
      "values": [
        "auto",
        "always",
        "avoid",
        "left",
        "right",
        "inherit"
      ],
      "description": "> Warning: This property has been replaced by the break-after property."
    },
    "page-break-inside": {
      "values": [
        "avoid",
        "auto",
        "inherit"
      ],
      "description": "> Warning: This property has been replaced by the break-inside property."
    },
    "fill-rule": {
      "values": [
        "nonzero",
        "evenodd"
      ],
      "description": ""
    },
    "fill-break": {
      "values": [
        "bounding-box",
        "slice",
        "clone"
      ],
      "description": ""
    },
    "fill-color": {
      "values": [
        "currentcolor"
      ],
      "description": ""
    },
    "fill-image": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "fill-origin": {
      "values": [
        "match-parent",
        "fill-box",
        "stroke-box",
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "fill-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": ""
    },
    "fill-size": {
      "values": [
        "auto",
        "cover",
        "contain"
      ],
      "description": ""
    },
    "fill-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat"
      ],
      "description": ""
    },
    "fill-opacity": {
      "values": [],
      "description": ""
    },
    "stroke-width": {
      "values": [],
      "description": ""
    },
    "stroke-align": {
      "values": [
        "center",
        "inset",
        "outset"
      ],
      "description": ""
    },
    "stroke-linecap": {
      "values": [
        "butt",
        "round",
        "square"
      ],
      "description": ""
    },
    "stroke-linejoin": {
      "values": [
        "crop",
        "arcs",
        "miter",
        "bevel",
        "round",
        "fallback"
      ],
      "description": ""
    },
    "stroke-miterlimit": {
      "values": [],
      "description": ""
    },
    "stroke-break": {
      "values": [
        "bounding-box",
        "slice",
        "clone"
      ],
      "description": ""
    },
    "stroke-dasharray": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "stroke-dashoffset": {
      "values": [],
      "description": ""
    },
    "stroke-dash-corner": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "stroke-dash-justify": {
      "values": [
        "none",
        "stretch",
        "compress",
        "dashes",
        "gaps"
      ],
      "description": ""
    },
    "stroke-color": {
      "values": [
        "currentcolor"
      ],
      "description": ""
    },
    "stroke-image": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "stroke-origin": {
      "values": [
        "match-parent",
        "fill-box",
        "stroke-box",
        "content-box",
        "padding-box",
        "border-box"
      ],
      "description": ""
    },
    "stroke-position": {
      "values": [
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": ""
    },
    "stroke-size": {
      "values": [
        "auto",
        "cover",
        "contain"
      ],
      "description": ""
    },
    "stroke-repeat": {
      "values": [
        "repeat-x",
        "repeat-y",
        "repeat",
        "space",
        "round",
        "no-repeat"
      ],
      "description": ""
    },
    "stroke-opacity": {
      "values": [],
      "description": ""
    },
    "backdrop-filter": {
      "values": [
        "none"
      ],
      "description": "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent."
    },
    "filter": {
      "values": [
        "none"
      ],
      "description": "The filter CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders."
    },
    "flood-color": {
      "values": [
        "currentcolor"
      ],
      "description": ""
    },
    "flood-opacity": {
      "values": [],
      "description": ""
    },
    "color-interpolation-filters": {
      "values": [
        "auto",
        "sRGB",
        "linearRGB"
      ],
      "description": ""
    },
    "lighting-color": {
      "values": [
        "currentcolor"
      ],
      "description": ""
    },
    "math-style": {
      "values": [
        "normal",
        "compact"
      ],
      "description": "The math-style property indicates whether MathML equations should render with normal or compact height."
    },
    "math-shift": {
      "values": [
        "normal",
        "compact"
      ],
      "description": "The math-shift property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift."
    },
    "math-depth": {
      "values": [
        "auto-add",
        "add()"
      ],
      "description": "The math-depth property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is math."
    },
    "offset-path": {
      "values": [
        "none",
        "url(",
        "src(",
        "content-box",
        "padding-box",
        "border-box",
        "fill-box",
        "stroke-box",
        "view-box"
      ],
      "description": "The offset-path CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system."
    },
    "offset-distance": {
      "values": [],
      "description": "The offset-distance CSS property specifies a position along an offset-path for an element to be placed."
    },
    "offset-position": {
      "values": [
        "auto",
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The offset-position CSS property defines the initial position of the offset-path."
    },
    "offset-anchor": {
      "values": [
        "auto",
        "left",
        "center",
        "right",
        "top",
        "bottom"
      ],
      "description": "The offset-anchor CSS property specifies the point inside the box of an element traveling along an offset-path that is actually moving along the path."
    },
    "offset-rotate": {
      "values": [
        "auto",
        "reverse"
      ],
      "description": "The offset-rotate CSS property defines the orientation/direction of the element as it is positioned along the offset-path."
    },
    "offset": {
      "values": [
        "auto",
        "none",
        "reverse"
      ],
      "description": "The offset CSS shorthand property sets all the properties required for animating an element along a defined path."
    },
    "scroll-timeline-name": {
      "values": [
        "none"
      ],
      "description": "The scroll-timeline-name CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation."
    },
    "scroll-timeline-axis": {
      "values": [
        "block",
        "inline",
        "vertical",
        "horizontal"
      ],
      "description": "The scroll-timeline-axis CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation."
    },
    "scroll-timeline": {
      "values": [
        "none",
        "block",
        "inline",
        "vertical",
        "horizontal"
      ],
      "description": "The scroll-timeline CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline."
    },
    "view-timeline-name": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "view-timeline-axis": {
      "values": [
        "block",
        "inline",
        "vertical",
        "horizontal"
      ],
      "description": ""
    },
    "view-timeline-inset": {
      "values": [
        "auto"
      ],
      "description": ""
    },
    "view-timeline": {
      "values": [
        "none",
        "block",
        "inline",
        "vertical",
        "horizontal"
      ],
      "description": ""
    },
    "animation-range": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "animation-range-start": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "animation-range-end": {
      "values": [
        "normal"
      ],
      "description": ""
    },
    "stroke-alignment": {
      "values": [
        "center",
        "inner",
        "outer"
      ],
      "description": ""
    },
    "stroke-dashcorner": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "stroke-dashadjust": {
      "values": [
        "none",
        "stretch",
        "compress",
        "dashes",
        "gaps"
      ],
      "description": ""
    },
    "cx": {
      "values": [],
      "description": ""
    },
    "cy": {
      "values": [],
      "description": ""
    },
    "r": {
      "values": [],
      "description": ""
    },
    "rx": {
      "values": [
        "auto"
      ],
      "description": ""
    },
    "ry": {
      "values": [
        "auto"
      ],
      "description": ""
    },
    "x": {
      "values": [],
      "description": ""
    },
    "y": {
      "values": [],
      "description": ""
    },
    "vector-effect": {
      "values": [
        "none",
        "non-scaling-stroke",
        "non-scaling-size",
        "non-rotation",
        "fixed-position"
      ],
      "description": ""
    },
    "d": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "shape-subtract": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "text-anchor": {
      "values": [
        "start",
        "middle",
        "end"
      ],
      "description": ""
    },
    "fill": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "stroke": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "marker-start": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "marker-mid": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "marker-end": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "marker": {
      "values": [
        "none"
      ],
      "description": ""
    },
    "paint-order": {
      "values": [
        "normal",
        "fill",
        "stroke",
        "markers"
      ],
      "description": "The paint-order CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn."
    },
    "color-interpolation": {
      "values": [
        "auto",
        "sRGB",
        "linearRGB"
      ],
      "description": ""
    },
    "shape-rendering": {
      "values": [
        "auto",
        "optimizeSpeed",
        "crispEdges",
        "geometricPrecision"
      ],
      "description": ""
    },
    "text-rendering": {
      "values": [
        "auto",
        "optimizeSpeed",
        "optimizeLegibility",
        "geometricPrecision"
      ],
      "description": "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text."
    },
    "pointer-events": {
      "values": [
        "auto",
        "bounding-box",
        "visiblePainted",
        "visibleFill",
        "visibleStroke",
        "visible",
        "painted",
        "fill",
        "stroke",
        "all",
        "none"
      ],
      "description": "The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events."
    },
    "stop-color": {
      "values": [],
      "description": ""
    },
    "stop-opacity": {
      "values": [],
      "description": ""
    }
  },
  "pseudoSelectors": {
    "::after": {
      "description": "Matches a virtual last child of the selected element."
    },
    "::before": {
      "description": "Creates a pseudo-element that is the first child of the element matched."
    },
    "::first-letter": {
      "description": "Matches the first letter of the first line of a block, if it is not preceded by any other content."
    },
    "::first-line": {
      "description": "Applies styles only to the first line of an element."
    },
    "::selection": {
      "description": "Applies rules to the portion of a document that has been highlighted."
    },
    ":active": {
      "description": "Matches when an element is being activated by the user."
    },
    ":checked": {
      "description": "Matches any radio input, checkbox input or option element that is checked or toggled to an on state."
    },
    ":default": {
      "description": "Matches any user interface element that is the default among a group of similar elements"
    },
    ":dir": {
      "argument": "direction",
      "description": "Matches elements based on the directionality of the text contained in it."
    },
    ":disabled": {
      "description": "Matches any disabled element."
    },
    ":empty": {
      "description": "Matches any element that has no children at all."
    },
    ":enabled": {
      "description": "Matches any enabled element."
    },
    ":first": {
      "description": "Describes the styling of the first page when printing a document."
    },
    ":first-child": {
      "description": "Matches any element that is the first child element of its parent."
    },
    ":first-of-type": {
      "description": "Matches the first sibling of its type in the list of children of its parent element."
    },
    ":focus": {
      "description": "Matches an element that has focus."
    },
    ":fullscreen": {
      "description": "Applies to any element that's currently being displayed in full-screen mode."
    },
    ":hover": {
      "description": "Matches when the user designates an element with a pointing device, but does not necessarily activate it."
    },
    ":indeterminate": {
      "description": "Matches any checkbox input whose indeterminate DOM property is set to true by JavaScript."
    },
    ":invalid": {
      "description": "Matches any <input> or <form> element whose content fails to validate according to the input's type setting."
    },
    ":lang": {
      "argument": "language",
      "description": "Matches elements based on the language the element is determined to be in."
    },
    ":last-child": {
      "description": "Matches any element that is the last child element of its parent."
    },
    ":last-of-type": {
      "description": "Matches the last sibling with the given element name in the list of children of its parent element."
    },
    ":left": {
      "description": "Matches any left page when printing a page."
    },
    ":link": {
      "description": "Matches links inside elements."
    },
    ":not": {
      "argument": "selector",
      "description": "Matches an element that is not represented by the argument."
    },
    ":nth-child": {
      "argument": "an+b",
      "description": "Matches an element that has an+b-1 siblings before it in the document tree."
    },
    ":nth-last-child": {
      "argument": "an+b",
      "description": "Matches an element that has an+b-1 siblings after it in the document tree."
    },
    ":nth-last-of-type": {
      "argument": "an+b",
      "description": "Matches an element that has an+b-1 siblings with the same element name after it in the document tree."
    },
    ":nth-of-type": {
      "argument": "an+b",
      "description": "Matches an element that has an+b-1 siblings with the same element name before it in the document tree"
    },
    ":only-child": {
      "description": "Matches any element which is the only child of its parent."
    },
    ":only-of-type": {
      "description": "Matches any element that has no siblings of the given type."
    },
    ":optional": {
      "description": "Matches any <input> element that does not have the required attribute set on it."
    },
    ":out-of-range": {
      "description": "Matches when an element has its value attribute outside the specified range limitations for this element."
    },
    ":read-only": {
      "description": "Matches when an element is not writable by the user."
    },
    ":read-write": {
      "description": "Matches when an element is editable by user like text input element."
    },
    ":required": {
      "description": "Matches any <input> element that has the required attribute set on it."
    },
    ":right": {
      "description": "Matches any right page when printing a page. It allows to describe the styling of right-side page."
    },
    ":root": {
      "description": "Matches the root element of a tree representing the document."
    },
    ":scope": {
      "description": "Matches the elements that are a reference point for selectors to match against."
    },
    ":target": {
      "description": "Matches the unique element, if any, with an id matching the fragment identifier of the URI of the document."
    },
    ":valid": {
      "description": "Matches any <input> or <form> element whose content validates correctly according to the input's type setting"
    },
    ":visited": {
      "description": "Matches links that have been visited."
    }
  }
}