{
  "compat": {
    "spec": {
      "title": "Compatibility Standard",
      "url": "https://compat.spec.whatwg.org/"
    },
    "properties": [
      {
        "name": "-webkit-text-fill-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "an RGBA color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "media": "visual",
        "styleDeclaration": [
          "-webkit-text-fill-color",
          "WebkitTextFillColor",
          "webkitTextFillColor"
        ]
      },
      {
        "name": "-webkit-text-stroke-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "an RGBA color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "media": "visual",
        "styleDeclaration": [
          "-webkit-text-stroke-color",
          "WebkitTextStrokeColor",
          "webkitTextStrokeColor"
        ]
      },
      {
        "name": "-webkit-text-stroke-width",
        "value": "<line-width>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "styleDeclaration": [
          "-webkit-text-stroke-width",
          "WebkitTextStrokeWidth",
          "webkitTextStrokeWidth"
        ]
      },
      {
        "name": "-webkit-text-stroke",
        "value": "<line-width> || <color>",
        "initial": "See individual properties",
        "appliesTo": "See individual properties",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "See individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "See individual properties",
        "media": "visual",
        "styleDeclaration": [
          "-webkit-text-stroke",
          "WebkitTextStroke",
          "webkitTextStroke"
        ]
      },
      {
        "name": "touch-action",
        "value": "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
        "initial": "auto",
        "appliesTo": "all elements except: non-replaced inline elements, table rows, row groups, table columns, and column groups.",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "Same as specified value",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "media": "visual",
        "styleDeclaration": [
          "touch-action",
          "touchAction"
        ]
      },
      {
        "name": "-webkit-align-items",
        "styleDeclaration": [
          "-webkit-align-items",
          "WebkitAlignItems",
          "webkitAlignItems"
        ]
      },
      {
        "name": "-webkit-align-content",
        "styleDeclaration": [
          "-webkit-align-content",
          "WebkitAlignContent",
          "webkitAlignContent"
        ]
      },
      {
        "name": "-webkit-align-self",
        "styleDeclaration": [
          "-webkit-align-self",
          "WebkitAlignSelf",
          "webkitAlignSelf"
        ]
      },
      {
        "name": "-webkit-animation-name",
        "styleDeclaration": [
          "-webkit-animation-name",
          "WebkitAnimationName",
          "webkitAnimationName"
        ]
      },
      {
        "name": "-webkit-animation-duration",
        "styleDeclaration": [
          "-webkit-animation-duration",
          "WebkitAnimationDuration",
          "webkitAnimationDuration"
        ]
      },
      {
        "name": "-webkit-animation-timing-function",
        "styleDeclaration": [
          "-webkit-animation-timing-function",
          "WebkitAnimationTimingFunction",
          "webkitAnimationTimingFunction"
        ]
      },
      {
        "name": "-webkit-animation-iteration-count",
        "styleDeclaration": [
          "-webkit-animation-iteration-count",
          "WebkitAnimationIterationCount",
          "webkitAnimationIterationCount"
        ]
      },
      {
        "name": "-webkit-animation-direction",
        "styleDeclaration": [
          "-webkit-animation-direction",
          "WebkitAnimationDirection",
          "webkitAnimationDirection"
        ]
      },
      {
        "name": "-webkit-animation-play-state",
        "styleDeclaration": [
          "-webkit-animation-play-state",
          "WebkitAnimationPlayState",
          "webkitAnimationPlayState"
        ]
      },
      {
        "name": "-webkit-animation-delay",
        "styleDeclaration": [
          "-webkit-animation-delay",
          "WebkitAnimationDelay",
          "webkitAnimationDelay"
        ]
      },
      {
        "name": "-webkit-animation-fill-mode",
        "styleDeclaration": [
          "-webkit-animation-fill-mode",
          "WebkitAnimationFillMode",
          "webkitAnimationFillMode"
        ]
      },
      {
        "name": "-webkit-animation",
        "styleDeclaration": [
          "-webkit-animation",
          "WebkitAnimation",
          "webkitAnimation"
        ]
      },
      {
        "name": "-webkit-backface-visibility",
        "styleDeclaration": [
          "-webkit-backface-visibility",
          "WebkitBackfaceVisibility",
          "webkitBackfaceVisibility"
        ]
      },
      {
        "name": "-webkit-background-clip",
        "styleDeclaration": [
          "-webkit-background-clip",
          "WebkitBackgroundClip",
          "webkitBackgroundClip"
        ]
      },
      {
        "name": "-webkit-background-origin",
        "styleDeclaration": [
          "-webkit-background-origin",
          "WebkitBackgroundOrigin",
          "webkitBackgroundOrigin"
        ]
      },
      {
        "name": "-webkit-background-size",
        "styleDeclaration": [
          "-webkit-background-size",
          "WebkitBackgroundSize",
          "webkitBackgroundSize"
        ]
      },
      {
        "name": "-webkit-border-bottom-left-radius",
        "styleDeclaration": [
          "-webkit-border-bottom-left-radius",
          "WebkitBorderBottomLeftRadius",
          "webkitBorderBottomLeftRadius"
        ]
      },
      {
        "name": "-webkit-border-bottom-right-radius",
        "styleDeclaration": [
          "-webkit-border-bottom-right-radius",
          "WebkitBorderBottomRightRadius",
          "webkitBorderBottomRightRadius"
        ]
      },
      {
        "name": "-webkit-border-top-left-radius",
        "styleDeclaration": [
          "-webkit-border-top-left-radius",
          "WebkitBorderTopLeftRadius",
          "webkitBorderTopLeftRadius"
        ]
      },
      {
        "name": "-webkit-border-top-right-radius",
        "styleDeclaration": [
          "-webkit-border-top-right-radius",
          "WebkitBorderTopRightRadius",
          "webkitBorderTopRightRadius"
        ]
      },
      {
        "name": "-webkit-border-radius",
        "styleDeclaration": [
          "-webkit-border-radius",
          "WebkitBorderRadius",
          "webkitBorderRadius"
        ]
      },
      {
        "name": "-webkit-box-shadow",
        "styleDeclaration": [
          "-webkit-box-shadow",
          "WebkitBoxShadow",
          "webkitBoxShadow"
        ]
      },
      {
        "name": "-webkit-box-sizing",
        "styleDeclaration": [
          "-webkit-box-sizing",
          "WebkitBoxSizing",
          "webkitBoxSizing"
        ]
      },
      {
        "name": "-webkit-flex",
        "styleDeclaration": [
          "-webkit-flex",
          "WebkitFlex",
          "webkitFlex"
        ]
      },
      {
        "name": "-webkit-flex-basis",
        "styleDeclaration": [
          "-webkit-flex-basis",
          "WebkitFlexBasis",
          "webkitFlexBasis"
        ]
      },
      {
        "name": "-webkit-flex-direction",
        "styleDeclaration": [
          "-webkit-flex-direction",
          "WebkitFlexDirection",
          "webkitFlexDirection"
        ]
      },
      {
        "name": "-webkit-flex-flow",
        "styleDeclaration": [
          "-webkit-flex-flow",
          "WebkitFlexFlow",
          "webkitFlexFlow"
        ]
      },
      {
        "name": "-webkit-flex-grow",
        "styleDeclaration": [
          "-webkit-flex-grow",
          "WebkitFlexGrow",
          "webkitFlexGrow"
        ]
      },
      {
        "name": "-webkit-flex-shrink",
        "styleDeclaration": [
          "-webkit-flex-shrink",
          "WebkitFlexShrink",
          "webkitFlexShrink"
        ]
      },
      {
        "name": "-webkit-flex-wrap",
        "styleDeclaration": [
          "-webkit-flex-wrap",
          "WebkitFlexWrap",
          "webkitFlexWrap"
        ]
      },
      {
        "name": "-webkit-filter",
        "styleDeclaration": [
          "-webkit-filter",
          "WebkitFilter",
          "webkitFilter"
        ]
      },
      {
        "name": "-webkit-justify-content",
        "styleDeclaration": [
          "-webkit-justify-content",
          "WebkitJustifyContent",
          "webkitJustifyContent"
        ]
      },
      {
        "name": "-webkit-mask",
        "styleDeclaration": [
          "-webkit-mask",
          "WebkitMask",
          "webkitMask"
        ]
      },
      {
        "name": "-webkit-mask-box-image",
        "styleDeclaration": [
          "-webkit-mask-box-image",
          "WebkitMaskBoxImage",
          "webkitMaskBoxImage"
        ]
      },
      {
        "name": "-webkit-mask-box-image-outset",
        "styleDeclaration": [
          "-webkit-mask-box-image-outset",
          "WebkitMaskBoxImageOutset",
          "webkitMaskBoxImageOutset"
        ]
      },
      {
        "name": "-webkit-mask-box-image-repeat",
        "styleDeclaration": [
          "-webkit-mask-box-image-repeat",
          "WebkitMaskBoxImageRepeat",
          "webkitMaskBoxImageRepeat"
        ]
      },
      {
        "name": "-webkit-mask-box-image-slice",
        "styleDeclaration": [
          "-webkit-mask-box-image-slice",
          "WebkitMaskBoxImageSlice",
          "webkitMaskBoxImageSlice"
        ]
      },
      {
        "name": "-webkit-mask-box-image-source",
        "styleDeclaration": [
          "-webkit-mask-box-image-source",
          "WebkitMaskBoxImageSource",
          "webkitMaskBoxImageSource"
        ]
      },
      {
        "name": "-webkit-mask-box-image-width",
        "styleDeclaration": [
          "-webkit-mask-box-image-width",
          "WebkitMaskBoxImageWidth",
          "webkitMaskBoxImageWidth"
        ]
      },
      {
        "name": "-webkit-mask-clip",
        "styleDeclaration": [
          "-webkit-mask-clip",
          "WebkitMaskClip",
          "webkitMaskClip"
        ]
      },
      {
        "name": "-webkit-mask-composite",
        "styleDeclaration": [
          "-webkit-mask-composite",
          "WebkitMaskComposite",
          "webkitMaskComposite"
        ]
      },
      {
        "name": "-webkit-mask-image",
        "styleDeclaration": [
          "-webkit-mask-image",
          "WebkitMaskImage",
          "webkitMaskImage"
        ]
      },
      {
        "name": "-webkit-mask-origin",
        "styleDeclaration": [
          "-webkit-mask-origin",
          "WebkitMaskOrigin",
          "webkitMaskOrigin"
        ]
      },
      {
        "name": "-webkit-mask-position",
        "styleDeclaration": [
          "-webkit-mask-position",
          "WebkitMaskPosition",
          "webkitMaskPosition"
        ]
      },
      {
        "name": "-webkit-mask-repeat",
        "styleDeclaration": [
          "-webkit-mask-repeat",
          "WebkitMaskRepeat",
          "webkitMaskRepeat"
        ]
      },
      {
        "name": "-webkit-mask-size",
        "styleDeclaration": [
          "-webkit-mask-size",
          "WebkitMaskSize",
          "webkitMaskSize"
        ]
      },
      {
        "name": "-webkit-order",
        "styleDeclaration": [
          "-webkit-order",
          "WebkitOrder",
          "webkitOrder"
        ]
      },
      {
        "name": "-webkit-perspective",
        "styleDeclaration": [
          "-webkit-perspective",
          "WebkitPerspective",
          "webkitPerspective"
        ]
      },
      {
        "name": "-webkit-perspective-origin",
        "styleDeclaration": [
          "-webkit-perspective-origin",
          "WebkitPerspectiveOrigin",
          "webkitPerspectiveOrigin"
        ]
      },
      {
        "name": "-webkit-transform-origin",
        "styleDeclaration": [
          "-webkit-transform-origin",
          "WebkitTransformOrigin",
          "webkitTransformOrigin"
        ]
      },
      {
        "name": "-webkit-transform-style",
        "styleDeclaration": [
          "-webkit-transform-style",
          "WebkitTransformStyle",
          "webkitTransformStyle"
        ]
      },
      {
        "name": "-webkit-transform",
        "styleDeclaration": [
          "-webkit-transform",
          "WebkitTransform",
          "webkitTransform"
        ]
      },
      {
        "name": "-webkit-transition-delay",
        "styleDeclaration": [
          "-webkit-transition-delay",
          "WebkitTransitionDelay",
          "webkitTransitionDelay"
        ]
      },
      {
        "name": "-webkit-transition-duration",
        "styleDeclaration": [
          "-webkit-transition-duration",
          "WebkitTransitionDuration",
          "webkitTransitionDuration"
        ]
      },
      {
        "name": "-webkit-transition-property",
        "styleDeclaration": [
          "-webkit-transition-property",
          "WebkitTransitionProperty",
          "webkitTransitionProperty"
        ]
      },
      {
        "name": "-webkit-transition-timing-function",
        "styleDeclaration": [
          "-webkit-transition-timing-function",
          "WebkitTransitionTimingFunction",
          "webkitTransitionTimingFunction"
        ]
      },
      {
        "name": "-webkit-transition",
        "styleDeclaration": [
          "-webkit-transition",
          "WebkitTransition",
          "webkitTransition"
        ]
      },
      {
        "name": "-webkit-text-size-adjust",
        "styleDeclaration": [
          "-webkit-text-size-adjust",
          "WebkitTextSizeAdjust",
          "webkitTextSizeAdjust"
        ]
      },
      {
        "name": "-webkit-box-align",
        "styleDeclaration": [
          "-webkit-box-align",
          "WebkitBoxAlign",
          "webkitBoxAlign"
        ]
      },
      {
        "name": "-webkit-box-flex",
        "styleDeclaration": [
          "-webkit-box-flex",
          "WebkitBoxFlex",
          "webkitBoxFlex"
        ]
      },
      {
        "name": "-webkit-box-ordinal-group",
        "styleDeclaration": [
          "-webkit-box-ordinal-group",
          "WebkitBoxOrdinalGroup",
          "webkitBoxOrdinalGroup"
        ]
      },
      {
        "name": "-webkit-box-orient",
        "styleDeclaration": [
          "-webkit-box-orient",
          "WebkitBoxOrient",
          "webkitBoxOrient"
        ]
      },
      {
        "name": "-webkit-box-pack",
        "styleDeclaration": [
          "-webkit-box-pack",
          "WebkitBoxPack",
          "webkitBoxPack"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@-webkit-keyframes",
        "descriptors": []
      },
      {
        "name": "@media",
        "descriptors": [
          {
            "name": "-webkit-device-pixel-ratio",
            "for": "@media",
            "value": "<number>",
            "type": "range"
          },
          {
            "name": "-webkit-transform-3d",
            "for": "@media",
            "value": "<mq-boolean>",
            "type": "discrete"
          }
        ]
      }
    ],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "-webkit-box",
        "type": "value",
        "value": "-webkit-box",
        "for": "flex"
      },
      {
        "msg": "Dangling value",
        "name": "-webkit-flex",
        "type": "value",
        "value": "-webkit-flex",
        "for": "flex"
      },
      {
        "msg": "Dangling value",
        "name": "-webkit-inline-box",
        "type": "value",
        "value": "-webkit-inline-box",
        "for": "flex"
      },
      {
        "msg": "Dangling value",
        "name": "-webkit-inline-flex",
        "type": "value",
        "value": "-webkit-inline-flex",
        "for": "flex"
      }
    ]
  },
  "compositing": {
    "spec": {
      "title": "Compositing and Blending Level 2",
      "url": "https://drafts.fxtf.org/compositing-2/"
    },
    "properties": [
      {
        "name": "mix-blend-mode",
        "value": "<blend-mode> | plus-darker | plus-lighter",
        "initial": "normal",
        "appliesTo": "All elements. In SVG, it applies to container elements, graphics elements and graphics referencing elements. [SVG11]",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "styleDeclaration": [
          "mix-blend-mode",
          "mixBlendMode"
        ]
      },
      {
        "name": "isolation",
        "value": "<isolation-mode>",
        "initial": "auto",
        "appliesTo": "All elements. In SVG, it applies to container elements, graphics elements and graphics referencing elements. [SVG11]",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "styleDeclaration": [
          "isolation"
        ]
      },
      {
        "name": "background-blend-mode",
        "value": "<mix-blend-mode>#",
        "initial": "normal",
        "appliesTo": "All HTML elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "styleDeclaration": [
          "background-blend-mode",
          "backgroundBlendMode"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<blend-mode>",
        "type": "type",
        "value": "normal | multiply | screen | overlay | darken | lighten | color-dodge |color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity",
        "values": [
          {
            "name": "normal",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "multiply",
            "type": "value",
            "value": "multiply"
          },
          {
            "name": "screen",
            "type": "value",
            "value": "screen"
          },
          {
            "name": "overlay",
            "type": "value",
            "value": "overlay"
          },
          {
            "name": "darken",
            "type": "value",
            "value": "darken"
          },
          {
            "name": "lighten",
            "type": "value",
            "value": "lighten"
          },
          {
            "name": "color-dodge",
            "type": "value",
            "value": "color-dodge"
          },
          {
            "name": "color-burn",
            "type": "value",
            "value": "color-burn"
          },
          {
            "name": "hard-light",
            "type": "value",
            "value": "hard-light"
          },
          {
            "name": "soft-light",
            "type": "value",
            "value": "soft-light"
          },
          {
            "name": "difference",
            "type": "value",
            "value": "difference"
          },
          {
            "name": "exclusion",
            "type": "value",
            "value": "exclusion"
          },
          {
            "name": "hue",
            "type": "value",
            "value": "hue"
          },
          {
            "name": "saturation",
            "type": "value",
            "value": "saturation"
          },
          {
            "name": "color",
            "type": "value",
            "value": "color"
          },
          {
            "name": "luminosity",
            "type": "value",
            "value": "luminosity"
          }
        ]
      },
      {
        "name": "<isolation-mode>",
        "type": "type",
        "value": "auto | isolate"
      },
      {
        "name": "<composite-mode>",
        "type": "type",
        "value": "clear | copy | source-over | destination-over | source-in | destination-in | source-out | destination-out | source-atop | destination-atop | xor | lighter | plus-darker | plus-lighter"
      }
    ]
  },
  "css-align": {
    "spec": {
      "title": "CSS Box Alignment Module Level 3",
      "url": "https://drafts.csswg.org/css-align-3/"
    },
    "properties": [
      {
        "name": "align-content",
        "value": "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
        "initial": "normal",
        "appliesTo": "block containers, multicol containers, flex containers, and grid containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Aligns the contents of the box as a whole (as the alignment subject) within the box itself (as the alignment container): along the inline/row/main axis of the box (for justify-content) or the block/column/cross axis of the box (for align-content). Values other than normal are defined in § 4 Alignment Keywords, above.",
            "type": "value",
            "value": "normal"
          }
        ],
        "styleDeclaration": [
          "align-content",
          "alignContent"
        ]
      },
      {
        "name": "justify-content",
        "value": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
        "initial": "normal",
        "appliesTo": "multicol containers, flex containers, and grid containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "left",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "normal",
            "prose": "Aligns the contents of the box as a whole (as the alignment subject) within the box itself (as the alignment container): along the inline/row/main axis of the box (for justify-content) or the block/column/cross axis of the box (for align-content). Values other than normal are defined in § 4 Alignment Keywords, above.",
            "type": "value",
            "value": "normal"
          }
        ],
        "styleDeclaration": [
          "justify-content",
          "justifyContent"
        ]
      },
      {
        "name": "place-content",
        "value": "<'align-content'> <'justify-content'>?",
        "initial": "normal",
        "appliesTo": "block containers, flex containers, and grid containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "place-content",
          "placeContent"
        ]
      },
      {
        "name": "justify-self",
        "value": "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
        "initial": "auto",
        "appliesTo": "block-level boxes, absolutely-positioned boxes, and grid items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "left",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "auto",
            "prose": "Behaves as normal if the box has no parent, or when determining the actual position of an absolutely positioned box. It behaves as the computed justify-items value of the parent box (minus any legacy keywords) otherwise (including when determining the static position of an absolutely positioned box).",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "normal",
            "prose": "Represents the “default” alignment for the layout mode. Its behavior depends on the layout mode, as described below.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "stretch",
            "prose": "When the box’s computed width/height (as appropriate to the axis) is auto and neither of its margins (in the appropriate axis) are auto, sets the box’s used size to the length necessary to make its outer size as close to filling the alignment container as possible while still respecting the constraints imposed by min-height/min-width/max-height/max-width. Unless otherwise specified, this value falls back to flex-start generally, and to self-start or self-end if the box has also specified first baseline or last baseline baseline content-alignment (respectively) in the same axis.",
            "type": "value",
            "value": "stretch"
          }
        ],
        "styleDeclaration": [
          "justify-self",
          "justifySelf"
        ]
      },
      {
        "name": "align-self",
        "value": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
        "initial": "auto",
        "appliesTo": "flex items, grid items, and absolutely-positioned boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Behaves as normal if the box has no parent, or when determining the actual position of an absolutely positioned box. It behaves as the computed align-items value of the parent box (minus any legacy keywords) otherwise (including when determining the static position of an absolutely positioned box).",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "normal",
            "prose": "Represents the “default” alignment for the layout mode, as defined below.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "stretch",
            "prose": "As defined for justify-self in § 6.1 Inline-Axis (or Main-Axis) Alignment: the justify-self property.",
            "type": "value",
            "value": "stretch"
          }
        ],
        "styleDeclaration": [
          "align-self",
          "alignSelf"
        ]
      },
      {
        "name": "place-self",
        "value": "<'align-self'> <'justify-self'>?",
        "initial": "auto",
        "appliesTo": "block-level boxes, absolutely-positioned boxes, and grid items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "place-self",
          "placeSelf"
        ]
      },
      {
        "name": "justify-items",
        "value": "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
        "initial": "legacy",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s), except for legacy (see prose)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "left",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "legacy",
            "prose": "This keyword causes the value to effectively inherit into descendants. If the legacy keyword appears on its own (without an accompanying left, right, or center keyword): if the inherited value of justify-items includes the legacy keyword, this value computes to the inherited value; otherwise it computes to normal. When justify-self:auto references the value of justify-items, only the alignment keyword, not the legacy keyword, is referenced by it. It exists to implement the legacy alignment behavior of HTML’s <center> element and align attribute.",
            "type": "value",
            "value": "legacy"
          }
        ],
        "styleDeclaration": [
          "justify-items",
          "justifyItems"
        ]
      },
      {
        "name": "align-items",
        "value": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "align-items",
          "alignItems"
        ]
      },
      {
        "name": "place-items",
        "value": "<'align-items'> <'justify-items'>?",
        "initial": "see individual properties",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "place-items",
          "placeItems"
        ]
      },
      {
        "name": "row-gap",
        "value": "normal | <length-percentage [0,∞]>",
        "initial": "normal",
        "appliesTo": "multi-column containers, flex containers, grid containers",
        "inherited": "no",
        "percentages": "see § 8.3 Percentages In gap Properties",
        "computedValue": "specified keyword, else a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "The normal represents a used value of 1em on multi-column containers, and a used value of 0px in all other contexts.",
            "type": "value",
            "value": "normal"
          }
        ],
        "styleDeclaration": [
          "row-gap",
          "rowGap"
        ]
      },
      {
        "name": "column-gap",
        "value": "normal | <length-percentage [0,∞]>",
        "initial": "normal",
        "appliesTo": "multi-column containers, flex containers, grid containers",
        "inherited": "no",
        "percentages": "see § 8.3 Percentages In gap Properties",
        "computedValue": "specified keyword, else a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "The normal represents a used value of 1em on multi-column containers, and a used value of 0px in all other contexts.",
            "type": "value",
            "value": "normal"
          }
        ],
        "styleDeclaration": [
          "column-gap",
          "columnGap"
        ]
      },
      {
        "name": "gap",
        "value": "<'row-gap'> <'column-gap'>?",
        "initial": "see individual properties",
        "appliesTo": "multi-column containers, flex containers, grid containers",
        "inherited": "no",
        "percentages": "refer to corresponding dimension of the content area",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "The normal represents a used value of 1em on multi-column containers, and a used value of 0px in all other contexts.",
            "type": "value",
            "value": "normal"
          }
        ],
        "styleDeclaration": [
          "gap"
        ]
      },
      {
        "name": "grid-row-gap",
        "styleDeclaration": [
          "grid-row-gap",
          "gridRowGap"
        ]
      },
      {
        "name": "grid-column-gap",
        "styleDeclaration": [
          "grid-column-gap",
          "gridColumnGap"
        ]
      },
      {
        "name": "grid-gap",
        "styleDeclaration": [
          "grid-gap",
          "gridGap"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<self-position>",
        "type": "type",
        "value": "center | start | end | self-start | self-end | flex-start | flex-end",
        "values": [
          {
            "name": "center",
            "prose": "Centers the alignment subject within its alignment container.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "start",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s start edge in the appropriate axis.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s end edge in the appropriate axis.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "self-start",
            "prose": "Aligns the alignment subject to be flush with the edge of the alignment container corresponding to the alignment subject’s start side in the appropriate axis.",
            "type": "value",
            "value": "self-start"
          },
          {
            "name": "self-end",
            "prose": "Aligns the alignment subject to be flush with the edge of the alignment container corresponding to the alignment subject’s end side in the appropriate axis.",
            "type": "value",
            "value": "self-end"
          },
          {
            "name": "flex-start",
            "prose": "Only used in flex layout. [CSS-FLEXBOX-1] Aligns the alignment subject to be flush with the edge of the alignment container corresponding to the flex container’s main-start or cross-start side, as appropriate. When used outside of a flex formatting context, this value behaves as start. That is, on boxes that are not flex items (or pretending to be flex items, such as when determining the static position of an absolutely-positioned box that is a child of a flex container), this value behaves as start when used in the self-alignment properties, and on boxes that are not flex containers, this value behaves as start when used in the content-distribution properties.",
            "type": "value",
            "value": "flex-start"
          },
          {
            "name": "flex-end",
            "prose": "Only used in flex layout. Aligns the alignment subject to be flush with the edge of the alignment container corresponding to the flex container’s main-end or cross-end side, as appropriate. When used outside of a flex formatting context, this value behaves as end. That is, on boxes that are not flex items (or pretending to be flex items, such as when determining the static position of an absolutely-positioned box that is a child of a flex container), this value behaves as end when used in the self-alignment properties, and on boxes that are not flex containers, this value behaves as end when used in the content-distribution properties.",
            "type": "value",
            "value": "flex-end"
          }
        ]
      },
      {
        "name": "<content-position>",
        "type": "type",
        "value": "center | start | end | flex-start | flex-end",
        "values": [
          {
            "name": "center",
            "prose": "Centers the alignment subject within its alignment container.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "start",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s start edge in the appropriate axis.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Aligns the alignment subject to be flush with the alignment container’s end edge in the appropriate axis.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "flex-start",
            "prose": "Only used in flex layout. [CSS-FLEXBOX-1] Aligns the alignment subject to be flush with the edge of the alignment container corresponding to the flex container’s main-start or cross-start side, as appropriate. When used outside of a flex formatting context, this value behaves as start. That is, on boxes that are not flex items (or pretending to be flex items, such as when determining the static position of an absolutely-positioned box that is a child of a flex container), this value behaves as start when used in the self-alignment properties, and on boxes that are not flex containers, this value behaves as start when used in the content-distribution properties.",
            "type": "value",
            "value": "flex-start"
          },
          {
            "name": "flex-end",
            "prose": "Only used in flex layout. Aligns the alignment subject to be flush with the edge of the alignment container corresponding to the flex container’s main-end or cross-end side, as appropriate. When used outside of a flex formatting context, this value behaves as end. That is, on boxes that are not flex items (or pretending to be flex items, such as when determining the static position of an absolutely-positioned box that is a child of a flex container), this value behaves as end when used in the self-alignment properties, and on boxes that are not flex containers, this value behaves as end when used in the content-distribution properties.",
            "type": "value",
            "value": "flex-end"
          }
        ]
      },
      {
        "name": "<baseline-position>",
        "type": "type",
        "value": "[ first | last ]? && baseline",
        "values": [
          {
            "name": "baseline",
            "prose": "Computes to first baseline, defined below.",
            "type": "value",
            "value": "baseline"
          },
          {
            "name": "first baseline",
            "prose": "Specifies participation in first-baseline alignment: aligns the alignment baseline of the box’s first baseline set with the corresponding baseline of its baseline-sharing group. See § 9.3 Aligning Boxes by Baseline for more details. The fallback alignment for first baseline is safe self-start (for self-alignment) or safe start (for content-distribution).",
            "type": "value",
            "value": "first baseline"
          },
          {
            "name": "last baseline",
            "prose": "Specifies participation in last-baseline alignment: aligns the alignment baseline of the box’s last baseline set with the corresponding baseline of its baseline-sharing group.̣ See § 9.3 Aligning Boxes by Baseline for more details. The fallback alignment for last baseline is safe self-end (for self-alignment) or safe end (for content-distribution).",
            "type": "value",
            "value": "last baseline"
          }
        ]
      },
      {
        "name": "<content-distribution>",
        "type": "type",
        "value": "space-between | space-around | space-evenly | stretch",
        "values": [
          {
            "name": "space-between",
            "prose": "The alignment subjects are evenly distributed in the alignment container. The first alignment subject is placed flush with the start edge of the alignment container, the last alignment subject is placed flush with the end edge of the alignment container, and the remaining alignment subjects are distributed so that the spacing between any two adjacent alignment subjects is the same. The default fallback alignment for this value is flex-start. (For layout modes other than flex layout, flex-start is identical to start.)",
            "type": "value",
            "value": "space-between"
          },
          {
            "name": "space-around",
            "prose": "The alignment subjects are evenly distributed in the alignment container, with a half-size space on either end. The alignment subjects are distributed so that the spacing between any two adjacent alignment subjects is the same, and the spacing before the first and after the last alignment subject is half the size of the other spacing. The default fallback alignment for this value is safe center.",
            "type": "value",
            "value": "space-around"
          },
          {
            "name": "space-evenly",
            "prose": "The alignment subjects are evenly distributed in the alignment container, with a full-size space on either end. The alignment subjects are distributed so that the spacing between any two adjacent alignment subjects, before the first alignment subject, and after the last alignment subject is the same. The default fallback alignment for this value is safe center.",
            "type": "value",
            "value": "space-evenly"
          },
          {
            "name": "stretch",
            "prose": "If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container. The default fallback alignment for this value is flex-start. (For layout modes other than flex layout, flex-start is identical to start.)",
            "type": "value",
            "value": "stretch"
          }
        ]
      },
      {
        "name": "<overflow-position>",
        "type": "type",
        "value": "unsafe | safe",
        "values": [
          {
            "name": "safe",
            "prose": "If the size of the alignment subject overflows the alignment container, the alignment subject is instead aligned as if the alignment mode were start.",
            "type": "value",
            "value": "safe"
          },
          {
            "name": "unsafe",
            "prose": "Regardless of the relative sizes of the alignment subject and alignment container, the given alignment value is honored.",
            "type": "value",
            "value": "unsafe"
          }
        ]
      }
    ]
  },
  "css-anchor": {
    "spec": {
      "title": "CSS Anchor Positioning",
      "url": "https://drafts.csswg.org/css-anchor-1/"
    },
    "properties": [
      {
        "name": "anchor-scroll",
        "value": "none | default | <anchor-element>",
        "initial": "none",
        "appliesTo": "absolutely-positioned elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No effect.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "default",
            "prose": "Behaves as the value of anchor-default on the element.",
            "type": "value",
            "value": "default"
          },
          {
            "name": "<anchor-element>",
            "prose": "Selects a target anchor element the same as anchor(), which will be compensated for in positioning and fallback.",
            "type": "value",
            "value": "<anchor-element>"
          }
        ],
        "styleDeclaration": [
          "anchor-scroll",
          "anchorScroll"
        ]
      },
      {
        "name": "anchor-name",
        "value": "none | <dashed-ident>",
        "initial": "none",
        "appliesTo": "all elements that generate a principal box",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The property has no effect.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<dashed-ident>",
            "prose": "If the element generates a principal box, the element is an anchor element, with an anchor name equal to the <dashed-ident>. The anchor name is a tree-scoped name. Otherwise, the property has no effect.",
            "type": "value",
            "value": "<dashed-ident>"
          }
        ],
        "styleDeclaration": [
          "anchor-name",
          "anchorName"
        ]
      },
      {
        "name": "anchor-default",
        "value": "<anchor-element>",
        "initial": "implicit",
        "appliesTo": "absolutely positioned elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "anchor-default",
          "anchorDefault"
        ]
      },
      {
        "name": "position-fallback",
        "value": "none | <dashed-ident>",
        "initial": "none",
        "appliesTo": "absolutely-positioned elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The property has no effect; the element does not use a position fallback list.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<dashed-ident>",
            "prose": "If there is a @position-fallback rule with a name matching the specified ident, then the element uses that position fallback list. Otherwise, this value has no effect.",
            "type": "value",
            "value": "<dashed-ident>"
          }
        ],
        "styleDeclaration": [
          "position-fallback",
          "positionFallback"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@position-fallback",
        "prose": "The @position-fallback rule defines a position fallback list with a given name, specifying one or more sets of positioning properties inside of @try blocks that will be applied to an element, with each successive one serving as fallback if the previous would cause the element to partially or fully overflow its containing block.",
        "descriptors": [],
        "value": "@position-fallback <dashed-ident> { <rule-list> } @try { <declaration-list> }"
      },
      {
        "name": "@try",
        "prose": "The @position-fallback rule defines a position fallback list with a given name, specifying one or more sets of positioning properties inside of @try blocks that will be applied to an element, with each successive one serving as fallback if the previous would cause the element to partially or fully overflow its containing block.",
        "descriptors": []
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "anchor()",
        "prose": "An absolutely-positioned element can use the anchor() function as a value in its inset properties to refer to the position of one or more anchor elements. The anchor() function resolves to a <length>.",
        "type": "function",
        "value": "anchor( <anchor-element>? <anchor-side>, <length-percentage>? )",
        "values": [
          {
            "name": "<dashed-ident>",
            "prose": "Specifies the anchor name it will look for. This name is a tree-scoped reference.",
            "type": "value",
            "value": "<dashed-ident>"
          },
          {
            "name": "implicit",
            "prose": "Selects one of the implicit anchor elements defined for the element, if possible.",
            "type": "value",
            "value": "implicit"
          },
          {
            "name": "popover",
            "prose": "If the element has an implicit anchor element defined by the Popover API, uses that if possible.",
            "type": "value",
            "value": "popover"
          },
          {
            "name": "auto",
            "prose": "The auto and auto-same keywords indicate automatic anchor positioning. See § 2.1.1 Automatic Anchor Positioning for details.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "auto-same",
            "prose": "The auto and auto-same keywords indicate automatic anchor positioning. See § 2.1.1 Automatic Anchor Positioning for details.",
            "type": "value",
            "value": "auto-same"
          },
          {
            "name": "left",
            "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "top",
            "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "bottom",
            "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "start",
            "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
            "type": "value",
            "value": "end"
          },
          {
            "name": "self-start",
            "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
            "type": "value",
            "value": "self-start"
          },
          {
            "name": "self-end",
            "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
            "type": "value",
            "value": "self-end"
          },
          {
            "name": "center",
            "prose": "A <percentage> value refers to a position a corresponding percentage between the start and end sides, with 0% being equivalent to start and 100% being equivalent to end. The center keyword is equivalent to 50%.",
            "type": "value",
            "value": "center"
          }
        ]
      },
      {
        "name": "<anchor-element>",
        "type": "type",
        "value": "<dashed-ident> | implicit | popover"
      },
      {
        "name": "<anchor-side>",
        "type": "type",
        "value": "auto | auto-same | top | left | right | bottom | start | end | self-start | self-end | <percentage> | center"
      },
      {
        "name": "anchor-size()",
        "prose": "An absolutely-positioned element can use the anchor-size() function in its sizing properties to refer to the size of one or more anchor elements. The anchor-size() function resolves to a <length>.",
        "type": "function",
        "value": "anchor( <anchor-element>? <anchor-size>, <length-percentage>? )",
        "values": [
          {
            "name": "width",
            "prose": "The physical <anchor-size> keywords (width and height) refer to the width and height, respectively, of the target anchor element. Unlike anchor(), there is no restriction on having to match axises; for example, width: anchor-size(--foo height); is valid.",
            "type": "value",
            "value": "width"
          },
          {
            "name": "height",
            "prose": "The physical <anchor-size> keywords (width and height) refer to the width and height, respectively, of the target anchor element. Unlike anchor(), there is no restriction on having to match axises; for example, width: anchor-size(--foo height); is valid.",
            "type": "value",
            "value": "height"
          },
          {
            "name": "block",
            "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "self-block",
            "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
            "type": "value",
            "value": "self-block"
          },
          {
            "name": "self-inline",
            "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
            "type": "value",
            "value": "self-inline"
          }
        ]
      },
      {
        "name": "<anchor-size>",
        "type": "type",
        "value": "width | height | block | inline | self-block | self-inline"
      }
    ]
  },
  "css-animations-2": {
    "spec": {
      "title": "CSS Animations Level 2",
      "url": "https://drafts.csswg.org/css-animations-2/"
    },
    "properties": [
      {
        "name": "animation-composition",
        "value": "<single-animation-composition>#",
        "initial": "replace",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "animation-composition",
          "animationComposition"
        ]
      },
      {
        "name": "animation-timeline",
        "value": "<single-animation-timeline>#",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item either a case-sensitive css identifier or the keywords none, auto.",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "styleDeclaration": [
          "animation-timeline",
          "animationTimeline"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<single-animation-composition>",
        "value": "replace | add | accumulate",
        "type": "type"
      },
      {
        "name": "<single-animation-timeline>",
        "type": "type",
        "value": "auto | none | <custom-ident> | <scroll()> | <view()>",
        "values": [
          {
            "name": "auto",
            "prose": "The animation’s timeline is a DocumentTimeline, more specifically the default document timeline.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "The animation is not associated with a timeline.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<custom-ident>",
            "prose": "If a named scroll progress timeline or view progress timeline is in scope on this element, use the referenced timeline as defined in Scroll-linked Animations § 4 Named Timeline Scoping. Otherwise the animation is not associated with a timeline.",
            "type": "value",
            "value": "<custom-ident>"
          },
          {
            "name": "<scroll()>",
            "prose": "Use the scroll progress timeline indicated by the given scroll() function. See Scroll-linked Animations § 2.1.1 The scroll() notation.",
            "type": "value",
            "value": "<scroll()>"
          },
          {
            "name": "<view()>",
            "prose": "Use the view progress timeline indicated by the given view() function. See Scroll-linked Animations § 3.2.1 The view() notation.",
            "type": "value",
            "value": "<view()>"
          }
        ]
      },
      {
        "name": "<single-animation>",
        "value": "<time> || <easing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ] || <single-animation-timeline>",
        "type": "type"
      }
    ]
  },
  "css-animations": {
    "spec": {
      "title": "CSS Animations Level 1",
      "url": "https://drafts.csswg.org/css-animations-1/"
    },
    "properties": [
      {
        "name": "animation-name",
        "value": "[ none | <keyframes-name> ]#",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item either a case-sensitive css identifier or the keyword none",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "none",
            "prose": "No keyframes are specified at all, so there will be no animation. Any other animations properties specified for this animation have no effect.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<keyframes-name>",
            "prose": "The animation will use the keyframes with the name specified by the <keyframes-name>, if they exist. If no @keyframes rule with that name exists, there is no animation.",
            "type": "value",
            "value": "<keyframes-name>"
          }
        ],
        "styleDeclaration": [
          "animation-name",
          "animationName"
        ]
      },
      {
        "name": "animation-duration",
        "value": "<time [0s,∞]>#",
        "initial": "0s",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a duration",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "<time [0s,∞]>",
            "prose": "The <time> specifies the length of time that an animation takes to complete one cycle. A negative <time> is invalid. If the <time> is 0s, like the initial value, the keyframes of the animation have no effect, but the animation itself still occurs instantaneously. Specifically, start and end events are fired; if animation-fill-mode is set to backwards or both, the first frame of the animation, as defined by animation-direction, will be displayed during the animation-delay. After the animation-delay the last frame of the animation, as defined by animation-direction, will be displayed if animation-fill-mode is set to forwards or both. If animation-fill-mode is set to none the animation will have no visible effect.",
            "type": "value",
            "value": "<time [0s,∞]>"
          }
        ],
        "styleDeclaration": [
          "animation-duration",
          "animationDuration"
        ]
      },
      {
        "name": "animation-timing-function",
        "value": "<easing-function>#",
        "initial": "ease",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a computed <easing-function>",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "animation-timing-function",
          "animationTimingFunction"
        ]
      },
      {
        "name": "animation-iteration-count",
        "value": "<single-animation-iteration-count>#",
        "initial": "1",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item either a number or the keyword infinite",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "infinite",
            "prose": "The animation will repeat forever.",
            "type": "value",
            "value": "infinite"
          },
          {
            "name": "<number [0,∞]>",
            "prose": "The animation will repeat the specified number of times. If the number is not an integer, the animation will end partway through its last cycle. Negative numbers are invalid. A value of 0 is valid and, similar to an animation-duration of 0s, causes the animation to occur instantaneously.",
            "type": "value",
            "value": "<number [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "animation-iteration-count",
          "animationIterationCount"
        ]
      },
      {
        "name": "animation-direction",
        "value": "<single-animation-direction>#",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "normal",
            "prose": "All iterations of the animation are played as specified.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "reverse",
            "prose": "All iterations of the animation are played in the reverse direction from the way they were specified.",
            "type": "value",
            "value": "reverse"
          },
          {
            "name": "alternate",
            "prose": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
            "type": "value",
            "value": "alternate"
          },
          {
            "name": "alternate-reverse",
            "prose": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
            "type": "value",
            "value": "alternate-reverse"
          }
        ],
        "styleDeclaration": [
          "animation-direction",
          "animationDirection"
        ]
      },
      {
        "name": "animation-play-state",
        "value": "<single-animation-play-state>#",
        "initial": "running",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "running",
            "prose": "While this property is set to running, the animation proceeds as normal.",
            "type": "value",
            "value": "running"
          },
          {
            "name": "paused",
            "prose": "While this property is set to paused, the animation is paused. The animation continues to apply to the element with the progress it had made before being paused. When unpaused (set back to running), it restarts from where it left off, as if the \"clock\" that controls the animation had stopped and started again. If the property is set to paused during the delay phase of the animation, the delay clock is also paused and resumes as soon as animation-play-state is set back to running.",
            "type": "value",
            "value": "paused"
          }
        ],
        "styleDeclaration": [
          "animation-play-state",
          "animationPlayState"
        ]
      },
      {
        "name": "animation-delay",
        "value": "<time>#",
        "initial": "0s",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a duration",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "<time>",
            "prose": "The <time> defines how long of a delay there is between the start of the animation (when the animation is applied to the element via these properties) and when it begins executing. A delay of 0s (the initial value) means that the animation will execute as soon as it is applied. A negative delay is valid. Similar to a delay of 0s, it means that the animation executes immediately, but is automatically progressed by the absolute value of the delay, as if the animation had started the specified time in the past, and so it appears to start partway through its active duration. If an animation’s keyframes have an implied starting value, the values are taken from the time the animation starts, not some time in the past.",
            "type": "value",
            "value": "<time>"
          }
        ],
        "styleDeclaration": [
          "animation-delay",
          "animationDelay"
        ]
      },
      {
        "name": "animation-fill-mode",
        "value": "<single-animation-fill-mode>#",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "none",
            "prose": "The animation has no effect when it is applied but not executing.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "forwards",
            "prose": "After the animation ends (as determined by its animation-iteration-count), the animation will apply the property values for the time the animation ended. When animation-iteration-count is an integer greater than zero, the values applied will be those for the end of the last completed iteration of the animation (rather than the values for the start of the iteration that would be next). When animation-iteration-count is zero, the values applied will be those that would start the first iteration (just as when animation-fill-mode is backwards).",
            "type": "value",
            "value": "forwards"
          },
          {
            "name": "backwards",
            "prose": "During the period defined by animation-delay, the animation will apply the property values defined in the keyframe that will start the first iteration of the animation. These are either the values of the from keyframe (when animation-direction is normal or alternate) or those of the to keyframe (when animation-direction is reverse or alternate-reverse).",
            "type": "value",
            "value": "backwards"
          },
          {
            "name": "both",
            "prose": "The effects of both forwards and backwards fill apply.",
            "type": "value",
            "value": "both"
          }
        ],
        "styleDeclaration": [
          "animation-fill-mode",
          "animationFillMode"
        ]
      },
      {
        "name": "animation",
        "value": "<single-animation>#",
        "initial": "see individual properties",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "animation"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@keyframes",
        "prose": "Keyframes are specified using the @keyframes at-rule, defined as follows:",
        "descriptors": [],
        "value": "@keyframes <keyframes-name> { <rule-list> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<keyframes-name>",
        "type": "type",
        "value": "<custom-ident> | <string>"
      },
      {
        "name": "<keyframe-block>",
        "type": "type",
        "value": "<keyframe-selector># { <declaration-list> }"
      },
      {
        "name": "<keyframe-selector>",
        "type": "type",
        "value": "from | to | <percentage [0,100]>"
      },
      {
        "name": "<single-animation-iteration-count>",
        "value": "infinite | <number [0,∞]>",
        "type": "type"
      },
      {
        "name": "<single-animation-direction>",
        "value": "normal | reverse | alternate | alternate-reverse",
        "type": "type"
      },
      {
        "name": "<single-animation-play-state>",
        "value": "running | paused",
        "type": "type"
      },
      {
        "name": "<single-animation-fill-mode>",
        "value": "none | forwards | backwards | both",
        "type": "type"
      },
      {
        "name": "<single-animation>",
        "value": "<time> || <easing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ]",
        "type": "type"
      }
    ]
  },
  "css-backgrounds-4": {
    "spec": {
      "title": "CSS Backgrounds and Borders Module Level 4",
      "url": "https://drafts.csswg.org/css-backgrounds-4/"
    },
    "properties": [
      {
        "name": "background-position",
        "value": "<position>#",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "background-position",
          "backgroundPosition"
        ]
      },
      {
        "name": "background-position-x",
        "value": "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
        "initial": "0%",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to width of background positioning area minus width of background image",
        "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "styleDeclaration": [
          "background-position-x",
          "backgroundPositionX"
        ]
      },
      {
        "name": "background-position-y",
        "value": "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
        "initial": "0%",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to height of background positioning area minus height of background image",
        "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "styleDeclaration": [
          "background-position-y",
          "backgroundPositionY"
        ]
      },
      {
        "name": "background-position-inline",
        "value": "[ center | [ start | end ]? <length-percentage>? ]#",
        "initial": "0%",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to inline-size of background positioning area minus inline-size of background image",
        "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "styleDeclaration": [
          "background-position-inline",
          "backgroundPositionInline"
        ]
      },
      {
        "name": "background-position-block",
        "value": "[ center | [ start | end ]? <length-percentage>? ]#",
        "initial": "0%",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to size of background positioning area minus size of background image",
        "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "styleDeclaration": [
          "background-position-block",
          "backgroundPositionBlock"
        ]
      },
      {
        "name": "background-clip",
        "value": "<bg-clip>#",
        "initial": "border-box",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "styleDeclaration": [
          "background-clip",
          "backgroundClip"
        ]
      },
      {
        "name": "border-top-color",
        "value": "<color> | <image-1D>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the computed color and/or a one-dimensional image function",
        "canonicalOrder": "per grammar",
        "animationType": "see prose",
        "styleDeclaration": [
          "border-top-color",
          "borderTopColor"
        ]
      },
      {
        "name": "border-right-color",
        "value": "<color> | <image-1D>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the computed color and/or a one-dimensional image function",
        "canonicalOrder": "per grammar",
        "animationType": "see prose",
        "styleDeclaration": [
          "border-right-color",
          "borderRightColor"
        ]
      },
      {
        "name": "border-bottom-color",
        "value": "<color> | <image-1D>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the computed color and/or a one-dimensional image function",
        "canonicalOrder": "per grammar",
        "animationType": "see prose",
        "styleDeclaration": [
          "border-bottom-color",
          "borderBottomColor"
        ]
      },
      {
        "name": "border-left-color",
        "value": "<color> | <image-1D>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the computed color and/or a one-dimensional image function",
        "canonicalOrder": "per grammar",
        "animationType": "see prose",
        "styleDeclaration": [
          "border-left-color",
          "borderLeftColor"
        ]
      },
      {
        "name": "border-color",
        "value": "[ <color> | <image-1D> ]{1,4}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-color",
          "borderColor"
        ]
      },
      {
        "name": "border-radius",
        "value": "<length-percentage [0,∞]>{1,4} [ / <length-percentage [0,∞]>{1,4} ]?",
        "initial": "0",
        "appliesTo": "all elements, except table element when border-collapse is collapse",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "see individual properties",
        "styleDeclaration": [
          "border-radius",
          "borderRadius"
        ]
      },
      {
        "name": "corner-shape",
        "value": "[ round | angle ]{1,4}",
        "initial": "round",
        "appliesTo": "all elements, except table element when border-collapse is collapse",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "round",
            "prose": "Border radii define a convex elliptical curve at the corner.",
            "type": "value",
            "value": "round"
          },
          {
            "name": "angle",
            "prose": "Border radii define a diagonal slice at the corner.",
            "type": "value",
            "value": "angle"
          }
        ],
        "styleDeclaration": [
          "corner-shape",
          "cornerShape"
        ]
      },
      {
        "name": "corners",
        "value": "<'corner-shape'> || <'border-radius'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "corners"
        ]
      },
      {
        "name": "border-limit",
        "value": "all | [ sides | corners ] <length-percentage [0,∞]>? | [ top | right | bottom | left ] <length-percentage [0,∞]>",
        "initial": "round",
        "appliesTo": "all elements, except table element when border-collapse is collapse",
        "inherited": "no",
        "percentages": "relative to border-box",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "sides",
            "prose": "The sides are drawn up to but not including the corners (as defined by the border radii). A length or percentage is measured from the center of each side: 50% draws the middle 50% of the border; by default the entire side is drawn.",
            "type": "value",
            "value": "sides"
          },
          {
            "name": "corners",
            "prose": "The corners are drawn plus the specified distance into the sides if specified. A length is measured from the closest edge of the corner area. A percentage is measured from the absolute corner of the border box.",
            "type": "value",
            "value": "corners"
          },
          {
            "name": "left",
            "prose": "For the left and right (vertical) sides, draws the entire side and corner. For the top and bottom (horizontal) sides, draws the left/right portion, as specified. Distances are measured as for corners.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "For the left and right (vertical) sides, draws the entire side and corner. For the top and bottom (horizontal) sides, draws the left/right portion, as specified. Distances are measured as for corners.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "top",
            "prose": "For the top and bottom (horizontal) sides, draws the entire side and corner. For the left and right (vertical) sides, draws the top/bottom portion, as specified. Distances are measured as for corners.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "bottom",
            "prose": "For the top and bottom (horizontal) sides, draws the entire side and corner. For the left and right (vertical) sides, draws the top/bottom portion, as specified. Distances are measured as for corners.",
            "type": "value",
            "value": "bottom"
          }
        ],
        "styleDeclaration": [
          "border-limit",
          "borderLimit"
        ]
      },
      {
        "name": "border-clip",
        "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to length of border-edge side",
        "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-clip",
          "borderClip"
        ]
      },
      {
        "name": "border-clip-top",
        "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to length of border-edge side",
        "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-clip-top",
          "borderClipTop"
        ]
      },
      {
        "name": "border-clip-right",
        "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to length of border-edge side",
        "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-clip-right",
          "borderClipRight"
        ]
      },
      {
        "name": "border-clip-bottom",
        "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to length of border-edge side",
        "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-clip-bottom",
          "borderClipBottom"
        ]
      },
      {
        "name": "border-clip-left",
        "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to length of border-edge side",
        "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-clip-left",
          "borderClipLeft"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<bg-clip>",
        "type": "type",
        "value": "<box> | border | text",
        "values": [
          {
            "name": "<box>",
            "prose": "The background is painted within (clipped to) the specified box of the element.",
            "type": "value",
            "value": "<box>"
          },
          {
            "name": "text",
            "prose": "The background is painted within (clipped to) the intersection of the border box and the geometry of the text in the element and its in-flow and floated descendants.",
            "type": "value",
            "value": "text"
          },
          {
            "name": "border",
            "prose": "The background is clipped to the area painted by the border, taking border-width and border-style into account but ignoring any transparency introduced by border-color.",
            "type": "value",
            "value": "border"
          }
        ]
      }
    ]
  },
  "css-backgrounds": {
    "spec": {
      "title": "CSS Backgrounds and Borders Module Level 3",
      "url": "https://drafts.csswg.org/css-backgrounds-3/"
    },
    "properties": [
      {
        "name": "background-color",
        "value": "<color>",
        "initial": "transparent",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "background-color",
          "backgroundColor"
        ]
      },
      {
        "name": "background-image",
        "value": "<bg-image>#",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed <image>",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "A value of none counts as an image layer but draws nothing. An image that is empty (zero width or zero height), that fails to download, or that cannot be displayed (e.g., because it is not in a supported image format) likewise counts as a layer but draws nothing.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "background-image",
          "backgroundImage"
        ]
      },
      {
        "name": "background-repeat",
        "value": "<repeat-style>#",
        "initial": "repeat",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a pair of keywords, one per dimension",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "repeat-x",
            "prose": "Computes to repeat no-repeat.",
            "type": "value",
            "value": "repeat-x"
          },
          {
            "name": "repeat-y",
            "prose": "Computes to no-repeat repeat.",
            "type": "value",
            "value": "repeat-y"
          },
          {
            "name": "repeat",
            "prose": "The image is repeated in this direction as often as needed to cover the background painting area.",
            "type": "value",
            "value": "repeat"
          },
          {
            "name": "space",
            "prose": "The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area. If the background painting area is larger than the background positioning area, then the pattern repeats to fill the background painting area. The value of background-position for this direction is ignored, unless there is not enough space for two copies of the image in this direction, in which case only one image is placed and background-position determines its position in this direction.",
            "type": "value",
            "value": "space"
          },
          {
            "name": "round",
            "prose": "The image is repeated as often as will fit within the background positioning area. If it doesn’t fit a whole number of times, it is rescaled so that it does. See the formula under background-size. If the background painting area is larger than the background positioning area, then the pattern repeats to fill the background painting area.",
            "type": "value",
            "value": "round"
          },
          {
            "name": "no-repeat",
            "prose": "The image is placed once and not repeated in this direction.",
            "type": "value",
            "value": "no-repeat"
          }
        ],
        "styleDeclaration": [
          "background-repeat",
          "backgroundRepeat"
        ]
      },
      {
        "name": "background-attachment",
        "value": "<attachment>#",
        "initial": "scroll",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item the keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "fixed",
            "prose": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a fixed background is fixed with respect to the page box and therefore replicated on every page.",
            "type": "value",
            "value": "fixed"
          },
          {
            "name": "local",
            "prose": "The background is fixed with regard to the element’s contents: if the element has a scrolling mechanism, the background scrolls with the element’s contents, and the background painting area and background positioning area are relative to the scrollable area of the element rather than to the border framing them. Because the scrollable area does not include the border area, for scrollable elements the border-box value of background-clip may be treated the same as padding-box.",
            "type": "value",
            "value": "local"
          },
          {
            "name": "scroll",
            "prose": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element’s border.)",
            "type": "value",
            "value": "scroll"
          }
        ],
        "styleDeclaration": [
          "background-attachment",
          "backgroundAttachment"
        ]
      },
      {
        "name": "background-position",
        "value": "<bg-position>#",
        "initial": "0% 0%",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "refer to size of background positioning area minus size of background image; see text",
        "computedValue": "list, each item a pair of offsets (horizontal and vertical) from the top left origin each given as a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "values": [
          {
            "name": "<percentage>",
            "prose": "A percentage for the horizontal offset is relative to (width of background positioning area - width of background image). A percentage for the vertical offset is relative to (height of background positioning area - height of background image), where the size of the image is the size given by background-size. For example, with a value pair of 0% 0%, the upper left corner of the image is aligned with the upper left corner of, usually, the box’s padding edge. A value pair of 100% 100% places the lower right corner of the image in the lower right corner of the area. With a value pair of 75% 50%, the point 75% across and 50% down the image is to be placed at the point 75% across and 50% down the area. Diagram of the meaning of background-position: 75% 50%.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "<length>",
            "prose": "A length value gives a fixed length as the offset. For example, with a value pair of 2cm 1cm, the upper left corner of the image is placed 2cm to the right and 1cm below the upper left corner of the background positioning area.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "top",
            "prose": "Computes to 0% for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "right",
            "prose": "Computes to 100% for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "bottom",
            "prose": "Computes to 100% for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "left",
            "prose": "Computes to 0% for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "center",
            "prose": "Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.",
            "type": "value",
            "value": "center"
          }
        ],
        "styleDeclaration": [
          "background-position",
          "backgroundPosition"
        ]
      },
      {
        "name": "background-clip",
        "value": "<box>#",
        "initial": "border-box",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "values": [
          {
            "name": "border-box",
            "prose": "The background is painted within (clipped to) the border box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "padding-box",
            "prose": "The background is painted within (clipped to) the padding box.",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "content-box",
            "prose": "The background is painted within (clipped to) the content box.",
            "type": "value",
            "value": "content-box"
          }
        ],
        "styleDeclaration": [
          "background-clip",
          "backgroundClip"
        ]
      },
      {
        "name": "background-origin",
        "value": "<box>#",
        "initial": "padding-box",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "values": [
          {
            "name": "padding-box",
            "prose": "The position is relative to the padding box. (For single boxes 0 0 is the upper left corner of the padding edge, 100% 100% is the lower right corner.)",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "border-box",
            "prose": "The position is relative to the border box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "content-box",
            "prose": "The position is relative to the content box.",
            "type": "value",
            "value": "content-box"
          }
        ],
        "styleDeclaration": [
          "background-origin",
          "backgroundOrigin"
        ]
      },
      {
        "name": "background-size",
        "value": "<bg-size>#",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "see text",
        "computedValue": "list, each item a pair of sizes (one per axis) each represented as either a keyword or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "values": [
          {
            "name": "contain",
            "prose": "Scale the image, while preserving its natural aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "cover",
            "prose": "Scale the image, while preserving its natural aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.",
            "type": "value",
            "value": "cover"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "The first value gives the width of the corresponding image, the second value its height. If only one value is given the second is assumed to be auto. A percentage is relative to the background positioning area. An auto value for one dimension is resolved by using the image’s natural aspect ratio and the size of the other dimension, or failing that, using the image’s natural size, or failing that, treating it as 100%. If both values are auto then the natural width and/or height of the image should be used, if any, the missing dimension (if any) behaving as auto as described above. If the image has neither natural size, its size is determined as for contain. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "The first value gives the width of the corresponding image, the second value its height. If only one value is given the second is assumed to be auto. A percentage is relative to the background positioning area. An auto value for one dimension is resolved by using the image’s natural aspect ratio and the size of the other dimension, or failing that, using the image’s natural size, or failing that, treating it as 100%. If both values are auto then the natural width and/or height of the image should be used, if any, the missing dimension (if any) behaving as auto as described above. If the image has neither natural size, its size is determined as for contain. Negative values are invalid.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "background-size",
          "backgroundSize"
        ]
      },
      {
        "name": "background",
        "value": "[<bg-layer># ,]? <final-bg-layer>",
        "initial": "see individual properties",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "see individual properties",
        "styleDeclaration": [
          "background"
        ]
      },
      {
        "name": "border-top-color",
        "value": "<color>",
        "initial": "currentColor",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-top-color",
          "borderTopColor"
        ]
      },
      {
        "name": "border-right-color",
        "value": "<color>",
        "initial": "currentColor",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-right-color",
          "borderRightColor"
        ]
      },
      {
        "name": "border-bottom-color",
        "value": "<color>",
        "initial": "currentColor",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-bottom-color",
          "borderBottomColor"
        ]
      },
      {
        "name": "border-left-color",
        "value": "<color>",
        "initial": "currentColor",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-left-color",
          "borderLeftColor"
        ]
      },
      {
        "name": "border-color",
        "value": "<color>{1,4}",
        "initial": "(see individual properties)",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-color",
          "borderColor"
        ]
      },
      {
        "name": "border-top-style",
        "value": "<line-style>",
        "initial": "none",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-top-style",
          "borderTopStyle"
        ]
      },
      {
        "name": "border-right-style",
        "value": "<line-style>",
        "initial": "none",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-right-style",
          "borderRightStyle"
        ]
      },
      {
        "name": "border-bottom-style",
        "value": "<line-style>",
        "initial": "none",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-bottom-style",
          "borderBottomStyle"
        ]
      },
      {
        "name": "border-left-style",
        "value": "<line-style>",
        "initial": "none",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-left-style",
          "borderLeftStyle"
        ]
      },
      {
        "name": "border-style",
        "value": "<line-style>{1,4}",
        "initial": "(see individual properties)",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "see individual properties",
        "styleDeclaration": [
          "border-style",
          "borderStyle"
        ]
      },
      {
        "name": "border-top-width",
        "value": "<line-width>",
        "initial": "medium",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length; zero if the border style is none or hidden",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-top-width",
          "borderTopWidth"
        ]
      },
      {
        "name": "border-right-width",
        "value": "<line-width>",
        "initial": "medium",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length; zero if the border style is none or hidden",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-right-width",
          "borderRightWidth"
        ]
      },
      {
        "name": "border-bottom-width",
        "value": "<line-width>",
        "initial": "medium",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length; zero if the border style is none or hidden",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-bottom-width",
          "borderBottomWidth"
        ]
      },
      {
        "name": "border-left-width",
        "value": "<line-width>",
        "initial": "medium",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length; zero if the border style is none or hidden",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-left-width",
          "borderLeftWidth"
        ]
      },
      {
        "name": "border-width",
        "value": "<line-width>{1,4}",
        "initial": "(see individual properties)",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-width",
          "borderWidth"
        ]
      },
      {
        "name": "border-top",
        "value": "<line-width> || <line-style> || <color>",
        "initial": "See individual properties",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-top",
          "borderTop"
        ]
      },
      {
        "name": "border-right",
        "value": "<line-width> || <line-style> || <color>",
        "initial": "See individual properties",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-right",
          "borderRight"
        ]
      },
      {
        "name": "border-bottom",
        "value": "<line-width> || <line-style> || <color>",
        "initial": "See individual properties",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-bottom",
          "borderBottom"
        ]
      },
      {
        "name": "border-left",
        "value": "<line-width> || <line-style> || <color>",
        "initial": "See individual properties",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-left",
          "borderLeft"
        ]
      },
      {
        "name": "border",
        "value": "<line-width> || <line-style> || <color>",
        "initial": "See individual properties",
        "appliesTo": "all elements except ruby base containers and ruby annotation containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border"
        ]
      },
      {
        "name": "border-top-left-radius",
        "value": "<length-percentage [0,∞]>{1,2}",
        "initial": "0",
        "appliesTo": "all elements (but see prose)",
        "inherited": "no",
        "percentages": "Refer to corresponding dimension of the border box.",
        "computedValue": "pair of computed <length-percentage> values",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-top-left-radius",
          "borderTopLeftRadius"
        ]
      },
      {
        "name": "border-top-right-radius",
        "value": "<length-percentage [0,∞]>{1,2}",
        "initial": "0",
        "appliesTo": "all elements (but see prose)",
        "inherited": "no",
        "percentages": "Refer to corresponding dimension of the border box.",
        "computedValue": "pair of computed <length-percentage> values",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-top-right-radius",
          "borderTopRightRadius"
        ]
      },
      {
        "name": "border-bottom-right-radius",
        "value": "<length-percentage [0,∞]>{1,2}",
        "initial": "0",
        "appliesTo": "all elements (but see prose)",
        "inherited": "no",
        "percentages": "Refer to corresponding dimension of the border box.",
        "computedValue": "pair of computed <length-percentage> values",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-bottom-right-radius",
          "borderBottomRightRadius"
        ]
      },
      {
        "name": "border-bottom-left-radius",
        "value": "<length-percentage [0,∞]>{1,2}",
        "initial": "0",
        "appliesTo": "all elements (but see prose)",
        "inherited": "no",
        "percentages": "Refer to corresponding dimension of the border box.",
        "computedValue": "pair of computed <length-percentage> values",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "styleDeclaration": [
          "border-bottom-left-radius",
          "borderBottomLeftRadius"
        ]
      },
      {
        "name": "border-radius",
        "value": "<length-percentage [0,∞]>{1,4} [ / <length-percentage [0,∞]>{1,4} ]?",
        "initial": "see individual properties",
        "appliesTo": "all elements (but see prose)",
        "inherited": "no",
        "percentages": "Refer to corresponding dimension of the border box.",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "see individual properties",
        "styleDeclaration": [
          "border-radius",
          "borderRadius"
        ]
      },
      {
        "name": "border-image-source",
        "value": "none | <image>",
        "initial": "none",
        "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword none or the computed <image>",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-image-source",
          "borderImageSource"
        ]
      },
      {
        "name": "border-image-slice",
        "value": "[<number [0,∞]> | <percentage [0,∞]>]{1,4} && fill?",
        "initial": "100%",
        "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
        "inherited": "no",
        "percentages": "refer to size of the border image",
        "computedValue": "four values, each either a number or percentage; plus a fill keyword if specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "<percentage [0,∞]>",
            "prose": "Percentages are relative to the size of the image: the width of the image for the horizontal offsets, the height for vertical offsets.",
            "type": "value",
            "value": "<percentage [0,∞]>"
          },
          {
            "name": "<number [0,∞]>",
            "prose": "Numbers represent pixels in the image (if the image is a raster image) or vector coordinates (if the image is a vector image).",
            "type": "value",
            "value": "<number [0,∞]>"
          },
          {
            "name": "fill",
            "prose": "The fill keyword, if present, causes the middle part of the border-image to be preserved. (By default it is discarded, i.e., treated as empty.)",
            "type": "value",
            "value": "fill"
          }
        ],
        "styleDeclaration": [
          "border-image-slice",
          "borderImageSlice"
        ]
      },
      {
        "name": "border-image-width",
        "value": "[ <length-percentage [0,∞]> | <number [0,∞]> | auto ]{1,4}",
        "initial": "1",
        "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
        "inherited": "no",
        "percentages": "Relative to width/height of the border image area",
        "computedValue": "four values, each either a number, the keyword auto, or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Percentages refer to the size of the border image area: the width of the area for horizontal offsets, the height for vertical offsets.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "<number [0,∞]>",
            "prose": "Numbers represent multiples of the corresponding computed border-width.",
            "type": "value",
            "value": "<number [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "If auto is specified then the border image width is the natural width or height (whichever is applicable) of the corresponding image slice (see border-image-slice). If the image does not have the required natural dimension then the corresponding computed border-width is used instead.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "border-image-width",
          "borderImageWidth"
        ]
      },
      {
        "name": "border-image-outset",
        "value": "[ <length [0,∞]> | <number [0,∞]> ]{1,4}",
        "initial": "0",
        "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "four values, each a number or absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-image-outset",
          "borderImageOutset"
        ]
      },
      {
        "name": "border-image-repeat",
        "value": "[ stretch | repeat | round | space ]{1,2}",
        "initial": "stretch",
        "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "two keywords, one per axis",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "stretch",
            "prose": "The image is stretched to fill the area.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "repeat",
            "prose": "The image is tiled (repeated) to fill the area.",
            "type": "value",
            "value": "repeat"
          },
          {
            "name": "round",
            "prose": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
            "type": "value",
            "value": "round"
          },
          {
            "name": "space",
            "prose": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
            "type": "value",
            "value": "space"
          }
        ],
        "styleDeclaration": [
          "border-image-repeat",
          "borderImageRepeat"
        ]
      },
      {
        "name": "border-image",
        "value": "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
        "initial": "See individual properties",
        "appliesTo": "See individual properties",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "See individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "See individual properties",
        "styleDeclaration": [
          "border-image",
          "borderImage"
        ]
      },
      {
        "name": "box-shadow",
        "value": "none | <shadow>#",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "either the keyword none or a list, each item consisting of four absolute lengths plus a computed color and optionally also a inset keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value, treating none as a zero-item list and appending blank shadows (transparent 0 0 0 0) with a corresponding inset keyword as needed to match the longer list if the shorter list is otherwise compatible with the longer one",
        "values": [
          {
            "name": "none",
            "prose": "The box-shadow property attaches one or more drop-shadows to the box. The property accepts either the none value, which indicates no shadows, or a comma-separated list of shadows, ordered front to back.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<color>",
            "prose": "Specifies the color of the shadow. If the color is absent, it defaults to currentColor.",
            "type": "value",
            "value": "<color>"
          },
          {
            "name": "inset",
            "prose": "If present, the inset keyword changes the drop shadow from an outer box-shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner box-shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it).",
            "type": "value",
            "value": "inset"
          }
        ],
        "styleDeclaration": [
          "box-shadow",
          "boxShadow"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<bg-image>",
        "type": "type",
        "value": "<image> | none"
      },
      {
        "name": "<repeat-style>",
        "type": "type",
        "value": "repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}"
      },
      {
        "name": "<attachment>",
        "type": "type",
        "value": "scroll | fixed | local"
      },
      {
        "name": "<bg-position>",
        "type": "type",
        "value": "[ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] | [ center | [ left | right ] <length-percentage>? ] && [ center | [ top | bottom ] <length-percentage>? ]"
      },
      {
        "name": "<box>",
        "type": "type",
        "value": "border-box | padding-box | content-box"
      },
      {
        "name": "<bg-size>",
        "type": "type",
        "value": "[ <length-percentage [0,∞]> | auto ]{1,2} | cover | contain"
      },
      {
        "name": "<bg-layer>",
        "type": "type",
        "value": "<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>"
      },
      {
        "name": "<final-bg-layer>",
        "type": "type",
        "value": "<'background-color'> || <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>"
      },
      {
        "name": "<line-style>",
        "type": "type",
        "value": "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset",
        "values": [
          {
            "name": "none",
            "prose": "No border. Color and width are ignored (i.e., the border has width 0). Note this means that the initial value of border-image-width will also resolve to zero.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "hidden",
            "prose": "Same as none, but has different behavior in the border conflict resolution rules for border-collapsed tables [CSS2].",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "dotted",
            "prose": "A series of round dots.",
            "type": "value",
            "value": "dotted"
          },
          {
            "name": "dashed",
            "prose": "A series of square-ended dashes.",
            "type": "value",
            "value": "dashed"
          },
          {
            "name": "solid",
            "prose": "A single line segment.",
            "type": "value",
            "value": "solid"
          },
          {
            "name": "double",
            "prose": "Two parallel solid lines with some space between them. (The thickness of the lines is not specified, but the sum of the lines and the space must equal border-width.)",
            "type": "value",
            "value": "double"
          },
          {
            "name": "groove",
            "prose": "Looks as if it were carved in the canvas. (This is typically achieved by creating a “shadow” from two colors that are slightly lighter and darker than the border-color.)",
            "type": "value",
            "value": "groove"
          },
          {
            "name": "ridge",
            "prose": "Looks as if it were coming out of the canvas.",
            "type": "value",
            "value": "ridge"
          },
          {
            "name": "inset",
            "prose": "Looks as if the content on the inside of the border is sunken into the canvas. Treated as ridge in the collapsing border model. [CSS2]",
            "type": "value",
            "value": "inset"
          },
          {
            "name": "outset",
            "prose": "Looks as if the content on the inside of the border is coming out of the canvas. Treated as groove in the collapsing border model. [CSS2]",
            "type": "value",
            "value": "outset"
          }
        ]
      },
      {
        "name": "<line-width>",
        "type": "type",
        "value": "<length [0,∞]> | thin | medium | thick",
        "values": [
          {
            "name": "thin",
            "prose": "Negative values are invalid. The thin, medium, and thick keywords are equivalent to 1px, 3px, and 5px, respectively.",
            "type": "value",
            "value": "thin"
          },
          {
            "name": "medium",
            "prose": "Negative values are invalid. The thin, medium, and thick keywords are equivalent to 1px, 3px, and 5px, respectively.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "thick",
            "prose": "Negative values are invalid. The thin, medium, and thick keywords are equivalent to 1px, 3px, and 5px, respectively.",
            "type": "value",
            "value": "thick"
          }
        ]
      },
      {
        "name": "<shadow>",
        "type": "type",
        "value": "<color>? && [<length>{2} <length [0,∞]>? <length>?] && inset?"
      }
    ]
  },
  "css-box": {
    "spec": {
      "title": "CSS Box Model Module Level 4",
      "url": "https://drafts.csswg.org/css-box-4/"
    },
    "properties": [
      {
        "name": "margin-top",
        "value": "<length-percentage> | auto",
        "initial": "0",
        "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-top",
          "marginTop"
        ]
      },
      {
        "name": "margin-right",
        "value": "<length-percentage> | auto",
        "initial": "0",
        "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-right",
          "marginRight"
        ]
      },
      {
        "name": "margin-bottom",
        "value": "<length-percentage> | auto",
        "initial": "0",
        "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-bottom",
          "marginBottom"
        ]
      },
      {
        "name": "margin-left",
        "value": "<length-percentage> | auto",
        "initial": "0",
        "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-left",
          "marginLeft"
        ]
      },
      {
        "name": "margin",
        "value": "<'margin-top'>{1,4}",
        "initial": "0",
        "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin"
        ]
      },
      {
        "name": "margin-trim",
        "value": "none | block | inline | [ block-start || inline-start || block-end || inline-end ]",
        "initial": "none",
        "appliesTo": "block containers, multi-column containers, flex containers, grid containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "a set of zero to four keywords indicating which sides to trim",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Margins are not trimmed by the container.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "block-start",
            "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any margins collapsed with such a margin.",
            "type": "value",
            "value": "block-start"
          },
          {
            "name": "inline-start",
            "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any margins collapsed with such a margin.",
            "type": "value",
            "value": "inline-start"
          },
          {
            "name": "inline-end",
            "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any margins collapsed with such a margin.",
            "type": "value",
            "value": "inline-end"
          },
          {
            "name": "block-end",
            "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any margins collapsed with such a margin.",
            "type": "value",
            "value": "block-end"
          },
          {
            "name": "block",
            "prose": "Computes to block-start block-end.",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "Computes to inline-start inline-end.",
            "type": "value",
            "value": "inline"
          }
        ],
        "styleDeclaration": [
          "margin-trim",
          "marginTrim"
        ]
      },
      {
        "name": "padding-top",
        "value": "<length-percentage [0,∞]>",
        "initial": "0",
        "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-top",
          "paddingTop"
        ]
      },
      {
        "name": "padding-right",
        "value": "<length-percentage [0,∞]>",
        "initial": "0",
        "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-right",
          "paddingRight"
        ]
      },
      {
        "name": "padding-bottom",
        "value": "<length-percentage [0,∞]>",
        "initial": "0",
        "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-bottom",
          "paddingBottom"
        ]
      },
      {
        "name": "padding-left",
        "value": "<length-percentage [0,∞]>",
        "initial": "0",
        "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-left",
          "paddingLeft"
        ]
      },
      {
        "name": "padding",
        "value": "<'padding-top'>{1,4}",
        "initial": "0",
        "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
        "inherited": "no",
        "percentages": "refer to logical width of containing block",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<visual-box>",
        "type": "type",
        "value": "content-box | padding-box | border-box"
      },
      {
        "name": "<layout-box>",
        "type": "type",
        "value": "content-box | padding-box | border-box | margin-box"
      },
      {
        "name": "<paint-box>",
        "type": "type",
        "value": "content-box | padding-box | border-box | fill-box | stroke-box"
      },
      {
        "name": "<coord-box>",
        "type": "type",
        "value": "content-box | padding-box | border-box | fill-box | stroke-box | view-box"
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "content-box",
        "prose": "Refers to the content box or content edge. (In an SVG context, treated as fill-box.)",
        "type": "value",
        "value": "content-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "content-box",
        "prose": "Refers to the content box or content edge. (In an SVG context, treated as fill-box.)",
        "type": "value",
        "value": "content-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "content-box",
        "prose": "Refers to the content box or content edge. (In an SVG context, treated as fill-box.)",
        "type": "value",
        "value": "content-box",
        "for": "<geometry-box>"
      },
      {
        "msg": "Dangling value",
        "name": "padding-box",
        "prose": "Refers to the padding box or padding edge. (In an SVG context, treated as fill-box.)",
        "type": "value",
        "value": "padding-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "padding-box",
        "prose": "Refers to the padding box or padding edge. (In an SVG context, treated as fill-box.)",
        "type": "value",
        "value": "padding-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "padding-box",
        "prose": "Refers to the padding box or padding edge. (In an SVG context, treated as fill-box.)",
        "type": "value",
        "value": "padding-box",
        "for": "<geometry-box>"
      },
      {
        "msg": "Dangling value",
        "name": "border-box",
        "prose": "Refers to the border box or border edge. (In an SVG context, treated as stroke-box.)",
        "type": "value",
        "value": "border-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "border-box",
        "prose": "Refers to the border box or border edge. (In an SVG context, treated as stroke-box.)",
        "type": "value",
        "value": "border-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "border-box",
        "prose": "Refers to the border box or border edge. (In an SVG context, treated as stroke-box.)",
        "type": "value",
        "value": "border-box",
        "for": "<geometry-box>"
      },
      {
        "msg": "Dangling value",
        "name": "margin-box",
        "prose": "Refers to the margin box or margin edge. (In an SVG context, treated as stroke-box.)",
        "type": "value",
        "value": "margin-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "margin-box",
        "prose": "Refers to the margin box or margin edge. (In an SVG context, treated as stroke-box.)",
        "type": "value",
        "value": "margin-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "margin-box",
        "prose": "Refers to the margin box or margin edge. (In an SVG context, treated as stroke-box.)",
        "type": "value",
        "value": "margin-box",
        "for": "<geometry-box>"
      },
      {
        "msg": "Dangling value",
        "name": "fill-box",
        "prose": "Refers to the object bounding box or its edges. (In a CSS box context, treated as content-box.)",
        "type": "value",
        "value": "fill-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "fill-box",
        "prose": "Refers to the object bounding box or its edges. (In a CSS box context, treated as content-box.)",
        "type": "value",
        "value": "fill-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "fill-box",
        "prose": "Refers to the object bounding box or its edges. (In a CSS box context, treated as content-box.)",
        "type": "value",
        "value": "fill-box",
        "for": "<geometry-box>"
      },
      {
        "msg": "Dangling value",
        "name": "stroke-box",
        "prose": "Refers to the stroke bounding box or its edges. (In a CSS box context, treated as border-box.)",
        "type": "value",
        "value": "stroke-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "stroke-box",
        "prose": "Refers to the stroke bounding box or its edges. (In a CSS box context, treated as border-box.)",
        "type": "value",
        "value": "stroke-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "stroke-box",
        "prose": "Refers to the stroke bounding box or its edges. (In a CSS box context, treated as border-box.)",
        "type": "value",
        "value": "stroke-box",
        "for": "<geometry-box>"
      },
      {
        "msg": "Dangling value",
        "name": "view-box",
        "prose": "Refers to the nearest SVG viewport’s origin box, which is a rectangle with the width and height of the SVG viewport, positioned such that its top left corner is anchored at the coordinate system origin. (In a CSS box context, treated as border-box.)",
        "type": "value",
        "value": "view-box",
        "for": "<box>"
      },
      {
        "msg": "Dangling value",
        "name": "view-box",
        "prose": "Refers to the nearest SVG viewport’s origin box, which is a rectangle with the width and height of the SVG viewport, positioned such that its top left corner is anchored at the coordinate system origin. (In a CSS box context, treated as border-box.)",
        "type": "value",
        "value": "view-box",
        "for": "<shape-box>"
      },
      {
        "msg": "Dangling value",
        "name": "view-box",
        "prose": "Refers to the nearest SVG viewport’s origin box, which is a rectangle with the width and height of the SVG viewport, positioned such that its top left corner is anchored at the coordinate system origin. (In a CSS box context, treated as border-box.)",
        "type": "value",
        "value": "view-box",
        "for": "<geometry-box>"
      }
    ]
  },
  "css-break": {
    "spec": {
      "title": "CSS Fragmentation Module Level 4",
      "url": "https://drafts.csswg.org/css-break-4/"
    },
    "properties": [
      {
        "name": "break-before",
        "value": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
        "initial": "auto",
        "appliesTo": "block-level boxes, grid items, flex items, table row groups, table rows (but see prose)",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Neither force nor forbid a break before/after the principal box.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "avoid",
            "prose": "Avoid a break before/after the principal box.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "always",
            "prose": "Always force a break before/after the principal box. The type of this break is that of the immediately-containing fragmentation context. For example, in a multi-column container forces a column break; in paged media not inside a multi-column container, forces a page break.",
            "type": "value",
            "value": "always"
          },
          {
            "name": "all",
            "prose": "Always force a break before/after the principal box. This value breaks through all containing fragmentation contexts. For example, inside a multi-column container in a region in a multi-column container in paged media, it forces simultaneously a column break in the inner multi-column container, a region break, a column break in the outer multi-column container, and a page break. It’s unclear if this value is needed.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "avoid-page",
            "prose": "Avoid a page break before/after the principal box.",
            "type": "value",
            "value": "avoid-page"
          },
          {
            "name": "page",
            "prose": "Always force a page break before/after the principal box.",
            "type": "value",
            "value": "page"
          },
          {
            "name": "left",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a left page.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a right page.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "recto",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is second (according to the page progression) in a page spread.",
            "type": "value",
            "value": "recto"
          },
          {
            "name": "verso",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is first (according to the page progression) in a page spread.",
            "type": "value",
            "value": "verso"
          },
          {
            "name": "avoid-column",
            "prose": "Avoid a column break before/after the principal box.",
            "type": "value",
            "value": "avoid-column"
          },
          {
            "name": "column",
            "prose": "Always force a column break before/after the principal box.",
            "type": "value",
            "value": "column"
          },
          {
            "name": "avoid-region",
            "prose": "Avoid a region break before/after the principal box.",
            "type": "value",
            "value": "avoid-region"
          },
          {
            "name": "region",
            "prose": "Always force a region break before/after the principal box.",
            "type": "value",
            "value": "region"
          }
        ],
        "styleDeclaration": [
          "break-before",
          "breakBefore"
        ]
      },
      {
        "name": "break-after",
        "value": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
        "initial": "auto",
        "appliesTo": "block-level boxes, grid items, flex items, table row groups, table rows (but see prose)",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Neither force nor forbid a break before/after the principal box.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "avoid",
            "prose": "Avoid a break before/after the principal box.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "always",
            "prose": "Always force a break before/after the principal box. The type of this break is that of the immediately-containing fragmentation context. For example, in a multi-column container forces a column break; in paged media not inside a multi-column container, forces a page break.",
            "type": "value",
            "value": "always"
          },
          {
            "name": "all",
            "prose": "Always force a break before/after the principal box. This value breaks through all containing fragmentation contexts. For example, inside a multi-column container in a region in a multi-column container in paged media, it forces simultaneously a column break in the inner multi-column container, a region break, a column break in the outer multi-column container, and a page break. It’s unclear if this value is needed.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "avoid-page",
            "prose": "Avoid a page break before/after the principal box.",
            "type": "value",
            "value": "avoid-page"
          },
          {
            "name": "page",
            "prose": "Always force a page break before/after the principal box.",
            "type": "value",
            "value": "page"
          },
          {
            "name": "left",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a left page.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a right page.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "recto",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is second (according to the page progression) in a page spread.",
            "type": "value",
            "value": "recto"
          },
          {
            "name": "verso",
            "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is first (according to the page progression) in a page spread.",
            "type": "value",
            "value": "verso"
          },
          {
            "name": "avoid-column",
            "prose": "Avoid a column break before/after the principal box.",
            "type": "value",
            "value": "avoid-column"
          },
          {
            "name": "column",
            "prose": "Always force a column break before/after the principal box.",
            "type": "value",
            "value": "column"
          },
          {
            "name": "avoid-region",
            "prose": "Avoid a region break before/after the principal box.",
            "type": "value",
            "value": "avoid-region"
          },
          {
            "name": "region",
            "prose": "Always force a region break before/after the principal box.",
            "type": "value",
            "value": "region"
          }
        ],
        "styleDeclaration": [
          "break-after",
          "breakAfter"
        ]
      },
      {
        "name": "break-inside",
        "value": "auto | avoid | avoid-page | avoid-column | avoid-region",
        "initial": "auto",
        "appliesTo": "all elements except inline-level boxes, internal ruby boxes, table column boxes, table column group boxes, absolutely-positioned boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Impose no additional breaking constraints within the box.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "avoid",
            "prose": "Avoid breaks within the box.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "avoid-page",
            "prose": "Avoid a page break within the box.",
            "type": "value",
            "value": "avoid-page"
          },
          {
            "name": "avoid-column",
            "prose": "Avoid a column break within the box.",
            "type": "value",
            "value": "avoid-column"
          },
          {
            "name": "avoid-region",
            "prose": "Avoid a region break within the box.",
            "type": "value",
            "value": "avoid-region"
          }
        ],
        "styleDeclaration": [
          "break-inside",
          "breakInside"
        ]
      },
      {
        "name": "orphans",
        "value": "<integer [1,∞]>",
        "initial": "2",
        "appliesTo": "block containers that establish an inline formatting context",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "orphans"
        ]
      },
      {
        "name": "widows",
        "value": "<integer [1,∞]>",
        "initial": "2",
        "appliesTo": "block containers that establish an inline formatting context",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "widows"
        ]
      },
      {
        "name": "margin-break",
        "value": "auto | keep | discard",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "When an unforced break occurs before or after the box, any margins adjoining the break truncate to the remaining fragmentainer extent before the break, and are truncated to zero after the break. When a forced break occurs there, adjoining margins before the break are truncated, but margins after the break are preserved. Cloned margins are always truncated to zero.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "keep",
            "prose": "Margins adjoining a fragmentation break are not truncated.",
            "type": "value",
            "value": "keep"
          },
          {
            "name": "discard",
            "prose": "Margins adjoining a fragmentation break are always truncated, including at the start and end of a fragmentation context.",
            "type": "value",
            "value": "discard"
          }
        ],
        "styleDeclaration": [
          "margin-break",
          "marginBreak"
        ]
      },
      {
        "name": "box-decoration-break",
        "value": "slice | clone",
        "initial": "slice",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "clone",
            "prose": "Each box fragment is independently wrapped with the border, padding, and margin. The border-radius and border-image and box-shadow, if any, are applied to each fragment independently. The background is drawn independently in each fragment of the element. A no-repeat background image will thus be rendered once in each fragment of the element.",
            "type": "value",
            "value": "clone"
          },
          {
            "name": "slice",
            "prose": "The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward: no border and no padding are inserted at a break; no box-shadow is drawn at a broken edge; and backgrounds, border-radius, and the border-image are applied to the geometry of the whole box as if it were unbroken.",
            "type": "value",
            "value": "slice"
          }
        ],
        "styleDeclaration": [
          "box-decoration-break",
          "boxDecorationBreak"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "auto",
        "prose": "Impose no additional breaking constraints within the box.",
        "type": "value",
        "value": "auto",
        "for": "page-break-inside"
      },
      {
        "msg": "Dangling value",
        "name": "avoid",
        "prose": "Avoid breaks within the box.",
        "type": "value",
        "value": "avoid",
        "for": "page-break-inside"
      },
      {
        "msg": "Dangling value",
        "name": "avoid-page",
        "prose": "Avoid a page break within the box.",
        "type": "value",
        "value": "avoid-page",
        "for": "page-break-inside"
      },
      {
        "msg": "Dangling value",
        "name": "avoid-column",
        "prose": "Avoid a column break within the box.",
        "type": "value",
        "value": "avoid-column",
        "for": "page-break-inside"
      },
      {
        "msg": "Dangling value",
        "name": "avoid-region",
        "prose": "Avoid a region break within the box.",
        "type": "value",
        "value": "avoid-region",
        "for": "page-break-inside"
      }
    ]
  },
  "css-cascade-6": {
    "spec": {
      "title": "CSS Cascading and Inheritance Level 6",
      "url": "https://drafts.csswg.org/css-cascade-6/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@scope",
        "prose": "The @scope block at-rule allows authors to scope style rules in CSS, with the application of weak scoping proximity between the scoping root and the subject of each style rule.",
        "descriptors": [],
        "value": "@scope (<scope-start>) [to (<scope-end>)]? { <stylesheet> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<scope-start>",
        "prose": "The <scope-start> is a <forgiving-selector-list>. Each element matched by <scope-start> is a scoping element, creating a scope with itself as the scoping root.",
        "type": "type"
      },
      {
        "name": "<scope-end>",
        "prose": "The <scope-end> is a <forgiving-selector-list> that is scoped by the <scope-start> selector, with the scoping roots as :scope elements. Each element matched by <scope-end> is a scoping limit. The scoping limit elements define the lower bounds of a scope, so that scoped selectors are not able to match any scoping limit elements, or any elements nested within them.",
        "type": "type"
      },
      {
        "name": "<selector-scope>",
        "type": "type",
        "value": "( <scope-start> [/ <scope-end>]? )"
      }
    ]
  },
  "css-cascade": {
    "spec": {
      "title": "CSS Cascading and Inheritance Level 5",
      "url": "https://drafts.csswg.org/css-cascade-5/"
    },
    "properties": [
      {
        "name": "all",
        "value": "initial | inherit | unset | revert | revert-layer",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "initial",
            "prose": "The initial CSS-wide keyword represents the value defined as the property’s initial value.",
            "type": "value",
            "value": "initial"
          },
          {
            "name": "inherit",
            "prose": "The inherit CSS-wide keyword represents the property’s computed value on the parent element.",
            "type": "value",
            "value": "inherit"
          },
          {
            "name": "unset",
            "prose": "The unset CSS-wide keyword acts as either inherit or initial, depending on whether the property is inherited or not.",
            "type": "value",
            "value": "unset"
          },
          {
            "name": "revert-layer",
            "prose": "The revert-layer CSS-wide keyword rolls back the cascade similar to revert, except it works by cascade layer rather than by cascade origin.",
            "type": "value",
            "value": "revert-layer"
          }
        ],
        "styleDeclaration": [
          "all"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@import",
        "prose": "The @import rule allows users to import style rules from other style sheets. If an @import rule refers to a valid stylesheet, user agents must treat the contents of the stylesheet as if they were written in place of the @import rule, with two exceptions:",
        "descriptors": [],
        "value": "@import [ <url> | <string> ] [ layer | layer(<layer-name>) ]? <import-conditions> ;"
      },
      {
        "name": "@layer",
        "prose": "The @layer rule declares a cascade layer, with the option to assign style rules.",
        "descriptors": [],
        "value": "@layer <layer-name>? { <stylesheet> } | @layer <layer-name>#;"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<import-conditions>",
        "type": "type",
        "value": "[ supports( [ <supports-condition> | <declaration> ] ) ]? <media-query-list>?"
      },
      {
        "name": "<layer-name>",
        "type": "type",
        "value": "<ident> [ '.' <ident> ]*"
      }
    ]
  },
  "css-color-5": {
    "spec": {
      "title": "CSS Color Module Level 5",
      "url": "https://drafts.csswg.org/css-color-5/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@color-profile",
        "prose": "The @color-profile rule defines and names a color profile which can later be used in the color() function to specify a color.",
        "descriptors": [
          {
            "name": "src",
            "for": "@color-profile",
            "value": "<url>",
            "initial": "n/a"
          },
          {
            "name": "rendering-intent",
            "for": "@color-profile",
            "value": "relative-colorimetric | absolute-colorimetric | perceptual | saturation",
            "initial": "relative-colorimetric",
            "values": [
              {
                "name": "relative-colorimetric",
                "prose": "Media-relative colorimetric is required to leave source colors that fall inside the destination medium gamut unchanged relative to the respective media white points. Source colors that are out of the destination medium gamut are mapped to colors on the gamut boundary using a variety of different methods. The media-relative colorimetric rendering intent is often used with black point compensation, where the source medium black point is mapped to the destination medium black point as well. This method must map the source white point to the destination white point. If black point compensation is in use, the source black point must also be mapped to the destination black point. Adaptation algorithms should be used to adjust for the change in white point. Relative relationships of colors inside both source and destination gamuts should be preserved. Relative relationships of colors outside the destination gamut may be changed.",
                "type": "value",
                "value": "relative-colorimetric"
              },
              {
                "name": "absolute-colorimetric",
                "prose": "ICC-absolute colorimetric is required to leave source colors that fall inside the destination medium gamut unchanged relative to the adopted white (a perfect reflecting diffuser). Source colors that are out of the destination medium gamut are mapped to colors on the gamut boundary using a variety of different methods. This method produces the most accurate color matching of in-gamut colors, but will result in highlight clipping if the destination medium white point is lower than the source medium white point. For this reason it is recommended for use only in applications that need exact color matching and where highlight clipping is not a concern. This method MUST disable white point matching and black point matching when converting colors. In general, this option is not recommended except for testing purposes.",
                "type": "value",
                "value": "absolute-colorimetric"
              },
              {
                "name": "perceptual",
                "prose": "This method is often the preferred choice for images, especially when there are substantial differences between the source and destination (such as a screen display image reproduced on a reflection print). It takes the colors of the source image and re-optimizes the appearance for the destination medium using proprietary methods. This re-optimization may result in colors within both the source and destination gamuts being changed, although perceptual transforms are supposed to maintain the basic artistic intent of the original in the reproduction. They will not attempt to correct errors in the source image. This method should maintain relative color values among the pixels as they are mapped to the target device gamut. This method may change pixel values that were originally within the target device gamut, in order to avoid hue shifts and discontinuities and to preserve as much as possible the overall appearance of the scene.",
                "type": "value",
                "value": "perceptual"
              },
              {
                "name": "saturation",
                "prose": "This option was created to preserve the relative saturation (chroma) of the original, and to keep solid colors pure. However, it experienced interoperability problems like the perceptual intent, and as solid color preservation is not amenable to a reference medium solution using v4 profiles does not solve the problem. Use of this rendering intent is not recommended unless the specific source and destination profiles to be used have been checked to ensure the combination produces the desired result. This option should preserve the relative saturation (chroma) values of the original pixels. Out of gamut colors should be converted to colors that have the same saturation but fall just inside the gamut.",
                "type": "value",
                "value": "saturation"
              }
            ]
          },
          {
            "name": "components",
            "for": "@color-profile",
            "value": "<ident>#",
            "initial": "n/a"
          }
        ],
        "value": "@color-profile [<dashed-ident> | device-cmyk] { <declaration-list> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "color-mix()",
        "type": "function",
        "value": "color-mix( <color-interpolation-method> , [ <color> && <percentage [0,100]>? ]#{2})"
      },
      {
        "name": "rgb()",
        "type": "function",
        "value": "rgb( [<percentage> | none]{3} [ / [<alpha-value> | none] ]? ) | rgb( [<number> | none]{3} [ / [<alpha-value> | none] ]? ) | rgb( [ from <color> ]? [ <number> | <percentage> | none]{3} [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "r",
            "prose": "r, g, and b are all <number>s that correspond to the origin color’s red, green, and blue channels after its conversion to sRGB. 255.0 is equivalent to 100%.",
            "type": "value",
            "value": "r"
          },
          {
            "name": "g",
            "prose": "r, g, and b are all <number>s that correspond to the origin color’s red, green, and blue channels after its conversion to sRGB. 255.0 is equivalent to 100%.",
            "type": "value",
            "value": "g"
          },
          {
            "name": "b",
            "prose": "r, g, and b are all <number>s that correspond to the origin color’s red, green, and blue channels after its conversion to sRGB. 255.0 is equivalent to 100%.",
            "type": "value",
            "value": "b"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "<alpha-value>",
        "type": "type",
        "value": "<number> | <percentage>"
      },
      {
        "name": "hsl()",
        "type": "function",
        "value": "hsl([from <color>]? [<hue> | none] [<percentage> | <number> | none] [<percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "h",
            "prose": "h is an <angle> that corresponds to the origin color’s HSL hue after its conversion to sRGB, normalized to a [0, 360] range",
            "type": "value",
            "value": "h"
          },
          {
            "name": "s",
            "prose": "s and l are <percentage>s that correspond to the origin color’s HSL saturation and lightness, after its conversion to sRGB",
            "type": "value",
            "value": "s"
          },
          {
            "name": "l",
            "prose": "s and l are <percentage>s that correspond to the origin color’s HSL saturation and lightness, after its conversion to sRGB",
            "type": "value",
            "value": "l"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "hwb()",
        "type": "function",
        "value": "hwb([from <color>]? [<hue> | none] [<percentage> | <number> | none] [<percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "h",
            "prose": "h is an <angle> that corresponds to the origin color’s HWB hue after its conversion to sRGB, normalized to a [0, 360] range",
            "type": "value",
            "value": "h"
          },
          {
            "name": "w",
            "prose": "w and b are <percentage>s that correspond to the origin color’s HWB whiteness and blackness after its conversion to sRGB",
            "type": "value",
            "value": "w"
          },
          {
            "name": "b",
            "prose": "w and b are <percentage>s that correspond to the origin color’s HWB whiteness and blackness after its conversion to sRGB",
            "type": "value",
            "value": "b"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "lab()",
        "type": "function",
        "value": "lab([from <color>]? [<percentage> | <number> | none] [<percentage> | <number> | none] [<percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "l",
            "prose": "l is a <number> that corresponds to the origin color’s CIE Lightness",
            "type": "value",
            "value": "l"
          },
          {
            "name": "a",
            "prose": "a and b are <number>s that correspond to the origin color’s CIELab a and b axes",
            "type": "value",
            "value": "a"
          },
          {
            "name": "b",
            "prose": "a and b are <number>s that correspond to the origin color’s CIELab a and b axes",
            "type": "value",
            "value": "b"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "oklab()",
        "type": "function",
        "value": "oklab([from <color>]? [<percentage> | <number> | none] [<percentage> | <number> | none] [<percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "l",
            "prose": "l is a <number> that corresponds to the origin color’s Oklab Lightness",
            "type": "value",
            "value": "l"
          },
          {
            "name": "a",
            "prose": "a and b are <number>s that correspond to the origin color’s Oklab a and b axes",
            "type": "value",
            "value": "a"
          },
          {
            "name": "b",
            "prose": "a and b are <number>s that correspond to the origin color’s Oklab a and b axes",
            "type": "value",
            "value": "b"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "lch()",
        "type": "function",
        "value": "lch([from <color>]? [<percentage> | <number> | none] [<percentage> | <number> | none] [<hue> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "l",
            "prose": "l is a <number> that corresponds to the origin color’s CIE Lightness",
            "type": "value",
            "value": "l"
          },
          {
            "name": "c",
            "prose": "c is a <number> that corresponds to the origin color’s LCH chroma",
            "type": "value",
            "value": "c"
          },
          {
            "name": "h",
            "prose": "h is an <angle> that corresponds to the origin color’s LCH hue, normalized to a [0, 360] range.",
            "type": "value",
            "value": "h"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "oklch()",
        "type": "function",
        "value": "oklch([from <color>]? [<percentage> | <number> | none] [<percentage> | <number> | none] [<hue> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "l",
            "prose": "l is a <number> that corresponds to the origin color’s Oklab Lightness",
            "type": "value",
            "value": "l"
          },
          {
            "name": "c",
            "prose": "c is a <number> that corresponds to the origin color’s Oklch chroma",
            "type": "value",
            "value": "c"
          },
          {
            "name": "h",
            "prose": "h is an <angle> that corresponds to the origin color’s Oklch hue, normalized to a [0, 360] range.",
            "type": "value",
            "value": "h"
          },
          {
            "name": "alpha",
            "prose": "alpha is a <number> that corresponds to the origin color’s alpha transparency",
            "type": "value",
            "value": "alpha"
          }
        ]
      },
      {
        "name": "color()",
        "type": "function",
        "value": "color( [from <color>]? <colorspace-params> [ / [ <alpha-value> | none ] ]? )",
        "values": [
          {
            "name": "r",
            "prose": "r, g, and b are all <number>s that correspond to the origin color’s red, green, and blue channels after its conversion to the predefined RGB color space.",
            "type": "value",
            "value": "r"
          },
          {
            "name": "g",
            "prose": "r, g, and b are all <number>s that correspond to the origin color’s red, green, and blue channels after its conversion to the predefined RGB color space.",
            "type": "value",
            "value": "g"
          },
          {
            "name": "b",
            "prose": "r, g, and b are all <number>s that correspond to the origin color’s red, green, and blue channels after its conversion to the predefined RGB color space.",
            "type": "value",
            "value": "b"
          },
          {
            "name": "x",
            "prose": "x, y, z are all <number>s that correspond to the origin color’s X, Y and Z channels after its conversion to relative CIE XYZ color space adapted to the relevant white point.",
            "type": "value",
            "value": "x"
          },
          {
            "name": "y",
            "prose": "x, y, z are all <number>s that correspond to the origin color’s X, Y and Z channels after its conversion to relative CIE XYZ color space adapted to the relevant white point.",
            "type": "value",
            "value": "y"
          },
          {
            "name": "z",
            "prose": "x, y, z are all <number>s that correspond to the origin color’s X, Y and Z channels after its conversion to relative CIE XYZ color space adapted to the relevant white point.",
            "type": "value",
            "value": "z"
          }
        ]
      },
      {
        "name": "<colorspace-params>",
        "type": "type",
        "value": "[<custom-params> | <predefined-rgb-params> | <xyz-params>]"
      },
      {
        "name": "<custom-params>",
        "type": "type",
        "value": "<dashed-ident> [ <number> | <percentage> | none ]#"
      },
      {
        "name": "<predefined-rgb-params>",
        "type": "type",
        "value": "<predefined-rgb> [ <number> | <percentage> | none ]{3}"
      },
      {
        "name": "<predefined-rgb>",
        "type": "type",
        "value": "srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020"
      },
      {
        "name": "<xyz-params>",
        "type": "type",
        "value": "<xyz> [ <number> | <percentage> | none ]{3}"
      },
      {
        "name": "<xyz>",
        "type": "type",
        "value": "xyz | xyz-d50 | xyz-d65"
      },
      {
        "name": "device-cmyk()",
        "type": "function",
        "value": "device-cmyk( <cmyk-component>{4} [ / <alpha-value> ]? )"
      },
      {
        "name": "<cmyk-component>",
        "type": "type",
        "value": "<number> | <percentage>"
      },
      {
        "name": "<color-space>",
        "type": "type",
        "value": "<rectangular-color-space> | <polar-color-space> | <custom-color-space>"
      },
      {
        "name": "<rectangular-color-space>",
        "type": "type",
        "value": "srgb | srgb-linear | lab | oklab | xyz | xyz-d50 | xyz-d65"
      },
      {
        "name": "<polar-color-space>",
        "type": "type",
        "value": "hsl | hwb | lch | oklch"
      },
      {
        "name": "<custom-color-space>",
        "type": "type",
        "value": "<dashed-ident>"
      },
      {
        "name": "<hue-interpolation-method>",
        "type": "type",
        "value": "[ shorter | longer | increasing | decreasing ] hue"
      },
      {
        "name": "<color-interpolation-method>",
        "type": "type",
        "value": "in [ <rectangular-color-space> | <polar-color-space> <hue-interpolation-method>? | <custom-color-space> ]"
      }
    ]
  },
  "css-color-6": {
    "spec": {
      "title": "CSS Color Module Level 6",
      "url": "https://drafts.csswg.org/css-color-6/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "contrast-color()",
        "prose": "The contrast-color() functional notation identifies a sufficiently contrasting color against a specified background or foreground color without requiring manual computation.",
        "type": "function",
        "value": "contrast-color( [ [ <color> && [ tbd-fg | tbd-bg ] && <target-contrast>? ] | [ <color> && [ tbd-fg | tbd-bg ] && <target-contrast>, <color># ] ] )",
        "values": [
          {
            "name": "text",
            "prose": "The tbd-fg and tbd-bg keywords indicate the role of the base color in calculating the contrast: as text against a list of candidate background colors (text) or as a background against a list of candidate text colors. (The effective contrast of a pair of colors depends on their usage.)",
            "type": "value",
            "value": "text"
          },
          {
            "name": "wcag2",
            "prose": "The wcag2 keyword and wcag2() functional notations indicate use of the [WCAG21] luminance contrast algorithm. Their syntax is:",
            "type": "value",
            "value": "wcag2"
          },
          {
            "name": "wcag2()",
            "prose": "The wcag2 keyword and wcag2() functional notations indicate use of the [WCAG21] luminance contrast algorithm. Their syntax is:",
            "type": "function"
          }
        ]
      },
      {
        "name": "<target-contrast>",
        "prose": "The <target-contrast> argument specifies the contrast algorithm(s) to use. If no color candidates have been provided, <target-contrast> may be omitted, in which case a UA-chosen algorithm is used.",
        "type": "type",
        "value": "<wcag2>"
      },
      {
        "name": "<wcag2>",
        "type": "type",
        "value": "wcag2 | wcag2([<number> | [ aa | aaa ] && large? ])"
      }
    ]
  },
  "css-color-adjust": {
    "spec": {
      "title": "CSS Color Adjustment Module Level 1",
      "url": "https://drafts.csswg.org/css-color-adjust-1/"
    },
    "properties": [
      {
        "name": "color-scheme",
        "value": "normal | [ light | dark | <custom-ident> ]+ && only?",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword normal, or an ordered list of specified color scheme keywords",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Indicates that the element supports the page’s supported color schemes, if they are set, or that it supports no color schemes at all otherwise.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "light",
            "prose": "Indicates that the element supports a light color scheme.",
            "type": "value",
            "value": "light"
          },
          {
            "name": "dark",
            "prose": "Indicates that the element supports a dark color scheme.",
            "type": "value",
            "value": "dark"
          },
          {
            "name": "only",
            "prose": "Forbids the user agent from overriding the color scheme for the element.",
            "type": "value",
            "value": "only"
          },
          {
            "name": "<custom-ident>",
            "prose": "<custom-ident> values are meaningless, and exist only for future compatibility, so that future added color schemes do not invalidate the color-scheme declaration in legacy user agents. User agents must not interpret any <custom-ident> values as having a meaning; any additional recognized color schemes must be explicitly added to this property’s grammar. The normal, light, dark, and only keywords are not valid <custom-ident>s in this property.",
            "type": "value",
            "value": "<custom-ident>"
          }
        ],
        "styleDeclaration": [
          "color-scheme",
          "colorScheme"
        ]
      },
      {
        "name": "forced-color-adjust",
        "value": "auto | none | preserve-parent-color",
        "initial": "auto",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "auto",
            "prose": "The element’s colors are automatically adjusted by the UA in forced colors mode.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "The element’s colors are not automatically adjusted by the UA in forced colors mode. Authors should only use this value when they are themselves adjusting the colors to support the user’s color and contrast needs and need to make changes to the UA’s default adjustments to provide a more appropriate user experience for those elements.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "preserve-parent-color",
            "prose": "In forced colors mode, if the color property inherits from its parent (i.e. there is no cascaded value or the cascaded value is currentColor, inherit, or another keyword that inherits from the parent), then it computes to the used color of its parent’s color value. In all other respects, behaves the same as none.",
            "type": "value",
            "value": "preserve-parent-color"
          }
        ],
        "styleDeclaration": [
          "forced-color-adjust",
          "forcedColorAdjust"
        ]
      },
      {
        "name": "print-color-adjust",
        "value": "economy | exact",
        "initial": "economy",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "economy",
            "prose": "The user agent should make adjustments to the page’s styling as it deems necessary and prudent for the output device. For example, if the document is being printed, a user agent might ignore any backgrounds and adjust text color to be sufficiently dark, to minimize ink usage.",
            "type": "value",
            "value": "economy"
          },
          {
            "name": "exact",
            "prose": "This value indicates that the page is using color and styling on the specified element in a way which is important and significant, and which should not be tweaked or changed except at the user’s request. For example, a mapping website offering printed directions might \"zebra-stripe\" the steps in the directions, alternating between white and light gray backgrounds. Losing this zebra-striping and having a pure-white background would make the directions harder to read with a quick glance when distracted in a car.",
            "type": "value",
            "value": "exact"
          }
        ],
        "styleDeclaration": [
          "print-color-adjust",
          "printColorAdjust"
        ]
      },
      {
        "name": "color-adjust",
        "value": "<'print-color-adjust'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "color-adjust",
          "colorAdjust"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-color": {
    "spec": {
      "title": "CSS Color Module Level 4",
      "url": "https://drafts.csswg.org/css-color-4/"
    },
    "properties": [
      {
        "name": "color",
        "value": "<color>",
        "initial": "CanvasText",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "computed color, see resolving color values",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "color"
        ]
      },
      {
        "name": "opacity",
        "value": "<alpha-value>",
        "initial": "1",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "map to the range [0,1]",
        "computedValue": "specified number, clamped to the range [0,1]",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "opacity"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<color>",
        "prose": "Colors in CSS are represented by the <color> type:",
        "type": "type",
        "value": "<absolute-color-base> | currentcolor | <system-color>",
        "values": [
          {
            "name": "none",
            "prose": "It can also be specified explicitly, by providing the keyword none for a component in a color function. All color functions (with the exception of those using the legacy color syntax) allow any of their components to be specified as none.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "aliceblue",
            "type": "value",
            "value": "aliceblue"
          },
          {
            "name": "antiquewhite",
            "type": "value",
            "value": "antiquewhite"
          },
          {
            "name": "aqua",
            "type": "value",
            "value": "aqua"
          },
          {
            "name": "aquamarine",
            "type": "value",
            "value": "aquamarine"
          },
          {
            "name": "azure",
            "type": "value",
            "value": "azure"
          },
          {
            "name": "beige",
            "type": "value",
            "value": "beige"
          },
          {
            "name": "bisque",
            "type": "value",
            "value": "bisque"
          },
          {
            "name": "black",
            "type": "value",
            "value": "black"
          },
          {
            "name": "blanchedalmond",
            "type": "value",
            "value": "blanchedalmond"
          },
          {
            "name": "blue",
            "type": "value",
            "value": "blue"
          },
          {
            "name": "blueviolet",
            "type": "value",
            "value": "blueviolet"
          },
          {
            "name": "brown",
            "type": "value",
            "value": "brown"
          },
          {
            "name": "burlywood",
            "type": "value",
            "value": "burlywood"
          },
          {
            "name": "cadetblue",
            "type": "value",
            "value": "cadetblue"
          },
          {
            "name": "chartreuse",
            "type": "value",
            "value": "chartreuse"
          },
          {
            "name": "chocolate",
            "type": "value",
            "value": "chocolate"
          },
          {
            "name": "coral",
            "type": "value",
            "value": "coral"
          },
          {
            "name": "cornflowerblue",
            "type": "value",
            "value": "cornflowerblue"
          },
          {
            "name": "cornsilk",
            "type": "value",
            "value": "cornsilk"
          },
          {
            "name": "crimson",
            "type": "value",
            "value": "crimson"
          },
          {
            "name": "cyan",
            "type": "value",
            "value": "cyan"
          },
          {
            "name": "darkblue",
            "type": "value",
            "value": "darkblue"
          },
          {
            "name": "darkcyan",
            "type": "value",
            "value": "darkcyan"
          },
          {
            "name": "darkgoldenrod",
            "type": "value",
            "value": "darkgoldenrod"
          },
          {
            "name": "darkgray",
            "type": "value",
            "value": "darkgray"
          },
          {
            "name": "darkgreen",
            "type": "value",
            "value": "darkgreen"
          },
          {
            "name": "darkgrey",
            "type": "value",
            "value": "darkgrey"
          },
          {
            "name": "darkkhaki",
            "type": "value",
            "value": "darkkhaki"
          },
          {
            "name": "darkmagenta",
            "type": "value",
            "value": "darkmagenta"
          },
          {
            "name": "darkolivegreen",
            "type": "value",
            "value": "darkolivegreen"
          },
          {
            "name": "darkorange",
            "type": "value",
            "value": "darkorange"
          },
          {
            "name": "darkorchid",
            "type": "value",
            "value": "darkorchid"
          },
          {
            "name": "darkred",
            "type": "value",
            "value": "darkred"
          },
          {
            "name": "darksalmon",
            "type": "value",
            "value": "darksalmon"
          },
          {
            "name": "darkseagreen",
            "type": "value",
            "value": "darkseagreen"
          },
          {
            "name": "darkslateblue",
            "type": "value",
            "value": "darkslateblue"
          },
          {
            "name": "darkslategray",
            "type": "value",
            "value": "darkslategray"
          },
          {
            "name": "darkslategrey",
            "type": "value",
            "value": "darkslategrey"
          },
          {
            "name": "darkturquoise",
            "type": "value",
            "value": "darkturquoise"
          },
          {
            "name": "darkviolet",
            "type": "value",
            "value": "darkviolet"
          },
          {
            "name": "deeppink",
            "type": "value",
            "value": "deeppink"
          },
          {
            "name": "deepskyblue",
            "type": "value",
            "value": "deepskyblue"
          },
          {
            "name": "dimgray",
            "type": "value",
            "value": "dimgray"
          },
          {
            "name": "dimgrey",
            "type": "value",
            "value": "dimgrey"
          },
          {
            "name": "dodgerblue",
            "type": "value",
            "value": "dodgerblue"
          },
          {
            "name": "firebrick",
            "type": "value",
            "value": "firebrick"
          },
          {
            "name": "floralwhite",
            "type": "value",
            "value": "floralwhite"
          },
          {
            "name": "forestgreen",
            "type": "value",
            "value": "forestgreen"
          },
          {
            "name": "fuchsia",
            "type": "value",
            "value": "fuchsia"
          },
          {
            "name": "gainsboro",
            "type": "value",
            "value": "gainsboro"
          },
          {
            "name": "ghostwhite",
            "type": "value",
            "value": "ghostwhite"
          },
          {
            "name": "gold",
            "type": "value",
            "value": "gold"
          },
          {
            "name": "goldenrod",
            "type": "value",
            "value": "goldenrod"
          },
          {
            "name": "gray",
            "type": "value",
            "value": "gray"
          },
          {
            "name": "green",
            "type": "value",
            "value": "green"
          },
          {
            "name": "greenyellow",
            "type": "value",
            "value": "greenyellow"
          },
          {
            "name": "grey",
            "type": "value",
            "value": "grey"
          },
          {
            "name": "honeydew",
            "type": "value",
            "value": "honeydew"
          },
          {
            "name": "hotpink",
            "type": "value",
            "value": "hotpink"
          },
          {
            "name": "indianred",
            "type": "value",
            "value": "indianred"
          },
          {
            "name": "indigo",
            "type": "value",
            "value": "indigo"
          },
          {
            "name": "ivory",
            "type": "value",
            "value": "ivory"
          },
          {
            "name": "khaki",
            "type": "value",
            "value": "khaki"
          },
          {
            "name": "lavender",
            "type": "value",
            "value": "lavender"
          },
          {
            "name": "lavenderblush",
            "type": "value",
            "value": "lavenderblush"
          },
          {
            "name": "lawngreen",
            "type": "value",
            "value": "lawngreen"
          },
          {
            "name": "lemonchiffon",
            "type": "value",
            "value": "lemonchiffon"
          },
          {
            "name": "lightblue",
            "type": "value",
            "value": "lightblue"
          },
          {
            "name": "lightcoral",
            "type": "value",
            "value": "lightcoral"
          },
          {
            "name": "lightcyan",
            "type": "value",
            "value": "lightcyan"
          },
          {
            "name": "lightgoldenrodyellow",
            "type": "value",
            "value": "lightgoldenrodyellow"
          },
          {
            "name": "lightgray",
            "type": "value",
            "value": "lightgray"
          },
          {
            "name": "lightgreen",
            "type": "value",
            "value": "lightgreen"
          },
          {
            "name": "lightgrey",
            "type": "value",
            "value": "lightgrey"
          },
          {
            "name": "lightpink",
            "type": "value",
            "value": "lightpink"
          },
          {
            "name": "lightsalmon",
            "type": "value",
            "value": "lightsalmon"
          },
          {
            "name": "lightseagreen",
            "type": "value",
            "value": "lightseagreen"
          },
          {
            "name": "lightskyblue",
            "type": "value",
            "value": "lightskyblue"
          },
          {
            "name": "lightslategray",
            "type": "value",
            "value": "lightslategray"
          },
          {
            "name": "lightslategrey",
            "type": "value",
            "value": "lightslategrey"
          },
          {
            "name": "lightsteelblue",
            "type": "value",
            "value": "lightsteelblue"
          },
          {
            "name": "lightyellow",
            "type": "value",
            "value": "lightyellow"
          },
          {
            "name": "lime",
            "type": "value",
            "value": "lime"
          },
          {
            "name": "limegreen",
            "type": "value",
            "value": "limegreen"
          },
          {
            "name": "linen",
            "type": "value",
            "value": "linen"
          },
          {
            "name": "magenta",
            "type": "value",
            "value": "magenta"
          },
          {
            "name": "maroon",
            "type": "value",
            "value": "maroon"
          },
          {
            "name": "mediumaquamarine",
            "type": "value",
            "value": "mediumaquamarine"
          },
          {
            "name": "mediumblue",
            "type": "value",
            "value": "mediumblue"
          },
          {
            "name": "mediumorchid",
            "type": "value",
            "value": "mediumorchid"
          },
          {
            "name": "mediumpurple",
            "type": "value",
            "value": "mediumpurple"
          },
          {
            "name": "mediumseagreen",
            "type": "value",
            "value": "mediumseagreen"
          },
          {
            "name": "mediumslateblue",
            "type": "value",
            "value": "mediumslateblue"
          },
          {
            "name": "mediumspringgreen",
            "type": "value",
            "value": "mediumspringgreen"
          },
          {
            "name": "mediumturquoise",
            "type": "value",
            "value": "mediumturquoise"
          },
          {
            "name": "mediumvioletred",
            "type": "value",
            "value": "mediumvioletred"
          },
          {
            "name": "midnightblue",
            "type": "value",
            "value": "midnightblue"
          },
          {
            "name": "mintcream",
            "type": "value",
            "value": "mintcream"
          },
          {
            "name": "mistyrose",
            "type": "value",
            "value": "mistyrose"
          },
          {
            "name": "moccasin",
            "type": "value",
            "value": "moccasin"
          },
          {
            "name": "navajowhite",
            "type": "value",
            "value": "navajowhite"
          },
          {
            "name": "navy",
            "type": "value",
            "value": "navy"
          },
          {
            "name": "oldlace",
            "type": "value",
            "value": "oldlace"
          },
          {
            "name": "olive",
            "type": "value",
            "value": "olive"
          },
          {
            "name": "olivedrab",
            "type": "value",
            "value": "olivedrab"
          },
          {
            "name": "orange",
            "type": "value",
            "value": "orange"
          },
          {
            "name": "orangered",
            "type": "value",
            "value": "orangered"
          },
          {
            "name": "orchid",
            "type": "value",
            "value": "orchid"
          },
          {
            "name": "palegoldenrod",
            "type": "value",
            "value": "palegoldenrod"
          },
          {
            "name": "palegreen",
            "type": "value",
            "value": "palegreen"
          },
          {
            "name": "paleturquoise",
            "type": "value",
            "value": "paleturquoise"
          },
          {
            "name": "palevioletred",
            "type": "value",
            "value": "palevioletred"
          },
          {
            "name": "papayawhip",
            "type": "value",
            "value": "papayawhip"
          },
          {
            "name": "peachpuff",
            "type": "value",
            "value": "peachpuff"
          },
          {
            "name": "peru",
            "type": "value",
            "value": "peru"
          },
          {
            "name": "pink",
            "type": "value",
            "value": "pink"
          },
          {
            "name": "plum",
            "type": "value",
            "value": "plum"
          },
          {
            "name": "powderblue",
            "type": "value",
            "value": "powderblue"
          },
          {
            "name": "purple",
            "type": "value",
            "value": "purple"
          },
          {
            "name": "rebeccapurple",
            "type": "value",
            "value": "rebeccapurple"
          },
          {
            "name": "red",
            "type": "value",
            "value": "red"
          },
          {
            "name": "rosybrown",
            "type": "value",
            "value": "rosybrown"
          },
          {
            "name": "royalblue",
            "type": "value",
            "value": "royalblue"
          },
          {
            "name": "saddlebrown",
            "type": "value",
            "value": "saddlebrown"
          },
          {
            "name": "salmon",
            "type": "value",
            "value": "salmon"
          },
          {
            "name": "sandybrown",
            "type": "value",
            "value": "sandybrown"
          },
          {
            "name": "seagreen",
            "type": "value",
            "value": "seagreen"
          },
          {
            "name": "seashell",
            "type": "value",
            "value": "seashell"
          },
          {
            "name": "sienna",
            "type": "value",
            "value": "sienna"
          },
          {
            "name": "silver",
            "type": "value",
            "value": "silver"
          },
          {
            "name": "skyblue",
            "type": "value",
            "value": "skyblue"
          },
          {
            "name": "slateblue",
            "type": "value",
            "value": "slateblue"
          },
          {
            "name": "slategray",
            "type": "value",
            "value": "slategray"
          },
          {
            "name": "slategrey",
            "type": "value",
            "value": "slategrey"
          },
          {
            "name": "snow",
            "type": "value",
            "value": "snow"
          },
          {
            "name": "springgreen",
            "type": "value",
            "value": "springgreen"
          },
          {
            "name": "steelblue",
            "type": "value",
            "value": "steelblue"
          },
          {
            "name": "tan",
            "type": "value",
            "value": "tan"
          },
          {
            "name": "teal",
            "type": "value",
            "value": "teal"
          },
          {
            "name": "thistle",
            "type": "value",
            "value": "thistle"
          },
          {
            "name": "tomato",
            "type": "value",
            "value": "tomato"
          },
          {
            "name": "turquoise",
            "type": "value",
            "value": "turquoise"
          },
          {
            "name": "violet",
            "type": "value",
            "value": "violet"
          },
          {
            "name": "wheat",
            "type": "value",
            "value": "wheat"
          },
          {
            "name": "white",
            "type": "value",
            "value": "white"
          },
          {
            "name": "whitesmoke",
            "type": "value",
            "value": "whitesmoke"
          },
          {
            "name": "yellow",
            "type": "value",
            "value": "yellow"
          },
          {
            "name": "yellowgreen",
            "type": "value",
            "value": "yellowgreen"
          },
          {
            "name": "transparent",
            "prose": "The keyword transparent specifies a transparent black. It is a type of <named-color>.",
            "type": "value",
            "value": "transparent"
          },
          {
            "name": "currentcolor",
            "prose": "The keyword currentcolor represents value of the color property on the same element. Unlike <named-color>s, it is not restricted to sRGB; the value can be any <color>. Its used values is determined by resolving color values.",
            "type": "value",
            "value": "currentcolor"
          }
        ]
      },
      {
        "name": "<absolute-color-base>",
        "type": "type",
        "value": "<hex-color> | <absolute-color-function> | <named-color> | transparent"
      },
      {
        "name": "<absolute-color-function>",
        "type": "type",
        "value": "<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hwb()> | <lab()> | <lch()> | <oklab()> | <oklch()> | <color()>"
      },
      {
        "name": "<alpha-value>",
        "type": "type",
        "value": "<number> | <percentage>"
      },
      {
        "name": "<hue>",
        "type": "type",
        "value": "<number> | <angle>"
      },
      {
        "name": "rgb()",
        "type": "function",
        "value": "rgb( [<percentage> | none]{3} [ / [<alpha-value> | none] ]? ) | rgb( [<number> | none]{3} [ / [<alpha-value> | none] ]? ) | rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? ) | rgb( [<percentage> | none]{3} [ / [<alpha-value> | none] ]? ) | rgb( [<number> | none]{3} [ / [<alpha-value> | none] ]? )"
      },
      {
        "name": "rgba()",
        "prose": "Also, an rgba() legacy color syntax also exists, with an identical grammar and behavior to rgb().",
        "type": "function"
      },
      {
        "name": "<hex-color>",
        "prose": "The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits. In other words, a hex color is written as a hash character, \"#\", followed by some number of digits 0-9 or letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).",
        "type": "type"
      },
      {
        "name": "<named-color>",
        "prose": "CSS defines a large set of named colors, so that common colors can be written and read more easily. A <named-color> is written as an <ident>, accepted anywhere a <color> is. As usual for CSS-defined <ident>s, all of these keywords are ASCII case-insensitive.",
        "type": "type"
      },
      {
        "name": "<system-color>",
        "prose": "However, in forced colors mode, most colors on the page are forced into a restricted, user-chosen palette. The <system-color> keywords expose these user-chosen colors so that the rest of the page can integrate with this restricted palette.",
        "type": "type",
        "values": [
          {
            "name": "Canvas",
            "prose": "Background of application content or documents.",
            "type": "value",
            "value": "Canvas"
          },
          {
            "name": "CanvasText",
            "prose": "Text in application content or documents.",
            "type": "value",
            "value": "CanvasText"
          },
          {
            "name": "LinkText",
            "prose": "Text in non-active, non-visited links. For light backgrounds, traditionally blue.",
            "type": "value",
            "value": "LinkText"
          },
          {
            "name": "VisitedText",
            "prose": "Text in visited links. For light backgrounds, traditionally purple.",
            "type": "value",
            "value": "VisitedText"
          },
          {
            "name": "ActiveText",
            "prose": "Text in active links. For light backgrounds, traditionally red.",
            "type": "value",
            "value": "ActiveText"
          },
          {
            "name": "ButtonFace",
            "prose": "The face background color for push buttons.",
            "type": "value",
            "value": "ButtonFace"
          },
          {
            "name": "ButtonText",
            "prose": "Text on push buttons.",
            "type": "value",
            "value": "ButtonText"
          },
          {
            "name": "ButtonBorder",
            "prose": "The base border color for push buttons.",
            "type": "value",
            "value": "ButtonBorder"
          },
          {
            "name": "Field",
            "prose": "Background of input fields.",
            "type": "value",
            "value": "Field"
          },
          {
            "name": "FieldText",
            "prose": "Text in input fields.",
            "type": "value",
            "value": "FieldText"
          },
          {
            "name": "Highlight",
            "prose": "Background of selected text, for example from ::selection.",
            "type": "value",
            "value": "Highlight"
          },
          {
            "name": "HighlightText",
            "prose": "Text of selected text.",
            "type": "value",
            "value": "HighlightText"
          },
          {
            "name": "SelectedItem",
            "prose": "Background of selected items, for example a selected checkbox.",
            "type": "value",
            "value": "SelectedItem"
          },
          {
            "name": "SelectedItemText",
            "prose": "Text of selected items.",
            "type": "value",
            "value": "SelectedItemText"
          },
          {
            "name": "Mark",
            "prose": "Background of text that has been specially marked (such as by the HTML mark element).",
            "type": "value",
            "value": "Mark"
          },
          {
            "name": "MarkText",
            "prose": "Text that has been specially marked (such as by the HTML mark element).",
            "type": "value",
            "value": "MarkText"
          },
          {
            "name": "GrayText",
            "prose": "Disabled text. (Often, but not necessarily, gray.)",
            "type": "value",
            "value": "GrayText"
          },
          {
            "name": "AccentColor",
            "prose": "Background of accented user interface controls.",
            "type": "value",
            "value": "AccentColor"
          },
          {
            "name": "AccentColorText",
            "prose": "Text of accented user interface controls.",
            "type": "value",
            "value": "AccentColorText"
          }
        ]
      },
      {
        "name": "hsl()",
        "type": "function",
        "value": "hsl( [<hue> | none] [<percentage> | none] [<percentage> | none] [ / [<alpha-value> | none] ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? ) | hsl( [<hue> | none] [<percentage> | none] [<percentage> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "HSL",
            "prose": "HSL colors are specified as a triplet of hue, saturation, and lightness. The syntax of the hsl() function is:",
            "type": "value",
            "value": "HSL"
          }
        ]
      },
      {
        "name": "hsla()",
        "prose": "Also, an hsla() legacy color syntax also exists, with an identical grammar and behavior to hsl().",
        "type": "function"
      },
      {
        "name": "hwb()",
        "type": "function",
        "value": "hwb( [<hue> | none] [<percentage> | none] [<percentage> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "HWB",
            "prose": "HWB (short for Hue-Whiteness-Blackness) [HWB] is another method of specifying sRGB colors, similar to HSL', but often even easier for humans to work with. It describes colors with a starting hue, then a degree of whiteness and blackness to mix into that base hue.",
            "type": "value",
            "value": "HWB"
          }
        ]
      },
      {
        "name": "lab()",
        "type": "function",
        "value": "lab( [<percentage> | <number> | none] [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "Lab",
            "prose": "Lab is a rectangular coordinate system with a central Lightness (L) axis. This value is usually written as a unitless number; for compatibility with the rest of CSS, it may also be written as a percentage. 100% means an L value of 100, not 1.0. L=0% or 0 is deep black (no light at all) while L=100% or 100 is a diffuse white.",
            "type": "value",
            "value": "Lab"
          }
        ]
      },
      {
        "name": "lch()",
        "type": "function",
        "value": "lch( [<percentage> | <number> | none] [ <percentage> | <number> | none] [ <hue> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "LCH",
            "prose": "CIE LCH has the same L axis as Lab, but uses polar coordinates C (chroma) and H (hue), making it a polar, cylindrical coordinate system. C is the geometric distance from the L axis and H is the angle from the positive a axis, towards the positive b axis.",
            "type": "value",
            "value": "LCH"
          }
        ]
      },
      {
        "name": "oklab()",
        "type": "function",
        "value": "oklab( [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "Oklab",
            "prose": "Recently, Oklab, an improved Lab-like space has been developed [Oklab]. The corresponding polar form is called Oklch. It was produced by numerical optimisation of a large dataset of visually similar colors, and has improved hue linearity, hue uniformity, and chroma uniformity compared to CIE LCH.",
            "type": "value",
            "value": "Oklab"
          }
        ]
      },
      {
        "name": "oklch()",
        "type": "function",
        "value": "oklch( [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ <hue> | none] [ / [<alpha-value> | none] ]? )",
        "values": [
          {
            "name": "Oklch",
            "prose": "Recently, Oklab, an improved Lab-like space has been developed [Oklab]. The corresponding polar form is called Oklch. It was produced by numerical optimisation of a large dataset of visually similar colors, and has improved hue linearity, hue uniformity, and chroma uniformity compared to CIE LCH.",
            "type": "value",
            "value": "Oklch"
          }
        ]
      },
      {
        "name": "color()",
        "type": "function",
        "value": "color( <colorspace-params> [ / [ <alpha-value> | none ] ]? )",
        "values": [
          {
            "name": "srgb",
            "prose": "The srgb [SRGB] color space accepts three numeric parameters, representing the red, green, and blue channels of the color. In-gamut colors have all three components in the range [0, 1]. The whitepoint is D65. [SRGB] specifies two viewing conditions, encoding and typical. The [ICC] recommends using the encoding conditions for color conversion and for optimal viewing, which are the values in the table below. sRGB is the default color space for CSS, used for all the legacy color functions. It has the following characteristics: x y Red chromaticity 0.640 0.330 Green chromaticity 0.300 0.600 Blue chromaticity 0.150 0.060 White chromaticity D65 Transfer function see below White luminance 80.0 cd/m2 Black luminance 0.20 cd/m2 Image state display-referred Percentages Allowed for R, G and B Percent reference range for R,G,B: 0% = 0.0, 100% = 1.0 let sign = c < 0? -1 : 1; let abs = Math.abs(c); if (abs < 0.04045) { cl = c / 12.92; } else { cl = sign * (Math.pow((abs + 0.055) / 1.055, 2.4)); } c is the gamma-encoded red, green or blue component. cl is the corresponding linear-light component. Visualization of the sRGB color space in LCH. The primaries and secondaries are shown.",
            "type": "value",
            "value": "srgb"
          },
          {
            "name": "srgb-linear",
            "prose": "The srgb-linear [SRGB] color space accepts three numeric parameters, representing the red, green, and blue channels of the color. In-gamut colors have all three components in the range [0, 1]. The whitepoint is D65. It has the following characteristics: x y Red chromaticity 0.640 0.330 Green chromaticity 0.300 0.600 Blue chromaticity 0.150 0.060 White chromaticity D65 Transfer function unity, see below White luminance 80.0 cd/m2 Black luminance 0.20 cd/m2 Image state display-referred Percentages Allowed for R, G and B Percent reference range for R,G,B: 0% = 0.0, 100% = 1.0 cl = c; c is the red, green or blue component. cl is the corresponding linear-light component, which is identical. To avoid banding artifacts, a higher precision is required for srgb-linear than for srgb. For example, these are the same color color(srgb 0.691 0.139 0.259) color(srgb-linear 0.435 0.017 0.055)",
            "type": "value",
            "value": "srgb-linear"
          },
          {
            "name": "display-p3",
            "prose": "The display-p3 [Display-P3] color space accepts three numeric parameters, representing the red, green, and blue channels of the color. In-gamut colors have all three components in the range [0, 1]. It uses the same primary chromaticities as [DCI-P3], but with a D65 whitepoint, and the same transfer curve as sRGB. Modern displays, TVs, laptop screens and phone screens are able to display all, or nearly all, of the display-p3 gamut. It has the following characteristics: x y Red chromaticity 0.680 0.320 Green chromaticity 0.265 0.690 Blue chromaticity 0.150 0.060 White chromaticity D65 Transfer function same as srgb White luminance 80.0 cd/m2 Black luminance 0.80 cd/m2 Image state display-referred Percentages Allowed for R, G and B Percent reference range for R,G,B: 0% = 0.0, 100% = 1.0 Visualization of the P3 color space in LCH. The primaries and secondaries are shown (but in sRGB, not in the correct colors). For comparison, the sRGB primaries and secondaries are also shown, as dashed circles. P3 primaries have higher Chroma.",
            "type": "value",
            "value": "display-p3"
          },
          {
            "name": "a98-rgb",
            "prose": "The a98-rgb color space accepts three numeric parameters, representing the red, green, and blue channels of the color. In-gamut colors have all three components in the range [0, 1]. The transfer curve is a gamma function, close to but not exactly 1/2.2. It has the following characteristics: x y Red chromaticity 0.6400 0.3300 Green chromaticity 0.2100 0.7100 Blue chromaticity 0.1500 0.0600 White chromaticity D65 Transfer function 256/563 White luminance 160.0 cd/m2 Black luminance 0.5557 cd/m2 Image state display-referred Percentages Allowed for R, G and B Percent reference range for R,G,B: 0% = 0.0, 100% = 1.0 Visualization of the A98 color space in LCH. The primaries and secondaries are shown (but in sRGB, not in the correct colors). For comparison, the sRGB primaries and secondaries are also shown, as dashed circles. a98 primaries have higher Chroma, especially the yellow, green and cyan.",
            "type": "value",
            "value": "a98-rgb"
          },
          {
            "name": "prophoto-rgb",
            "prose": "The prophoto-rgb color space accepts three numeric parameters, representing the red, green, and blue channels of the color. In-gamut colors have all three components in the range [0, 1]. The transfer curve is a gamma function with a value of 1/1.8, and a small linear portion near black. The white point is D50, the same as is used by CIE Lab. Thus, conversion to CIE Lab does not require the chromatic adaptation step. The ProPhoto RGB space uses hyper-saturated, non physically realizable primaries. These were chosen to allow a wide color gamut and in particular, to minimize hue shifts under tonal manipulation. It is often used in digital photography as a wide gamut color space for the archival version of photographic images. The prophoto-rgb color space allows CSS to specify colors that will match colors in such images having the same RGB values. The ProPhoto RGB space was originally developed by Kodak and is described in [Wolfe]. It was standardized by ISO as [ROMM],[ROMM-RGB]. The white luminance is given as a range, and the viewing flare (and thus, the black luminance) is 0.5% to 1.0% of this. It has the following characteristics: x y Red chromaticity 0.734699 0.265301 Green chromaticity 0.159597 0.840403 Blue chromaticity 0.036598 0.000105 White chromaticity D50 Transfer function see below White luminance 160.0 to 640.0 cd/m2 Black luminance See text Image state display-referred Percentages Allowed for R, G and B Percent reference range for R,G,B: 0% = 0.0, 100% = 1.0 const E = 16/512; let sign = c < 0? -1 : 1; let abs = Math.abs(c); if (abs <= E) { cl = c / 16; } else { cl = sign * Math.pow(c, 1.8); } c is the gamma-encoded red, green or blue component. cl is the corresponding linear-light component. Visualization of the prophoto-rgb color space in LCH. The primaries and secondaries are shown (but in sRGB, not in the correct colors). For comparison, the sRGB primaries and secondaries are also shown, as dashed circles. prophoto-rgb primaries and secondaries have much higher Chroma, but much of this ultrawide gamut does not correspond to physically realizable colors.",
            "type": "value",
            "value": "prophoto-rgb"
          },
          {
            "name": "rec2020",
            "prose": "The rec2020 [Rec.2020] color space accepts three numeric parameters, representing the red, green, and blue channels of the color. In-gamut colors have all three components in the range [0, 1], (\"full-range\", in video terminology). ITU Reference 2020 is used for Ultra High Definition, 4k and 8k television. The primaries are physically realizable, but with difficulty as they lie very close to the spectral locus. Current displays are unable to reproduce the full gamut of rec2020. Coverage is expected to increase over time as displays improve. It has the following characteristics: x y Red chromaticity 0.708 0.292 Green chromaticity 0.170 0.797 Blue chromaticity 0.131 0.046 White chromaticity D65 Transfer function see below, from [Rec.2020] table 4 Image state display-referred Percentages Allowed for R, G and B Percent reference range for R,G,B: 0% = 0.0, 100% = 1.0 const α = 1.09929682680944 ; const β = 0.018053968510807; let sign = c < 0? -1 : 1; let abs = Math.abs(c); if (abs < β * 4.5 ) { cl = c / 4.5; } else { cl = sign * (Math.pow((abs + α -1 ) / α, 1/0.45)); } c is the gamma-encoded red, green or blue component. cl is the corresponding linear-light component. Visualization of the rec2020 color space in LCH. The primaries and secondaries are shown (but in sRGB, not in the correct colors). For comparison, the sRGB primaries and secondaries are also shown, as dashed circles. rec2020 primaries have much higher Chroma.",
            "type": "value",
            "value": "rec2020"
          },
          {
            "name": "xyz-d50",
            "prose": "The xyz color space accepts three numeric parameters, representing the X,Y and Z values. It represents the CIE XYZ [COLORIMETRY] color space, scaled such that diffuse white has a luminance (Y) of 1.0. and, if necessary, chromatically adapted to the reference white. The reference white for xyz-d50 is D50, while the reference white for xyz-d65 and xyz is D65. Values greater than 1.0/100% are allowed and must not be clamped; they represent colors brighter than diffuse white. Values less than 0/0% are uncommon, but can occur as a result of chromatic adaptation, and likewise must not be clamped. It has the following characteristics: Percentages Allowed for X,Y,Z Percent reference range for X,Y,Z: 0% = 0.0, 100% = 1.0 These are exactly equivalent: #7654CD rgb(46.27% 32.94% 80.39%) lab(44.36% 36.05 -58.99) color(xyz-d50 0.2005 0.14089 0.4472) color(xyz-d65 0.21661 0.14602 0.59452)",
            "type": "value",
            "value": "xyz-d50"
          },
          {
            "name": "xyz-d65",
            "prose": "The xyz color space accepts three numeric parameters, representing the X,Y and Z values. It represents the CIE XYZ [COLORIMETRY] color space, scaled such that diffuse white has a luminance (Y) of 1.0. and, if necessary, chromatically adapted to the reference white. The reference white for xyz-d50 is D50, while the reference white for xyz-d65 and xyz is D65. Values greater than 1.0/100% are allowed and must not be clamped; they represent colors brighter than diffuse white. Values less than 0/0% are uncommon, but can occur as a result of chromatic adaptation, and likewise must not be clamped. It has the following characteristics: Percentages Allowed for X,Y,Z Percent reference range for X,Y,Z: 0% = 0.0, 100% = 1.0 These are exactly equivalent: #7654CD rgb(46.27% 32.94% 80.39%) lab(44.36% 36.05 -58.99) color(xyz-d50 0.2005 0.14089 0.4472) color(xyz-d65 0.21661 0.14602 0.59452)",
            "type": "value",
            "value": "xyz-d65"
          },
          {
            "name": "xyz",
            "prose": "The xyz color space accepts three numeric parameters, representing the X,Y and Z values. It represents the CIE XYZ [COLORIMETRY] color space, scaled such that diffuse white has a luminance (Y) of 1.0. and, if necessary, chromatically adapted to the reference white. The reference white for xyz-d50 is D50, while the reference white for xyz-d65 and xyz is D65. Values greater than 1.0/100% are allowed and must not be clamped; they represent colors brighter than diffuse white. Values less than 0/0% are uncommon, but can occur as a result of chromatic adaptation, and likewise must not be clamped. It has the following characteristics: Percentages Allowed for X,Y,Z Percent reference range for X,Y,Z: 0% = 0.0, 100% = 1.0 These are exactly equivalent: #7654CD rgb(46.27% 32.94% 80.39%) lab(44.36% 36.05 -58.99) color(xyz-d50 0.2005 0.14089 0.4472) color(xyz-d65 0.21661 0.14602 0.59452)",
            "type": "value",
            "value": "xyz"
          }
        ]
      },
      {
        "name": "<colorspace-params>",
        "type": "type",
        "value": "[ <predefined-rgb-params> | <xyz-params>]"
      },
      {
        "name": "<predefined-rgb-params>",
        "type": "type",
        "value": "<predefined-rgb> [ <number> | <percentage> | none ]{3}"
      },
      {
        "name": "<predefined-rgb>",
        "type": "type",
        "value": "srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020"
      },
      {
        "name": "<xyz-params>",
        "type": "type",
        "value": "<xyz-space> [ <number> | <percentage> | none ]{3}"
      },
      {
        "name": "<xyz-space>",
        "type": "type",
        "value": "xyz | xyz-d50 | xyz-d65"
      },
      {
        "name": "<color-space>",
        "type": "type",
        "value": "<rectangular-color-space> | <polar-color-space>"
      },
      {
        "name": "<rectangular-color-space>",
        "type": "type",
        "value": "srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020 | lab | oklab | xyz | xyz-d50 | xyz-d65"
      },
      {
        "name": "<polar-color-space>",
        "type": "type",
        "value": "hsl | hwb | lch | oklch"
      },
      {
        "name": "<hue-interpolation-method>",
        "type": "type",
        "value": "[ shorter | longer | increasing | decreasing ] hue"
      },
      {
        "name": "<color-interpolation-method>",
        "type": "type",
        "value": "in [ <rectangular-color-space> | <polar-color-space> <hue-interpolation-method>? ]"
      },
      {
        "name": "<deprecated-color>",
        "prose": "The deprecated system colors are represented as the <deprecated-color> sub-type, and are defined as:",
        "type": "type"
      },
      {
        "name": "<quirky-color>",
        "prose": "When CSS is being parsed in quirks mode, <quirky-color> is a type of <color> that is only valid in certain properties:",
        "type": "type"
      }
    ]
  },
  "css-conditional-4": {
    "spec": {
      "title": "CSS Conditional Rules Module Level 4",
      "url": "https://drafts.csswg.org/css-conditional-4/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<supports-feature>",
        "type": "type",
        "value": "<supports-selector-fn> | <supports-decl>"
      },
      {
        "name": "<supports-selector-fn>",
        "type": "type",
        "value": "selector( <complex-selector> )"
      }
    ]
  },
  "css-conditional-5": {
    "spec": {
      "title": "CSS Conditional Rules Module Level 5",
      "url": "https://drafts.csswg.org/css-conditional-5/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@when",
        "prose": "The @when at-rule is a conditional group rule that generalizes the individual conditional group rules such as @media and @supports. It is defined as:",
        "descriptors": [],
        "value": "@when <boolean-condition> { <stylesheet> }"
      },
      {
        "name": "@else",
        "prose": "The @else rule is a conditional group rule used to form conditional rule chains, which associate multiple conditional rules and guarantee that only the first one that matches will evaluate its condition as true. It is defined as:",
        "descriptors": [],
        "value": "@else <boolean-condition>? { <stylesheet> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<supports-feature>",
        "type": "type",
        "value": "<supports-selector-fn> | <supports-font-tech-fn> | <supports-font-format-fn> | <supports-decl>"
      },
      {
        "name": "<supports-font-tech-fn>",
        "type": "type",
        "value": "font-tech( <font-tech> )"
      },
      {
        "name": "<supports-font-format-fn>",
        "type": "type",
        "value": "font-format( <font-format> )"
      },
      {
        "name": "media()",
        "type": "function",
        "value": "media( [ <mf-plain> | <mf-boolean> | <mf-range> ] )"
      },
      {
        "name": "supports()",
        "type": "function",
        "value": "supports( <declaration> )"
      }
    ],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "<font-format",
        "value": "[ collection | embedded-opentype | opentype | svg | truetype | woff | woff2 ]"
      }
    ]
  },
  "css-conditional": {
    "spec": {
      "title": "CSS Conditional Rules Module Level 3",
      "url": "https://drafts.csswg.org/css-conditional-3/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@media",
        "prose": "The @media rule is a conditional group rule whose condition is a media query. Its syntax is:",
        "descriptors": [],
        "value": "@media <media-query-list> { <stylesheet> }"
      },
      {
        "name": "@supports",
        "prose": "The @supports rule is a conditional group rule whose condition tests whether the user agent supports CSS property:value pairs. Authors can use it to write style sheets that use new features when available but degrade gracefully when those features are not supported. These queries are called CSS feature queries or (colloquially) supports queries.",
        "descriptors": [],
        "value": "@supports <supports-condition> { <stylesheet> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<supports-condition>",
        "type": "type",
        "value": "not <supports-in-parens> | <supports-in-parens> [ and <supports-in-parens> ]* | <supports-in-parens> [ or <supports-in-parens> ]*"
      },
      {
        "name": "<supports-in-parens>",
        "type": "type",
        "value": "( <supports-condition> ) | <supports-feature> | <general-enclosed>"
      },
      {
        "name": "<supports-feature>",
        "type": "type",
        "value": "<supports-decl>"
      },
      {
        "name": "<supports-decl>",
        "type": "type",
        "value": "( <declaration> )"
      }
    ]
  },
  "css-contain-3": {
    "spec": {
      "title": "CSS Containment Module Level 3",
      "url": "https://drafts.csswg.org/css-contain-3/"
    },
    "properties": [
      {
        "name": "contain",
        "newValues": "layout || style || paint || [ size | inline-size ]",
        "values": [
          {
            "name": "inline-size",
            "prose": "This value turns on inline-size containment for the element. This prevents the inline-size of its principal box from directly depending on its contents.",
            "type": "value",
            "value": "inline-size"
          }
        ],
        "styleDeclaration": [
          "contain"
        ]
      },
      {
        "name": "container-type",
        "value": "normal | size | inline-size",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword normal or one or more of size, inline-size",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "size",
            "prose": "Establishes a query container for container size queries on both the inline and block axis. Applies layout containment, style containment, and size containment to the principal box.",
            "type": "value",
            "value": "size"
          },
          {
            "name": "inline-size",
            "prose": "Establishes a query container for container size queries on the container’s own inline axis. Applies layout containment, style containment, and inline-size containment to the principal box.",
            "type": "value",
            "value": "inline-size"
          },
          {
            "name": "normal",
            "prose": "The element is not a query container for any container size queries, but remains a query container for container style queries.",
            "type": "value",
            "value": "normal"
          }
        ],
        "styleDeclaration": [
          "container-type",
          "containerType"
        ]
      },
      {
        "name": "container-name",
        "value": "none | <custom-ident>+",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none, or an ordered list of identifiers",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "none",
            "prose": "The query container has no query container name.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<custom-ident>",
            "prose": "Specifies a query container name as an identifier. The keywords none, and, not, and or are excluded from this <custom-ident>.",
            "type": "value",
            "value": "<custom-ident>"
          }
        ],
        "styleDeclaration": [
          "container-name",
          "containerName"
        ]
      },
      {
        "name": "container",
        "value": "<'container-name'> [ / <'container-type'> ]?",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "container"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@container",
        "prose": "The @container rule is a conditional group rule whose condition contains a container query, which is a boolean combination of container size queries and/or container style queries. Style declarations within the <stylesheet> block of an @container rule are filtered by its condition to only match when the container query is true for their element’s query container.",
        "descriptors": [
          {
            "name": "width",
            "for": "@container",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "height",
            "for": "@container",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "inline-size",
            "for": "@container",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "block-size",
            "for": "@container",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "aspect-ratio",
            "for": "@container",
            "value": "<ratio>",
            "type": "range"
          },
          {
            "name": "orientation",
            "for": "@container",
            "value": "portrait | landscape",
            "type": "discrete",
            "values": [
              {
                "name": "portrait",
                "prose": "The orientation container feature is portrait when the value of the height container feature is greater than or equal to the value of the width container feature.",
                "type": "value",
                "value": "portrait"
              },
              {
                "name": "landscape",
                "prose": "Otherwise orientation is landscape.",
                "type": "value",
                "value": "landscape"
              }
            ]
          }
        ],
        "value": "@container <container-condition> { <stylesheet> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<container-condition>",
        "type": "type",
        "value": "[ <container-name> ]? <container-query>"
      },
      {
        "name": "<container-name>",
        "type": "type",
        "value": "<custom-ident>"
      },
      {
        "name": "<container-query>",
        "type": "type",
        "value": "not <query-in-parens> | <query-in-parens> [ [ and <query-in-parens> ]* | [ or <query-in-parens> ]* ]"
      },
      {
        "name": "<query-in-parens>",
        "type": "type",
        "value": "( <container-query> ) | ( <size-feature> ) | style( <style-query> ) | <general-enclosed>"
      },
      {
        "name": "<style-query>",
        "type": "type",
        "value": "not <style-in-parens> | <style-in-parens> [ [ and <style-in-parens> ]* | [ or <style-in-parens> ]* ] | <style-feature>"
      },
      {
        "name": "<style-in-parens>",
        "type": "type",
        "value": "( <style-query> ) | ( <style-feature> ) | <general-enclosed>"
      },
      {
        "name": "<size-feature>",
        "prose": "A container size query allows querying the size of the query container’s principal box. It is a boolean combination of individual size features (<size-feature>) that each query a single, specific dimensional feature of the query container. The syntax of a <size-feature> is the same as for a media feature: a feature name, a comparator, and a value. [mediaqueries-5] The boolean syntax and logic combining size features into a size query is the same as for CSS feature queries. (See @supports. [CSS-CONDITIONAL-3])",
        "type": "type"
      },
      {
        "name": "<style-feature>",
        "prose": "A container style query allows querying the computed values of the query container. It is a boolean combination of individual style features (<style-feature>) that each query a single, specific property of the query container. The syntax of a <style-feature> is the same as for a declaration [CSS-SYNTAX-3], and its query is true if the computed value of the given property on the query container matches the given value (which is also computed with respect to the query container), unknown if the property or its value is invalid or unsupported, and false otherwise. The boolean syntax and logic combining style features into a style query is the same as for CSS feature queries. (See @supports. [CSS-CONDITIONAL-3])",
        "type": "type"
      }
    ]
  },
  "css-contain": {
    "spec": {
      "title": "CSS Containment Module Level 2",
      "url": "https://drafts.csswg.org/css-contain-2/"
    },
    "properties": [
      {
        "name": "contain",
        "value": "none | strict | content | [ size || layout || style || paint ]",
        "initial": "none",
        "appliesTo": "See below",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or one or more of size, layout, paint",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "none",
            "prose": "This value indicates that the property has no effect. The element renders as normal, with no containment effects applied.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "strict",
            "prose": "This value computes to size layout paint style, and thus turns on all forms of containment for the element.",
            "type": "value",
            "value": "strict"
          },
          {
            "name": "content",
            "prose": "This value computes to layout paint style, and thus turns on all forms of containment except size containment for the element.",
            "type": "value",
            "value": "content"
          },
          {
            "name": "size",
            "prose": "The value turns on size containment for the element. This ensures that the containment box can be laid out without needing to examine its descendants.",
            "type": "value",
            "value": "size"
          },
          {
            "name": "layout",
            "prose": "This value turns on layout containment for the element. This ensures that the containment box is totally opaque for layout purposes; nothing outside can affect its internal layout, and vice versa.",
            "type": "value",
            "value": "layout"
          },
          {
            "name": "style",
            "prose": "This value turns on style containment for the element. This ensures that, for properties which can have effects on more than just an element and its descendants, those effects don’t escape the element.",
            "type": "value",
            "value": "style"
          },
          {
            "name": "paint",
            "prose": "This value turns on paint containment for the element. This ensures that the descendants of the containment box don’t display outside its bounds, so if an element is off-screen or otherwise not visible, its descendants are also guaranteed to be not visible.",
            "type": "value",
            "value": "paint"
          }
        ],
        "styleDeclaration": [
          "contain"
        ]
      },
      {
        "name": "content-visibility",
        "value": "visible | auto | hidden",
        "initial": "visible",
        "appliesTo": "elements for which size containment can apply",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "visible",
            "prose": "No effect. The element’s contents are laid out and rendered as normal.",
            "type": "value",
            "value": "visible"
          },
          {
            "name": "hidden",
            "prose": "The element skips its contents. The skipped contents must not be accessible to user-agent features, such as find-in-page, tab-order navigation, etc., nor be selectable or focusable.",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "auto",
            "prose": "Changes the used value of the contain property so as to turn on layout containment, style containment, and paint containment for the element. If the element is not relevant to the user, it also skips its contents. Unlike hidden, the skipped contents must still be available as normal to user-agent features such as find-in-page, tab order navigation, etc., and must be focusable and selectable as normal.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "content-visibility",
          "contentVisibility"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-content": {
    "spec": {
      "title": "CSS Generated Content Module Level 3",
      "url": "https://drafts.csswg.org/css-content-3/"
    },
    "properties": [
      {
        "name": "content",
        "value": "normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?",
        "initial": "normal",
        "appliesTo": "all elements, tree-abiding pseudo-elements, and page margin boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "See prose below",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "For an element or page margin box, this computes to contents. For ::before and ::after, this computes to none. For ::marker, ::placeholder, and ::file-selector-button, this computes to itself (normal).",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "none",
            "prose": "On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it inhibits the creation of the pseudo-element as if it had display: none. In neither case does it prevent any pseudo-elements which have this element or pseudo-element as an originating element from being generated.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<content-replacement>",
            "value": "<image>",
            "type": "type"
          },
          {
            "name": "<content-list>",
            "value": "[ <string> | contents | <image> | <counter> | <quote> | <target> | <leader()> ]+",
            "type": "type",
            "values": [
              {
                "name": "<string>",
                "prose": "Represents an anonymous inline box filled with the specified text.",
                "type": "value",
                "value": "<string>"
              },
              {
                "name": "<image>",
                "prose": "Represents an anonymous inline replaced element filled with the specified <image>. If the <image> represents an invalid image, this value instead represents nothing. (No inline content is added to the element, as if this value were \"skipped\".)",
                "type": "value",
                "value": "<image>"
              },
              {
                "name": "contents",
                "prose": "The element’s descendants. Since this can only be used once per element (you can’t duplicate the children if, e.g., one is a plugin or form control), it is handled as follows:",
                "type": "value",
                "value": "contents"
              },
              {
                "name": "leader()",
                "value": "leader( <leader-type> )",
                "type": "function"
              }
            ]
          },
          {
            "name": "/ [ <string> | <counter> ]+",
            "prose": "Specifies the \"alt text\" for the element. See § 1.2 Alternative Text for Accessibility for details. If omitted, the element has no \"alt text\".",
            "type": "value",
            "value": "/ [ <string> | <counter> ]+"
          }
        ],
        "styleDeclaration": [
          "content"
        ]
      },
      {
        "name": "quotes",
        "value": "auto | none | [ <string> <string> ]+",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword none, the keyword auto, or a list, each item a pair of string values",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The open-quote and close-quote values of the content property produce no quotations marks, as if they were no-open-quote and no-close-quote respectively.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "A typographically appropriate used value for quotes is automatically chosen by the UA based on the content language of the element and/or its parent.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "quotes"
        ]
      },
      {
        "name": "string-set",
        "value": "none | [ <custom-ident> <string>+ ]#",
        "initial": "none",
        "appliesTo": "all elements, but not pseudo-elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword none or a list, each item an identifier paired with a list of string values",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The element does not set any named strings.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "string-set",
          "stringSet"
        ]
      },
      {
        "name": "bookmark-level",
        "value": "none | <integer [1,∞]>",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword none or the specified integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<integer [1,∞]>",
            "prose": "defines the level of the bookmark, with the top level being 1 (negative and zero values are invalid).",
            "type": "value",
            "value": "<integer [1,∞]>"
          },
          {
            "name": "none",
            "prose": "no bookmark is generated.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "bookmark-level",
          "bookmarkLevel"
        ]
      },
      {
        "name": "bookmark-label",
        "value": "<content-list>",
        "initial": "content(text)",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<content-list>",
            "prose": "<content-list> is defined above, in the section on the string-set property. The value of <content-list> becomes the text content of the bookmark label.",
            "type": "value",
            "value": "<content-list>",
            "values": [
              {
                "name": "<string>",
                "prose": "Represents an anonymous inline box filled with the specified text.",
                "type": "value",
                "value": "<string>"
              },
              {
                "name": "<image>",
                "prose": "Represents an anonymous inline replaced element filled with the specified <image>. If the <image> represents an invalid image, this value instead represents nothing. (No inline content is added to the element, as if this value were \"skipped\".)",
                "type": "value",
                "value": "<image>"
              },
              {
                "name": "contents",
                "prose": "The element’s descendants. Since this can only be used once per element (you can’t duplicate the children if, e.g., one is a plugin or form control), it is handled as follows:",
                "type": "value",
                "value": "contents"
              },
              {
                "name": "leader()",
                "value": "leader( <leader-type> )",
                "type": "function"
              }
            ]
          }
        ],
        "styleDeclaration": [
          "bookmark-label",
          "bookmarkLabel"
        ]
      },
      {
        "name": "bookmark-state",
        "value": "open | closed",
        "initial": "open",
        "appliesTo": "block-level elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "open",
            "prose": "Subsequent bookmarks with bookmark-level greater than the given bookmark are displayed, until reaching another bookmark of the same level or lower. If one of subsequent bookmark is closed, apply the same test to determine if its subsequent bookmarks should be displayed.",
            "type": "value",
            "value": "open"
          },
          {
            "name": "closed",
            "prose": "Subsequent bookmarks of bookmark-level greater than the given bookmark are not displayed, until reaching another bookmark of the same level or lower.",
            "type": "value",
            "value": "closed"
          }
        ],
        "styleDeclaration": [
          "bookmark-state",
          "bookmarkState"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<quote>",
        "type": "type",
        "value": "open-quote | close-quote | no-open-quote | no-close-quote",
        "values": [
          {
            "name": "open-quote",
            "prose": "These values are replaced by the appropriate string from the quotes property, and increments (decrements) the level of nesting for quotes. See § 2.4.1 Specifying quotes with the quotes property for more information.",
            "type": "value",
            "value": "open-quote"
          },
          {
            "name": "close-quote",
            "prose": "These values are replaced by the appropriate string from the quotes property, and increments (decrements) the level of nesting for quotes. See § 2.4.1 Specifying quotes with the quotes property for more information.",
            "type": "value",
            "value": "close-quote"
          },
          {
            "name": "no-open-quote",
            "prose": "Inserts nothing (as in none), but increments (decrements) the level of nesting for quotes. See § 2.4.1 Specifying quotes with the quotes property for more information.",
            "type": "value",
            "value": "no-open-quote"
          },
          {
            "name": "no-close-quote",
            "prose": "Inserts nothing (as in none), but increments (decrements) the level of nesting for quotes. See § 2.4.1 Specifying quotes with the quotes property for more information.",
            "type": "value",
            "value": "no-close-quote"
          }
        ]
      },
      {
        "name": "leader()",
        "type": "function",
        "value": "leader( <leader-type> )",
        "values": [
          {
            "name": "dotted",
            "prose": "Equivalent to leader(\".\")",
            "type": "value",
            "value": "dotted"
          },
          {
            "name": "solid",
            "prose": "Equivalent to leader(\"_\")",
            "type": "value",
            "value": "solid"
          },
          {
            "name": "space",
            "prose": "Equivalent to leader(\" \")",
            "type": "value",
            "value": "space"
          },
          {
            "name": "<string>",
            "prose": "Issue: Define this.",
            "type": "value",
            "value": "<string>"
          }
        ]
      },
      {
        "name": "<leader-type>",
        "type": "type",
        "value": "dotted | solid | space | <string>"
      },
      {
        "name": "<target>",
        "type": "type",
        "value": "<target-counter()> | <target-counters()> | <target-text()>"
      },
      {
        "name": "target-counter()",
        "type": "function",
        "value": "target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )"
      },
      {
        "name": "target-counters()",
        "type": "function",
        "value": "target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )"
      },
      {
        "name": "target-text()",
        "type": "function",
        "value": "target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )"
      },
      {
        "name": "string()",
        "type": "function",
        "value": "string( <custom-ident> , [ first | start | last | first-except ]? )",
        "values": [
          {
            "name": "first",
            "prose": "The value of the first assignment on the page is used. If there is no assignment on the page, the entry value is used. If no second argument is provided, this is the default value.",
            "type": "value",
            "value": "first"
          },
          {
            "name": "start",
            "prose": "If the element is the first element on the page, the value of the first assignment is used. Otherwise the entry value is used. The entry value may be empty if the named string hasn’t yet appeared.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "last",
            "prose": "The exit value of the named string is used.",
            "type": "value",
            "value": "last"
          },
          {
            "name": "first-except",
            "prose": "This is identical to first, except that the empty string is used on the page where the value is assigned. we may need to kill the entire content string. Is this necessary?",
            "type": "value",
            "value": "first-except"
          }
        ]
      },
      {
        "name": "content()",
        "type": "function",
        "value": "content( [ text | before | after | first-letter | marker ]? )",
        "values": [
          {
            "name": "text",
            "prose": "The string value of the element. If no value is specified in content(), it acts as if text were specified.",
            "type": "value",
            "value": "text"
          },
          {
            "name": "before",
            "prose": "The string value of the ::before pseudo-element.",
            "type": "value",
            "value": "before"
          },
          {
            "name": "after",
            "prose": "The string value of the ::after pseudo-element.",
            "type": "value",
            "value": "after"
          },
          {
            "name": "first-letter",
            "prose": "The first letter of the element, as defined for the ::first-letter pseudo-element",
            "type": "value",
            "value": "first-letter"
          },
          {
            "name": "marker",
            "prose": "The string value of the ::marker pseudo-element.",
            "type": "value",
            "value": "marker"
          }
        ]
      }
    ]
  },
  "css-counter-styles": {
    "spec": {
      "title": "CSS Counter Styles Level 3",
      "url": "https://drafts.csswg.org/css-counter-styles-3/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@counter-style",
        "prose": "The @counter-style rule allows authors to define a custom counter style. The components of a counter style are specified by descriptors in the @counter-style rule. The algorithm is specified implicitly by a combination of the system, symbols, and additive-symbols properties.",
        "descriptors": [
          {
            "name": "system",
            "for": "@counter-style",
            "value": "cyclic | numeric | alphabetic | symbolic | additive | [fixed <integer>?] | [ extends <counter-style-name> ]",
            "initial": "symbolic",
            "values": [
              {
                "name": "cyclic",
                "prose": "The cyclic counter system cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list. It can be used for simple bullets (just provide a single counter symbol), or for cycling through multiple symbols. The first counter symbol is used as the representation of the value 1, the second counter symbol (if it exists) is used as the representation of the value 2, etc.",
                "type": "value",
                "value": "cyclic"
              },
              {
                "name": "fixed",
                "prose": "The fixed counter system runs through its list of counter symbols once, then falls back. It is useful for representing counter styles that only have a finite number of representations. For example, Unicode defines several limited-length runs of special characters meant for lists, such as circled digits.",
                "type": "value",
                "value": "fixed"
              },
              {
                "name": "symbolic",
                "prose": "The symbolic counter system cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list. For example, if the original symbols were \"*\" and \"†\", then on the second pass they would instead be \"**\" and \"††\", while on the third they would be \"***\"and \"†††\", etc. It can be used for footnote-style markers, and is also sometimes used for alphabetic-style lists for a slightly different presentation than what the alphabetic system presents.",
                "type": "value",
                "value": "symbolic"
              },
              {
                "name": "alphabetic",
                "prose": "The alphabetic counter system interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from \"a\", \"b\", \"c\", to \"aa\", \"ab\", \"ac\". Alphabetic numbering systems do not contain a digit representing 0; so the first value when a new digit is added is composed solely of the first digit. Alphabetic numbering systems are commonly used for lists, and also appear in many spreadsheet programs to number columns. The first counter symbol in the list is interpreted as the digit 1, the second as the digit 2, and so on.",
                "type": "value",
                "value": "alphabetic"
              },
              {
                "name": "numeric",
                "prose": "The numeric counter system interprets the list of counter symbols as digits to a \"place-value\" numbering system, similar to the default decimal counter style. The first counter symbol in the list is interpreted as the digit 0, the second as the digit 1, and so on.",
                "type": "value",
                "value": "numeric"
              },
              {
                "name": "additive",
                "prose": "The additive counter system is used to represent \"sign-value\" numbering systems, which, rather than reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together. This is used in Roman numerals and other numbering systems around the world.",
                "type": "value",
                "value": "additive"
              },
              {
                "name": "extends",
                "prose": "The extends system allows an author to use the algorithm of another counter style, but alter other aspects, such as the negative sign or the suffix. If a counter style uses the extends system, any unspecified descriptors must be taken from the extended counter style specified, rather than taking their initial values.",
                "type": "value",
                "value": "extends"
              }
            ]
          },
          {
            "name": "negative",
            "for": "@counter-style",
            "value": "<symbol> <symbol>?",
            "initial": "\"\\2D\" (\"-\" hyphen-minus)"
          },
          {
            "name": "prefix",
            "for": "@counter-style",
            "value": "<symbol>",
            "initial": "\"\" (the empty string)"
          },
          {
            "name": "suffix",
            "for": "@counter-style",
            "value": "<symbol>",
            "initial": "\"\\2E\\20\" (\".\" full stop followed by a space)"
          },
          {
            "name": "range",
            "for": "@counter-style",
            "value": "[ [ <integer> | infinite ]{2} ]# | auto",
            "initial": "auto",
            "values": [
              {
                "name": "auto",
                "prose": "The range depends on the counter system: For cyclic, numeric, and fixed systems, the range is negative infinity to positive infinity. For alphabetic and symbolic systems, the range is 1 to positive infinity. For additive systems, the range is 0 to positive infinity. For extends systems, the range is whatever auto would produce for the extended system; if extending a complex predefined style (§ 7 Complex Predefined Counter Styles), the range is the style’s defined range.",
                "type": "value",
                "value": "auto"
              }
            ]
          },
          {
            "name": "pad",
            "for": "@counter-style",
            "value": "<integer [0,∞]> && <symbol>",
            "initial": "0 \"\""
          },
          {
            "name": "fallback",
            "for": "@counter-style",
            "value": "<counter-style-name>",
            "initial": "decimal"
          },
          {
            "name": "symbols",
            "for": "@counter-style",
            "value": "<symbol>+",
            "initial": "n/a"
          },
          {
            "name": "additive-symbols",
            "for": "@counter-style",
            "value": "[ <integer [0,∞]> && <symbol> ]#",
            "initial": "n/a"
          },
          {
            "name": "speak-as",
            "for": "@counter-style",
            "value": "auto | bullets | numbers | words | spell-out | <counter-style-name>",
            "initial": "auto",
            "values": [
              {
                "name": "auto",
                "prose": "If the counter style’s system is alphabetic, this value has the same effect as spell-out. If the system is cyclic, this value has the same effect as bullets. If the system is extends, this value has the same effect as auto would have for the extended style. Otherwise, this value has the same effect as numbers.",
                "type": "value",
                "value": "auto"
              },
              {
                "name": "bullets",
                "prose": "The UA speaks a UA-defined phrase or audio cue that represents an unordered list item being read out.",
                "type": "value",
                "value": "bullets"
              },
              {
                "name": "numbers",
                "prose": "The counter’s numeric value is spoken as a number in the content language.",
                "type": "value",
                "value": "numbers"
              },
              {
                "name": "words",
                "prose": "Generate a counter representation for the value as normal, then speak it as normal text in the content language. If the counter representation contains images, instead handle the value as for numbers.",
                "type": "value",
                "value": "words"
              },
              {
                "name": "spell-out",
                "prose": "Generate a counter representation for the value as normal, then spell it out letter-by-letter in the content language. If the UA does not know how to pronounce the symbols (or the counter representation contains images), it must instead handle the value as for numbers. For example, lower-greek in English would be read out as \"alpha\", \"beta\", \"gamma\", etc. Conversely, upper-latin in French would be read out as (in phonetic notation) /a/, /be/, /se/, etc.",
                "type": "value",
                "value": "spell-out"
              },
              {
                "name": "<counter-style-name>",
                "prose": "The counter’s value is instead spoken out in the specified style (similar to the behavior of the fallback descriptor when generating representations for a counter value). If the specified style does not exist, this value is treated as auto. If a loop is detected when following speak-as references, this value is treated as auto for the counter styles participating in the loop.",
                "type": "value",
                "value": "<counter-style-name>"
              }
            ]
          }
        ],
        "value": "@counter-style <counter-style-name> { <declaration-list> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<counter-style-name>",
        "prose": "<counter-style-name> is a <custom-ident> that is not an ASCII case-insensitive match for none. The <counter-style-name> is a tree-scoped name.",
        "type": "type",
        "values": [
          {
            "name": "decimal",
            "prose": "Western decimal numbers (e.g., 1, 2, 3, ..., 98, 99, 100).",
            "type": "value",
            "value": "decimal"
          },
          {
            "name": "decimal-leading-zero",
            "prose": "Decimal numbers padded by initial zeros (e.g., 01, 02, 03, ..., 98, 99, 100).",
            "type": "value",
            "value": "decimal-leading-zero"
          },
          {
            "name": "arabic-indic",
            "prose": "Arabic-indic numbering (e.g., ١‎, ٢‎, ٣‎, ٤‎, ..., ٩٨‎, ٩٩‎, ١٠٠‎).",
            "type": "value",
            "value": "arabic-indic"
          },
          {
            "name": "armenian",
            "prose": "Traditional uppercase Armenian numbering (e.g., Ա, Բ, Գ, ..., ՂԸ, ՂԹ, Ճ).",
            "type": "value",
            "value": "armenian"
          },
          {
            "name": "upper-armenian",
            "prose": "Traditional uppercase Armenian numbering (e.g., Ա, Բ, Գ, ..., ՂԸ, ՂԹ, Ճ).",
            "type": "value",
            "value": "upper-armenian"
          },
          {
            "name": "lower-armenian",
            "prose": "Lowercase Armenian numbering (e.g., ա, բ, գ, ..., ղը, ղթ, ճ).",
            "type": "value",
            "value": "lower-armenian"
          },
          {
            "name": "bengali",
            "prose": "Bengali numbering (e.g., ১, ২, ৩, ..., ৯৮, ৯৯, ১০০).",
            "type": "value",
            "value": "bengali"
          },
          {
            "name": "cambodian",
            "prose": "Cambodian/Khmer numbering (e.g., ១, ២, ៣, ..., ៩៨, ៩៩, ១០០).",
            "type": "value",
            "value": "cambodian"
          },
          {
            "name": "khmer",
            "prose": "Cambodian/Khmer numbering (e.g., ១, ២, ៣, ..., ៩៨, ៩៩, ១០០).",
            "type": "value",
            "value": "khmer"
          },
          {
            "name": "cjk-decimal",
            "prose": "Han decimal numbers (e.g., 一, 二, 三, ..., 九八, 九九, 一〇〇).",
            "type": "value",
            "value": "cjk-decimal"
          },
          {
            "name": "devanagari",
            "prose": "devanagari numbering (e.g., १, २, ३, ..., ९८, ९९, १००).",
            "type": "value",
            "value": "devanagari"
          },
          {
            "name": "georgian",
            "prose": "Traditional Georgian numbering (e.g., ა, ბ, გ, ..., ჟჱ, ჟთ, რ).",
            "type": "value",
            "value": "georgian"
          },
          {
            "name": "gujarati",
            "prose": "Gujarati numbering (e.g., ૧, ૨, ૩, ..., ૯૮, ૯૯, ૧૦૦).",
            "type": "value",
            "value": "gujarati"
          },
          {
            "name": "gurmukhi",
            "prose": "Gurmukhi numbering (e.g., ੧, ੨, ੩, ..., ੯੮, ੯੯, ੧੦੦).",
            "type": "value",
            "value": "gurmukhi"
          },
          {
            "name": "hebrew",
            "prose": "Traditional Hebrew numbering (e.g., א‎, ב‎, ג‎, ..., צח‎, צט‎, ק‎).",
            "type": "value",
            "value": "hebrew"
          },
          {
            "name": "kannada",
            "prose": "Kannada numbering (e.g., ೧, ೨, ೩, ..., ೯೮, ೯೯, ೧೦೦).",
            "type": "value",
            "value": "kannada"
          },
          {
            "name": "lao",
            "prose": "Laotian numbering (e.g., ໑, ໒, ໓, ..., ໙໘, ໙໙, ໑໐໐).",
            "type": "value",
            "value": "lao"
          },
          {
            "name": "malayalam",
            "prose": "Malayalam numbering (e.g., ൧, ൨, ൩, ..., ൯൮, ൯൯, ൧൦൦).",
            "type": "value",
            "value": "malayalam"
          },
          {
            "name": "mongolian",
            "prose": "Mongolian numbering (e.g., ᠑, ᠒, ᠓, ..., ᠙᠘, ᠙᠙, ᠑᠐᠐).",
            "type": "value",
            "value": "mongolian"
          },
          {
            "name": "myanmar",
            "prose": "Myanmar (Burmese) numbering (e.g., ၁, ၂, ၃, ..., ၉၈, ၉၉, ၁၀၀).",
            "type": "value",
            "value": "myanmar"
          },
          {
            "name": "oriya",
            "prose": "Oriya numbering (e.g., ୧, ୨, ୩, ..., ୯୮, ୯୯, ୧୦୦).",
            "type": "value",
            "value": "oriya"
          },
          {
            "name": "persian",
            "prose": "Persian numbering (e.g., ۱, ۲, ۳, ۴, ..., ۹۸, ۹۹, ۱۰۰).",
            "type": "value",
            "value": "persian"
          },
          {
            "name": "lower-roman",
            "prose": "Lowercase ASCII Roman numerals (e.g., i, ii, iii, ..., xcviii, xcix, c).",
            "type": "value",
            "value": "lower-roman"
          },
          {
            "name": "upper-roman",
            "prose": "Uppercase ASCII Roman numerals (e.g., I, II, III, ..., XCVIII, XCIX, C).",
            "type": "value",
            "value": "upper-roman"
          },
          {
            "name": "tamil",
            "prose": "Tamil numbering (e.g., ௧, ௨, ௩, ..., ௯௮, ௯௯, ௧௦௦).",
            "type": "value",
            "value": "tamil"
          },
          {
            "name": "telugu",
            "prose": "Telugu numbering (e.g., ౧, ౨, ౩, ..., ౯౮, ౯౯, ౧౦౦).",
            "type": "value",
            "value": "telugu"
          },
          {
            "name": "thai",
            "prose": "Thai (Siamese) numbering (e.g., ๑, ๒, ๓, ..., ๙๘, ๙๙, ๑๐๐).",
            "type": "value",
            "value": "thai"
          },
          {
            "name": "tibetan",
            "prose": "Tibetan numbering (e.g., ༡, ༢, ༣, ..., ༩༨, ༩༩, ༡༠༠).",
            "type": "value",
            "value": "tibetan"
          },
          {
            "name": "lower-alpha",
            "prose": "Lowercase ASCII letters (e.g., a, b, c, ..., z, aa, ab).",
            "type": "value",
            "value": "lower-alpha"
          },
          {
            "name": "lower-latin",
            "prose": "Lowercase ASCII letters (e.g., a, b, c, ..., z, aa, ab).",
            "type": "value",
            "value": "lower-latin"
          },
          {
            "name": "upper-alpha",
            "prose": "Uppercase ASCII letters (e.g., A, B, C, ..., Z, AA, AB).",
            "type": "value",
            "value": "upper-alpha"
          },
          {
            "name": "upper-latin",
            "prose": "Uppercase ASCII letters (e.g., A, B, C, ..., Z, AA, AB).",
            "type": "value",
            "value": "upper-latin"
          },
          {
            "name": "lower-greek",
            "prose": "Lowercase classical Greek (e.g., α, β, γ, ..., ω, αα, αβ).",
            "type": "value",
            "value": "lower-greek"
          },
          {
            "name": "hiragana",
            "prose": "Dictionary-order hiragana lettering (e.g., あ, い, う, ..., ん, ああ, あい).",
            "type": "value",
            "value": "hiragana"
          },
          {
            "name": "hiragana-iroha",
            "prose": "Iroha-order hiragana lettering (e.g., い, ろ, は, ..., す, いい, いろ).",
            "type": "value",
            "value": "hiragana-iroha"
          },
          {
            "name": "katakana",
            "prose": "Dictionary-order katakana lettering (e.g., ア, イ, ウ, ..., ン, アア, アイ).",
            "type": "value",
            "value": "katakana"
          },
          {
            "name": "katakana-iroha",
            "prose": "Iroha-order katakana lettering (e.g., イ, ロ, ハ, ..., ス, イイ, イロ)",
            "type": "value",
            "value": "katakana-iroha"
          },
          {
            "name": "disc",
            "prose": "A filled circle, similar to • U+2022 BULLET.",
            "type": "value",
            "value": "disc"
          },
          {
            "name": "circle",
            "prose": "A hollow circle, similar to ◦ U+25E6 WHITE BULLET.",
            "type": "value",
            "value": "circle"
          },
          {
            "name": "square",
            "prose": "A filled square, similar to ▪ U+25AA BLACK SMALL SQUARE.",
            "type": "value",
            "value": "square"
          },
          {
            "name": "disclosure-open",
            "prose": "Symbols appropriate for indicating an open or closed disclosure widget, such as the HTML details element.",
            "type": "value",
            "value": "disclosure-open"
          },
          {
            "name": "disclosure-closed",
            "prose": "Symbols appropriate for indicating an open or closed disclosure widget, such as the HTML details element.",
            "type": "value",
            "value": "disclosure-closed"
          },
          {
            "name": "cjk-earthly-branch",
            "prose": "Han \"Earthly Branch\" ordinals (e.g., 子, 丑, 寅, ..., 亥).",
            "type": "value",
            "value": "cjk-earthly-branch"
          },
          {
            "name": "cjk-heavenly-stem",
            "prose": "Han \"Heavenly Stem\" ordinals (e.g., 甲, 乙, 丙, ..., 癸)",
            "type": "value",
            "value": "cjk-heavenly-stem"
          },
          {
            "name": "korean-hangul-formal",
            "prose": "Korean Hangul numbering (e.g., 일천일백일십일)",
            "type": "value",
            "value": "korean-hangul-formal"
          },
          {
            "name": "korean-hanja-informal",
            "prose": "Informal Korean Hanja numbering (e.g., 千百十一)",
            "type": "value",
            "value": "korean-hanja-informal"
          },
          {
            "name": "korean-hanja-formal",
            "prose": "Formal Korean Han (Hanja) numbering (e.g., 壹仟壹百壹拾壹)",
            "type": "value",
            "value": "korean-hanja-formal"
          },
          {
            "name": "ethiopic-numeric",
            "prose": "The ethiopic-numeric counter style is defined for all positive non-zero numbers. The following algorithm converts decimal digits to ethiopic numbers:",
            "type": "value",
            "value": "ethiopic-numeric"
          }
        ]
      },
      {
        "name": "<symbol>",
        "type": "type",
        "value": "<string> | <image> | <custom-ident>"
      },
      {
        "name": "symbols()",
        "type": "function",
        "value": "symbols( <symbols-type>? [ <string> | <image> ]+ )"
      },
      {
        "name": "<symbols-type>",
        "type": "type",
        "value": "cyclic | numeric | alphabetic | symbolic | fixed"
      },
      {
        "name": "<counter-style>",
        "type": "type",
        "value": "<counter-style-name> | <symbols()>",
        "values": [
          {
            "name": "japanese-informal",
            "prose": "Informal Japanese Kanji numbering (e.g., 千百十一)",
            "type": "value",
            "value": "japanese-informal"
          },
          {
            "name": "japanese-formal",
            "prose": "Formal Japanese Kanji numbering (e.g. 壱阡壱百壱拾壱)",
            "type": "value",
            "value": "japanese-formal"
          },
          {
            "name": "simp-chinese-informal",
            "prose": "Simplified Chinese informal numbering (e.g., 一千一百一十一)",
            "type": "value",
            "value": "simp-chinese-informal"
          },
          {
            "name": "simp-chinese-formal",
            "prose": "Simplified Chinese formal numbering (e.g. 壹仟壹佰壹拾壹)",
            "type": "value",
            "value": "simp-chinese-formal"
          },
          {
            "name": "trad-chinese-informal",
            "prose": "Traditional Chinese informal numbering (e.g., 一千一百一十一)",
            "type": "value",
            "value": "trad-chinese-informal"
          },
          {
            "name": "trad-chinese-formal",
            "prose": "Traditional Chinese formal numbering (e.g., 壹仟壹佰壹拾壹)",
            "type": "value",
            "value": "trad-chinese-formal"
          },
          {
            "name": "cjk-ideographic",
            "prose": "This counter style is identical to trad-chinese-informal. (It exists for legacy reasons.)",
            "type": "value",
            "value": "cjk-ideographic"
          }
        ]
      }
    ]
  },
  "css-display": {
    "spec": {
      "title": "CSS Display Module Level 4",
      "url": "https://drafts.csswg.org/css-display-4/"
    },
    "properties": [
      {
        "name": "display",
        "value": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
        "initial": "inline",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "a pair of keywords representing the inner and outer display types plus optional list-item flag, or a <display-internal> or <display-box> keyword; see prose in a variety of specs for computation rules",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "list-item",
            "prose": "The list-item keyword causes the element to generate a ::marker pseudo-element [CSS-PSEUDO-4] with the content specified by its list-style properties (CSS 2.1§12.5 Lists) [CSS2] together with a principal box of the specified type for its own contents.",
            "type": "value",
            "value": "list-item"
          }
        ],
        "styleDeclaration": [
          "display"
        ]
      },
      {
        "name": "order",
        "value": "[ <'layout-order'> <'reading-order'>? ] | [ [ reading || layout ] && <integer> ]",
        "initial": "see individual properties",
        "appliesTo": "flex items and grid items",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<integer>",
            "prose": "If one integer and no keyword is specified, then sets layout-order to the specified integer, and sets reading-order to its initial value. If two integers are specified, the first sets layout-order and the second sets reading-order. Otherwise sets the appropriate longhand(s) to the specified integer(s).",
            "type": "value",
            "value": "<integer>"
          },
          {
            "name": "layout",
            "prose": "Indicates setting layout-order to the specified integer. If reading is not specified, reading-order is set to its initial value.",
            "type": "value",
            "value": "layout"
          },
          {
            "name": "reading",
            "prose": "Indicates setting reading-order to the specified integer. If layout is not specified, layout-order is set to its initial value.",
            "type": "value",
            "value": "reading"
          }
        ],
        "styleDeclaration": [
          "order"
        ]
      },
      {
        "name": "reading-order",
        "value": "<integer>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<integer>",
            "prose": "The reading-order property controls the order in which elements are rendered to speech or are navigated to when using (linear) sequention navigation methods. It takes a single <integer> value, which specifies which ordinal group the item belongs to. Sibling elements are ordered starting from the lowest numbered ordinal group and going up; elements with the same ordinal group are keep the order they appear in the source document.",
            "type": "value",
            "value": "<integer>"
          }
        ],
        "styleDeclaration": [
          "reading-order",
          "readingOrder"
        ]
      },
      {
        "name": "layout-order",
        "value": "<integer>",
        "initial": "0",
        "appliesTo": "flex items and grid items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<integer>",
            "prose": "Specifically, the layout-order property controls the order in which flex items or grid items appear within their container by assigning them to the ordinal groups, as specified by its <integer> value.",
            "type": "value",
            "value": "<integer>"
          }
        ],
        "styleDeclaration": [
          "layout-order",
          "layoutOrder"
        ]
      },
      {
        "name": "visibility",
        "value": "visible | hidden | collapse",
        "initial": "visible",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "visible",
            "prose": "The generated box is visible, as normal.",
            "type": "value",
            "value": "visible"
          },
          {
            "name": "hidden",
            "prose": "Any boxes generated by the element are invisible. Descendants of the element can, however, be visible if they have visibility: visible.",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "collapse",
            "prose": "Indicates that the box is collapsed, which can cause it to take up less space than otherwise in a formatting-context–specific way. See dynamic row and column effects in tables [CSS2] and collapsed flex items in flex layout [CSS-FLEXBOX-1]. In all other cases, however, (i.e. unless otherwise specified) this simply makes the box invisible, just like hidden.",
            "type": "value",
            "value": "collapse"
          }
        ],
        "styleDeclaration": [
          "visibility"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<display-outside>",
        "type": "type",
        "value": "block | inline | run-in",
        "values": [
          {
            "name": "block",
            "prose": "The element generates a box that is block-level when placed in flow layout. [CSS2]",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "The element generates a box that is inline-level when placed in flow layout. [CSS2]",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "run-in",
            "prose": "The element generates an run-in box, which is a type of inline-level box with special behavior that attempts to merge it into a subsequent block container. See § 5 Run-In Layout for details.",
            "type": "value",
            "value": "run-in"
          }
        ]
      },
      {
        "name": "<display-inside>",
        "type": "type",
        "value": "flow | flow-root | table | flex | grid | ruby",
        "values": [
          {
            "name": "flow",
            "prose": "The element lays out its contents using flow layout (block-and-inline layout). If its outer display type is inline or run-in, and it is participating in a block or inline formatting context, then it generates an inline box. Otherwise it generates a block container box. Depending on the value of other properties (such as position, float, or overflow) and whether it is itself participating in a block or inline formatting context, it either establishes a new block formatting context for its contents or integrates its contents into its parent formatting context. See CSS2.1 Chapter 9. [CSS2] A block container that establishes a new block formatting context is considered to have a used inner display type of flow-root.",
            "type": "value",
            "value": "flow"
          },
          {
            "name": "flow-root",
            "prose": "The element generates a block container box, and lays out its contents using flow layout. It always establishes a new block formatting context for its contents. [CSS2]",
            "type": "value",
            "value": "flow-root"
          },
          {
            "name": "table",
            "prose": "The element generates a principal table wrapper box that establishes a block formatting context, and which contains an additionally-generated table grid box that establishes a table formatting context. [CSS2]",
            "type": "value",
            "value": "table"
          },
          {
            "name": "flex",
            "prose": "The element generates a principal flex container box and establishes a flex formatting context. [CSS-FLEXBOX-1]",
            "type": "value",
            "value": "flex"
          },
          {
            "name": "grid",
            "prose": "The element generates a principal grid container box, and establishes a grid formatting context. [CSS-GRID-1] (Grids using subgrid might not generate a new grid formatting context; see [CSS-GRID-2] for details.)",
            "type": "value",
            "value": "grid"
          },
          {
            "name": "ruby",
            "prose": "The element generates a ruby container box and establishes a ruby formatting context in addition to integrating its base-level contents into its parent formatting context (if it is inline) or generating a wrapper box of the appropriate outer display type (if it is not). [CSS-RUBY-1]",
            "type": "value",
            "value": "ruby"
          }
        ]
      },
      {
        "name": "<display-listitem>",
        "type": "type",
        "value": "<display-outside>? && [ flow | flow-root ]? && list-item"
      },
      {
        "name": "<display-internal>",
        "type": "type",
        "value": "table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container",
        "values": [
          {
            "name": "table-row-group",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-row-group"
          },
          {
            "name": "table-header-group",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-header-group"
          },
          {
            "name": "table-footer-group",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-footer-group"
          },
          {
            "name": "table-row",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-row"
          },
          {
            "name": "table-cell",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-cell"
          },
          {
            "name": "table-column-group",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-column-group"
          },
          {
            "name": "table-column",
            "prose": "The element is an internal table element. It generates the appropriate internal table box which participates in a table formatting context. See CSS2§17.2 [CSS2]. table-cell boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-column"
          },
          {
            "name": "table-caption",
            "prose": "The element generates a table caption box, which is a block box with special behavior with respect to table and table wrapper boxes. See CSS2§17.2 [CSS2]. table-caption boxes have a flow-root inner display type.",
            "type": "value",
            "value": "table-caption"
          },
          {
            "name": "ruby-base",
            "prose": "The element is an internal ruby element. It generates the appropriate internal ruby box which participates in a ruby formatting context. [CSS-RUBY-1] ruby-base and ruby-text have a flow inner display type.",
            "type": "value",
            "value": "ruby-base"
          },
          {
            "name": "ruby-text",
            "prose": "The element is an internal ruby element. It generates the appropriate internal ruby box which participates in a ruby formatting context. [CSS-RUBY-1] ruby-base and ruby-text have a flow inner display type.",
            "type": "value",
            "value": "ruby-text"
          },
          {
            "name": "ruby-base-container",
            "prose": "The element is an internal ruby element. It generates the appropriate internal ruby box which participates in a ruby formatting context. [CSS-RUBY-1] ruby-base and ruby-text have a flow inner display type.",
            "type": "value",
            "value": "ruby-base-container"
          },
          {
            "name": "ruby-text-container",
            "prose": "The element is an internal ruby element. It generates the appropriate internal ruby box which participates in a ruby formatting context. [CSS-RUBY-1] ruby-base and ruby-text have a flow inner display type.",
            "type": "value",
            "value": "ruby-text-container"
          }
        ]
      },
      {
        "name": "<display-box>",
        "type": "type",
        "value": "contents | none",
        "values": [
          {
            "name": "contents",
            "prose": "The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes and text runs as normal. For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents (including both its source-document children and its pseudo-elements, such as ::before and ::after pseudo-elements, which are generated before/after the element’s children as normal). This value computes to display: none on replaced elements and other elements whose rendering is not entirely controlled by CSS; see Appendix B: Effects of display: contents on Unusual Elements for details.",
            "type": "value",
            "value": "contents"
          },
          {
            "name": "none",
            "prose": "The element and its descendants generate no boxes or text runs. Similarly, if a text node is defined to behave as display: none, it generates no text runs.",
            "type": "value",
            "value": "none"
          }
        ]
      },
      {
        "name": "<display-legacy>",
        "type": "type",
        "value": "inline-block | inline-table | inline-flex | inline-grid",
        "values": [
          {
            "name": "inline-block",
            "prose": "Computes to inline flow-root.",
            "type": "value",
            "value": "inline-block"
          },
          {
            "name": "inline-table",
            "prose": "Computes to inline table.",
            "type": "value",
            "value": "inline-table"
          },
          {
            "name": "inline-flex",
            "prose": "Computes to inline flex.",
            "type": "value",
            "value": "inline-flex"
          },
          {
            "name": "inline-grid",
            "prose": "Computes to inline grid.",
            "type": "value",
            "value": "inline-grid"
          }
        ]
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "list-item",
        "prose": "The list-item keyword causes the element to generate a ::marker pseudo-element [CSS-PSEUDO-4] with the content specified by its list-style properties (CSS 2.1§12.5 Lists) [CSS2] together with a principal box of the specified type for its own contents.",
        "type": "value",
        "value": "list-item",
        "for": "<display-list-item>"
      }
    ]
  },
  "css-easing": {
    "spec": {
      "title": "CSS Easing Functions Level 2",
      "url": "https://drafts.csswg.org/css-easing-2/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<easing-function>",
        "value": "linear | <linear-easing-function> | <cubic-bezier-easing-function> | <step-easing-function>",
        "type": "type",
        "values": [
          {
            "name": "linear",
            "prose": "The linear keyword produces a linear easing function with two points:",
            "type": "value",
            "value": "linear"
          }
        ]
      },
      {
        "name": "<linear-easing-function>",
        "type": "type",
        "value": "linear(<linear-stop-list>)"
      },
      {
        "name": "linear()",
        "value": "linear(<linear-stop-list>)",
        "type": "function"
      },
      {
        "name": "<linear-stop-list>",
        "type": "type",
        "value": "[ <linear-stop> ]#"
      },
      {
        "name": "<linear-stop>",
        "type": "type",
        "value": "<number> && <linear-stop-length>?"
      },
      {
        "name": "<linear-stop-length>",
        "type": "type",
        "value": "<percentage>{1,2}"
      },
      {
        "name": "<cubic-bezier-easing-function>",
        "value": "ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number [0,1]>, <number>, <number [0,1]>, <number>)",
        "type": "type",
        "values": [
          {
            "name": "ease",
            "prose": "Equivalent to cubic-bezier(0.25, 0.1, 0.25, 1).",
            "type": "value",
            "value": "ease"
          },
          {
            "name": "ease-in",
            "prose": "Equivalent to cubic-bezier(0.42, 0, 1, 1).",
            "type": "value",
            "value": "ease-in"
          },
          {
            "name": "ease-out",
            "prose": "Equivalent to cubic-bezier(0, 0, 0.58, 1).",
            "type": "value",
            "value": "ease-out"
          },
          {
            "name": "ease-in-out",
            "prose": "Equivalent to cubic-bezier(0.42, 0, 0.58, 1).",
            "type": "value",
            "value": "ease-in-out"
          },
          {
            "name": "cubic-bezier()",
            "value": "cubic-bezier(<number [0,1]>, <number>, <number [0,1]>, <number>)",
            "type": "function"
          }
        ]
      },
      {
        "name": "<step-easing-function>",
        "value": "step-start | step-end | steps(<integer>[, <step-position>]?)",
        "type": "type",
        "values": [
          {
            "name": "step-start",
            "prose": "Computes to steps(1, start)",
            "type": "value",
            "value": "step-start"
          },
          {
            "name": "step-end",
            "prose": "Computes to steps(1, end) Example step easing function keyword values.",
            "type": "value",
            "value": "step-end"
          },
          {
            "name": "steps()",
            "value": "steps(<integer>[, <step-position> ]?)",
            "type": "function",
            "values": [
              {
                "name": "jump-start",
                "prose": "The first rise occurs at input progress value of 0.",
                "type": "value",
                "value": "jump-start"
              },
              {
                "name": "jump-end",
                "prose": "The last rise occurs at input progress value of 1.",
                "type": "value",
                "value": "jump-end"
              },
              {
                "name": "jump-none",
                "prose": "All rises occur within the range (0, 1).",
                "type": "value",
                "value": "jump-none"
              },
              {
                "name": "jump-both",
                "prose": "The first rise occurs at input progress value of 0 and the last rise occurs at input progress value of 1.",
                "type": "value",
                "value": "jump-both"
              },
              {
                "name": "start",
                "prose": "Behaves as jump-start.",
                "type": "value",
                "value": "start"
              },
              {
                "name": "end",
                "prose": "Behaves as jump-end.",
                "type": "value",
                "value": "end"
              }
            ]
          }
        ]
      },
      {
        "name": "<step-position>",
        "value": "jump-start | jump-end | jump-none | jump-both | start | end",
        "type": "type"
      }
    ]
  },
  "css-env": {
    "spec": {
      "title": "CSS Environment Variables Module Level 1",
      "url": "https://drafts.csswg.org/css-env-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "env()",
        "type": "function",
        "value": "env( <custom-ident> <integer [0,∞]>*, <declaration-value>? )",
        "values": [
          {
            "name": "safe-area-inset-top",
            "type": "value",
            "value": "safe-area-inset-top"
          },
          {
            "name": "safe-area-inset-right",
            "type": "value",
            "value": "safe-area-inset-right"
          },
          {
            "name": "safe-area-inset-bottom",
            "type": "value",
            "value": "safe-area-inset-bottom"
          },
          {
            "name": "safe-area-inset-left",
            "type": "value",
            "value": "safe-area-inset-left"
          },
          {
            "name": "viewport-segment-width",
            "type": "value",
            "value": "viewport-segment-width"
          },
          {
            "name": "viewport-segment-height",
            "type": "value",
            "value": "viewport-segment-height"
          },
          {
            "name": "viewport-segment-top",
            "type": "value",
            "value": "viewport-segment-top"
          },
          {
            "name": "viewport-segment-left",
            "type": "value",
            "value": "viewport-segment-left"
          },
          {
            "name": "viewport-segment-bottom",
            "type": "value",
            "value": "viewport-segment-bottom"
          },
          {
            "name": "viewport-segment-right",
            "type": "value",
            "value": "viewport-segment-right"
          }
        ]
      }
    ]
  },
  "css-exclusions": {
    "spec": {
      "title": "CSS Exclusions Module Level 1",
      "url": "https://drafts.csswg.org/css-exclusions-1/"
    },
    "properties": [
      {
        "name": "wrap-flow",
        "value": "auto | both | start | end | minimum | maximum | clear",
        "initial": "auto",
        "appliesTo": "block-level elements.",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified except for element’s whose float computed value is not none, in which case the computed value is auto.",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "No exclusion is created. Inline flow content interacts with the element as usual. In particular, if the element is a float (see [CSS21]), the behavior is unchanged.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "both",
            "prose": "Inline flow content can flow on all sides of the exclusion.",
            "type": "value",
            "value": "both"
          },
          {
            "name": "start",
            "prose": "Inline flow content can flow around the start edge of the exclusion area but must leave the area next to the end edge of the exclusion empty.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Inline flow content can flow around the end edge of the exclusion area but must leave the area next to the start edge of the exclusion empty.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "minimum",
            "prose": "Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content’s containing block, and must leave the other edge of the exclusion empty.",
            "type": "value",
            "value": "minimum"
          },
          {
            "name": "maximum",
            "prose": "Inline flow content can flow around the edge of the exclusion with the largest available space within the flow content’s containing block, and must leave the other edge of the exclusion empty.",
            "type": "value",
            "value": "maximum"
          },
          {
            "name": "clear",
            "prose": "Inline flow content can only flow before and after the exclusion in the flow content’s block direction and must leave the areas next to the start and end edges of the exclusion empty.",
            "type": "value",
            "value": "clear"
          }
        ],
        "styleDeclaration": [
          "wrap-flow",
          "wrapFlow"
        ]
      },
      {
        "name": "wrap-through",
        "value": "wrap | none",
        "initial": "wrap",
        "appliesTo": "block-level elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "wrap",
            "prose": "The element inherits its parent node’s wrapping context. Its descendant inline content wraps around exclusions defined outside the element.",
            "type": "value",
            "value": "wrap"
          },
          {
            "name": "none",
            "prose": "The element does not inherit its parent node’s wrapping context. Its descendants are only subject to exclusion areas defined inside the element.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "wrap-through",
          "wrapThrough"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-extensions": {
    "spec": {
      "title": "CSS Extensions",
      "url": "https://drafts.csswg.org/css-extensions-1/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@custom-selector",
        "descriptors": [],
        "value": "@custom-selector <custom-selector> <selector-list> ;"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<extension-name>",
        "prose": "All extensions defined in this specification use a common syntax for defining their ”names”: the <extension-name> production. An <extension-name> is any identifier that starts with two dashes (U+002D HYPHEN-MINUS), like --foo, or even exotic names like -- or ------. The CSS language will never use identifiers of this form for any language-defined purpose, so it’s safe to use them for author-defined purposes without ever having to worry about colliding with CSS-defined names.",
        "type": "type"
      },
      {
        "name": "<custom-selector>",
        "type": "type",
        "value": "<custom-arg>? : <extension-name> [ ( <custom-arg>+#? ) ]? ;"
      },
      {
        "name": "<custom-arg>",
        "type": "type",
        "value": "$ <ident-token> ;"
      }
    ]
  },
  "css-flexbox": {
    "spec": {
      "title": "CSS Flexible Box Layout Module Level 1",
      "url": "https://drafts.csswg.org/css-flexbox-1/"
    },
    "properties": [
      {
        "name": "flex-direction",
        "value": "row | row-reverse | column | column-reverse",
        "initial": "row",
        "appliesTo": "flex containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "row",
            "prose": "The flex container’s main axis has the same orientation as the inline axis of the current writing mode. The main-start and main-end directions are equivalent to the inline-start and inline-end directions, respectively, of the current writing mode.",
            "type": "value",
            "value": "row"
          },
          {
            "name": "row-reverse",
            "prose": "Same as row, except the main-start and main-end directions are swapped.",
            "type": "value",
            "value": "row-reverse"
          },
          {
            "name": "column",
            "prose": "The flex container’s main axis has the same orientation as the block axis of the current writing mode. The main-start and main-end directions are equivalent to the block-start and block-end directions, respectively, of the current writing mode.",
            "type": "value",
            "value": "column"
          },
          {
            "name": "column-reverse",
            "prose": "Same as column, except the main-start and main-end directions are swapped.",
            "type": "value",
            "value": "column-reverse"
          }
        ],
        "styleDeclaration": [
          "flex-direction",
          "flexDirection"
        ]
      },
      {
        "name": "flex-wrap",
        "value": "nowrap | wrap | wrap-reverse",
        "initial": "nowrap",
        "appliesTo": "flex containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "nowrap",
            "prose": "The flex container is single-line.",
            "type": "value",
            "value": "nowrap"
          },
          {
            "name": "wrap",
            "prose": "The flex container is multi-line.",
            "type": "value",
            "value": "wrap"
          },
          {
            "name": "wrap-reverse",
            "prose": "Same as wrap.",
            "type": "value",
            "value": "wrap-reverse"
          }
        ],
        "styleDeclaration": [
          "flex-wrap",
          "flexWrap"
        ]
      },
      {
        "name": "flex-flow",
        "value": "<'flex-direction'> || <'flex-wrap'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "flex-flow",
          "flexFlow"
        ]
      },
      {
        "name": "flex",
        "value": "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
        "initial": "0 1 auto",
        "appliesTo": "flex items",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "by computed value type",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<'flex-grow'>",
            "prose": "This <number [0,∞]> component sets flex-grow longhand and specifies the flex grow factor, which determines how much the flex item will grow relative to the rest of the flex items in the flex container when positive free space is distributed. When omitted, it is set to 1.",
            "type": "value",
            "value": "<'flex-grow'>"
          },
          {
            "name": "<'flex-shrink'>",
            "prose": "This <number [0,∞]> component sets flex-shrink longhand and specifies the flex shrink factor, which determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed. When omitted, it is set to 1.",
            "type": "value",
            "value": "<'flex-shrink'>"
          },
          {
            "name": "<'flex-basis'>",
            "prose": "This component sets the flex-basis longhand, which specifies the flex basis: the initial main size of the flex item, before free space is distributed according to the flex factors. <'flex-basis'> accepts the same values as the width and height properties (except that auto is treated differently) plus the content keyword: When omitted from the flex shorthand, its specified value is 0.",
            "type": "value",
            "value": "<'flex-basis'>"
          },
          {
            "name": "none",
            "prose": "The keyword none expands to 0 0 auto.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "flex"
        ]
      },
      {
        "name": "flex-grow",
        "value": "<number [0,∞]>",
        "initial": "0",
        "appliesTo": "flex items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified number",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<number>",
            "prose": "The flex-grow property sets the flex grow factor to the provided <number>. Negative values are not allowed.",
            "type": "value",
            "value": "<number>"
          }
        ],
        "styleDeclaration": [
          "flex-grow",
          "flexGrow"
        ]
      },
      {
        "name": "flex-shrink",
        "value": "<number [0,∞]>",
        "initial": "1",
        "appliesTo": "flex items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "number",
        "values": [
          {
            "name": "<number>",
            "prose": "The flex-shrink property sets the flex shrink factor to the provided <number>. Negative values are not allowed.",
            "type": "value",
            "value": "<number>"
          }
        ],
        "styleDeclaration": [
          "flex-shrink",
          "flexShrink"
        ]
      },
      {
        "name": "flex-basis",
        "value": "content | <'width'>",
        "initial": "auto",
        "appliesTo": "flex items",
        "inherited": "no",
        "percentages": "relative to the flex container’s inner main size",
        "computedValue": "specified keyword or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "When specified on a flex item, the auto keyword retrieves the value of the main size property as the used flex-basis. If that value is itself auto, then the used value is content.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "content",
            "prose": "Indicates an automatic size based on the flex item’s content. (This is typically equivalent to the max-content size, but with adjustments to handle preferred aspect ratios, intrinsic sizing constraints, and orthogonal flows; see details in § 9 Flex Layout Algorithm.)",
            "type": "value",
            "value": "content"
          }
        ],
        "styleDeclaration": [
          "flex-basis",
          "flexBasis"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "flex",
        "prose": "This value causes an element to generate a flex container box that is block-level when placed in flow layout.",
        "type": "value",
        "value": "flex",
        "for": "display"
      },
      {
        "msg": "Dangling value",
        "name": "inline-flex",
        "prose": "This value causes an element to generate a flex container box that is inline-level when placed in flow layout.",
        "type": "value",
        "value": "inline-flex",
        "for": "display"
      }
    ]
  },
  "css-fonts-5": {
    "spec": {
      "title": "CSS Fonts Module Level 5",
      "url": "https://drafts.csswg.org/css-fonts-5/"
    },
    "properties": [
      {
        "name": "font-size-adjust",
        "value": "none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]",
        "initial": "none",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the keyword none, or a pair of a metric keyword and a <number>",
        "canonicalOrder": "per grammar",
        "animationType": "discrete if the keywords differ, otherwise by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "No special font-size adjustment is applied.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "ex-height | cap-height | ch-width | ic-width | ic-height",
            "prose": "Specifies the font metric to normalize, defaulting to ex-height: w3c/csswg-drafts/6384[css-fonts-5] font-size-adjust with missing metrics",
            "type": "value",
            "value": "ex-height | cap-height | ch-width | ic-width | ic-height"
          },
          {
            "name": "ex-height",
            "prose": "Normalize the aspect value of the fonts, using the x-height divided by the font size.",
            "type": "value",
            "value": "ex-height"
          },
          {
            "name": "cap-height",
            "prose": "Normalize the cap-height of the fonts, using the cap-height by the font size.",
            "type": "value",
            "value": "cap-height"
          },
          {
            "name": "ch-width",
            "prose": "Normalize the horizontal narrow pitch of the fonts, using the advance width of “0” (ZERO, U+0030) divided by the font size.",
            "type": "value",
            "value": "ch-width"
          },
          {
            "name": "ic-width",
            "prose": "Normalize the horizontal wide pitch of the font, using the advance width of “水” (CJK water ideograph, U+6C34) divided by the font size.",
            "type": "value",
            "value": "ic-width"
          },
          {
            "name": "ic-height",
            "prose": "Normalize the vertical wide pitch of the font, using the advance height of “水” (CJK water ideograph, U+6C34) divided by the font size.",
            "type": "value",
            "value": "ic-height"
          },
          {
            "name": "<number>",
            "prose": "Each font’s used size is normalized to match the chosen font metric to this specified proportion of the computed font-size. In other words, for each glyph, the adjusted font size to use u is calculated as: u = ( m / m′ ) s where: s = computed 'font-size!!property' value m = metric as specified by the 'font-size-adjust' property m′ = metric as specified in the actual font u = adjusted font-size to use Negative values are invalid.",
            "type": "value",
            "value": "<number>"
          },
          {
            "name": "from-font",
            "prose": "Computes to the <number> corresponding to the specified metric of the first available font. w3c/csswg-drafts/6384[css-fonts-5] font-size-adjust with missing metrics",
            "type": "value",
            "value": "from-font"
          }
        ],
        "styleDeclaration": [
          "font-size-adjust",
          "fontSizeAdjust"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@font-face",
        "descriptors": [
          {
            "name": "font-size",
            "for": "@font-face",
            "value": "auto | [<number>]{1,2}",
            "initial": "normal",
            "values": [
              {
                "name": "auto",
                "prose": "The font matches any font size",
                "type": "value",
                "value": "auto"
              },
              {
                "name": "<number>",
                "prose": "If a single <number> is given the font matches that specific font size, only. If two <number>s are given, they specify a range of font sizes which will match.",
                "type": "value",
                "value": "<number>"
              }
            ]
          },
          {
            "name": "size-adjust",
            "for": "@font-face",
            "value": "<percentage [0,∞]>",
            "initial": "100%"
          },
          {
            "name": "ascent-override",
            "for": "@font-face",
            "value": "[ normal | <percentage [0,∞]> ]{1,2}",
            "initial": "normal"
          },
          {
            "name": "descent-override",
            "for": "@font-face",
            "value": "[ normal | <percentage [0,∞]> ]{1,2}",
            "initial": "normal"
          },
          {
            "name": "line-gap-override",
            "for": "@font-face",
            "value": "[ normal | <percentage [0,∞]> ]{1,2}",
            "initial": "normal"
          },
          {
            "name": "superscript-position-override",
            "for": "@font-face",
            "value": "[ normal | from-font | <percentage> ]{1,2}",
            "initial": "normal"
          },
          {
            "name": "subscript-position-override",
            "for": "@font-face",
            "value": "[ normal | from-font | <percentage> ]{1,2}",
            "initial": "normal"
          },
          {
            "name": "superscript-size-override",
            "for": "@font-face",
            "value": "[ normal | from-font | <percentage [0,∞]> ]{1,2}",
            "initial": "normal"
          },
          {
            "name": "subscript-size-override",
            "for": "@font-face",
            "value": "[ normal | from-font | <percentage [0,∞]> ]{1,2}",
            "initial": "normal"
          }
        ]
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<font-format>",
        "type": "type",
        "value": "[<string> | collection | embedded-opentype | opentype | svg | truetype | woff | woff2 ]"
      },
      {
        "name": "<font-tech>",
        "type": "type",
        "value": "[<font-features-tech> | <color-font-tech> | variations | palettes | incremental ]"
      },
      {
        "name": "<font-features-tech>",
        "type": "type",
        "value": "[features-opentype | features-aat | features-graphite]"
      },
      {
        "name": "<color-font-tech>",
        "type": "type",
        "value": "[color-COLRv0 | color-COLRv1 | color-SVG | color-sbix | color-CBDT ]"
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "xxx",
        "prose": "Placeholder text for the xxx generic font family.",
        "type": "value",
        "value": "xxx",
        "for": "font-family"
      },
      {
        "msg": "Dangling value",
        "name": "xxx",
        "prose": "Placeholder text for the xxx generic font family.",
        "type": "value",
        "value": "xxx",
        "for": "<generic-family>"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The corresponding metric value is obtained from the font as usual, as if this descriptor were absent from the @font-face block.",
        "type": "value",
        "value": "normal",
        "for": "ascent-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The corresponding metric value is obtained from the font as usual, as if this descriptor were absent from the @font-face block.",
        "type": "value",
        "value": "normal",
        "for": "descent-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The corresponding metric value is obtained from the font as usual, as if this descriptor were absent from the @font-face block.",
        "type": "value",
        "value": "normal",
        "for": "line-gap-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "ascent-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "descent-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "line-gap-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The UA determines what metrics value to use, whether derived from the font or from some heuristic.",
        "type": "value",
        "value": "normal",
        "for": "superscript-position-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The UA determines what metrics value to use, whether derived from the font or from some heuristic.",
        "type": "value",
        "value": "normal",
        "for": "subscript-position-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The UA determines what metrics value to use, whether derived from the font or from some heuristic.",
        "type": "value",
        "value": "normal",
        "for": "superscript-size-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "The UA determines what metrics value to use, whether derived from the font or from some heuristic.",
        "type": "value",
        "value": "normal",
        "for": "subscript-size-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "from-font",
        "prose": "The corresponding metric in the font data is used, if any. (If the metric is missing, same as normal.)",
        "type": "value",
        "value": "from-font",
        "for": "superscript-position-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "from-font",
        "prose": "The corresponding metric in the font data is used, if any. (If the metric is missing, same as normal.)",
        "type": "value",
        "value": "from-font",
        "for": "subscript-position-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "from-font",
        "prose": "The corresponding metric in the font data is used, if any. (If the metric is missing, same as normal.)",
        "type": "value",
        "value": "from-font",
        "for": "superscript-size-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "from-font",
        "prose": "The corresponding metric in the font data is used, if any. (If the metric is missing, same as normal.)",
        "type": "value",
        "value": "from-font",
        "for": "subscript-size-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "superscript-position-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "subscript-position-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "superscript-size-override!!descriptor"
      },
      {
        "msg": "Dangling value",
        "name": "<percentage>",
        "prose": "The corresponding metric is replaced by the given percentage multiplied by the used font size.",
        "type": "value",
        "value": "<percentage>",
        "for": "subscript-size-override!!descriptor"
      }
    ]
  },
  "css-fonts": {
    "spec": {
      "title": "CSS Fonts Module Level 4",
      "url": "https://drafts.csswg.org/css-fonts-4/"
    },
    "properties": [
      {
        "name": "font-family",
        "value": "[ <family-name> | <generic-family> ]#",
        "initial": "depends on user agent",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "list, each item a string and/or <generic-family> keywords",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "font-family",
          "fontFamily"
        ]
      },
      {
        "name": "font-weight",
        "value": "<font-weight-absolute> | bolder | lighter",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "a number, see below",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<number [1,1000]>",
            "prose": "Each number indicates a weight that is at least as dark as its predecessor. Only values greater than or equal to 1, and less than or equal to 1000, are valid, and all other values are invalid. Numeric values typically correspond to the commonly used weight names below. 100 - Thin 200 - Extra Light (Ultra Light) 300 - Light 400 - Normal 500 - Medium 600 - Semi Bold (Demi Bold) 700 - Bold 800 - Extra Bold (Ultra Bold) 900 - Black (Heavy)",
            "type": "value",
            "value": "<number [1,1000]>"
          },
          {
            "name": "normal",
            "prose": "Same as 400.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "bold",
            "prose": "Same as 700.",
            "type": "value",
            "value": "bold"
          },
          {
            "name": "bolder",
            "prose": "Specifies a bolder weight than the inherited value. See § 2.2.1 Relative Weights.",
            "type": "value",
            "value": "bolder"
          },
          {
            "name": "lighter",
            "prose": "Specifies a lighter weight than the inherited value. See § 2.2.1 Relative Weights.",
            "type": "value",
            "value": "lighter"
          }
        ],
        "styleDeclaration": [
          "font-weight",
          "fontWeight"
        ]
      },
      {
        "name": "font-stretch",
        "value": "normal | <percentage [0,∞]> | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "Not resolved",
        "computedValue": "a percentage, see below",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "ultra-condensed",
            "type": "value",
            "value": "ultra-condensed"
          },
          {
            "name": "extra-condensed",
            "type": "value",
            "value": "extra-condensed"
          },
          {
            "name": "condensed",
            "type": "value",
            "value": "condensed"
          },
          {
            "name": "semi-condensed",
            "type": "value",
            "value": "semi-condensed"
          },
          {
            "name": "normal",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "semi-expanded",
            "type": "value",
            "value": "semi-expanded"
          },
          {
            "name": "expanded",
            "type": "value",
            "value": "expanded"
          },
          {
            "name": "extra-expanded",
            "type": "value",
            "value": "extra-expanded"
          },
          {
            "name": "ultra-expanded",
            "type": "value",
            "value": "ultra-expanded"
          },
          {
            "name": "<percentage [0,∞]>",
            "prose": "<percentage [0,∞]> values represent the fractional width of the glyphs, with 100% representing “normal” glyph widths (as defined by the font designer). Values less than 0% are invalid.",
            "type": "value",
            "value": "<percentage [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "font-stretch",
          "fontStretch"
        ]
      },
      {
        "name": "font-style",
        "value": "normal | italic | oblique <angle [-90deg,90deg]>?",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword specified, plus angle in degrees if specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type; normal animates as oblique 0deg",
        "values": [
          {
            "name": "normal",
            "prose": "Matches against a face that is classified as a normal face, one that is neither italic or obliqued. This represents an oblique value of \"0\".",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "italic",
            "prose": "Matches against a font that is labeled as an italic face, or an oblique face if one does not exist.",
            "type": "value",
            "value": "italic"
          },
          {
            "name": "oblique <angle [-90deg,90deg]>?",
            "prose": "Controls matching against an oblique face. Positive angles represent a clockwise slant; negative angles represent a counter-clockwise slant. The lack of an <angle> represents 14deg. (Note that a font might internally provide its own mapping for \"oblique\", but the mapping within the font is disregarded.) Fractional and negative values are accepted; however, values less than -90deg or values greater than 90deg are invalid. If no oblique faces exist, and font-synthesis-style has the value auto, a synthetic oblique face will be generated.",
            "type": "value",
            "value": "oblique <angle [-90deg,90deg]>?"
          }
        ],
        "styleDeclaration": [
          "font-style",
          "fontStyle"
        ]
      },
      {
        "name": "font-size",
        "value": "<absolute-size> | <relative-size> | <length-percentage [0,∞]> | math",
        "initial": "medium",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "refer to parent element’s font size",
        "computedValue": "an absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<absolute-size>",
            "value": "<absolute-size>",
            "type": "value"
          },
          {
            "name": "<relative-size>",
            "value": "<relative-size>",
            "type": "value"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "A length value specifies an absolute font size (independent of the user agent’s font table). Negative lengths are invalid. A percentage value specifies an absolute font size relative to the parent element’s computed font-size. Negative percentages are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "math",
            "prose": "Special mathematical scaling rules must be applied when determining the computed value of the font-size property.",
            "type": "value",
            "value": "math"
          }
        ],
        "styleDeclaration": [
          "font-size",
          "fontSize"
        ]
      },
      {
        "name": "font-size-adjust",
        "value": "none | <number [0,∞]>",
        "initial": "none",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "a number or the keyword none",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "Do not preserve the font’s x-height.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<number [0,∞]>",
            "prose": "Specifies the aspect value used in the calculation below to calculate the adjusted font size: c = ( a / a' ) s where: s = font-size value a = aspect value as specified by the 'font-size-adjust' property a' = aspect value of actual font c = adjusted font-size to use Negative values are invalid. This value applies to any font that is selected but in typical usage it should be based on the aspect value of the first font in the font-family list. If this is specified accurately, the (a/a') term in the formula above is effectively 1 for the first font and no adjustment occurs. If the value is specified inaccurately, text rendered using the first font in the family list will display differently in older user agents that don’t support font-size-adjust.",
            "type": "value",
            "value": "<number [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "font-size-adjust",
          "fontSizeAdjust"
        ]
      },
      {
        "name": "font",
        "value": "[ [ <'font-style'> || <font-variant-css2> || <'font-weight'> || <font-stretch-css3> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
        "initial": "see individual properties",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "see individual properties",
        "values": [
          {
            "name": "caption",
            "prose": "The font used for captioned controls (e.g., buttons, drop-downs, etc.).",
            "type": "value",
            "value": "caption"
          },
          {
            "name": "icon",
            "prose": "The font used to label icons.",
            "type": "value",
            "value": "icon"
          },
          {
            "name": "menu",
            "prose": "The font used in menus (e.g., dropdown menus and menu lists).",
            "type": "value",
            "value": "menu"
          },
          {
            "name": "message-box",
            "prose": "The font used in dialog boxes.",
            "type": "value",
            "value": "message-box"
          },
          {
            "name": "small-caption",
            "prose": "The font used for labeling small controls.",
            "type": "value",
            "value": "small-caption"
          },
          {
            "name": "status-bar",
            "prose": "The font used in window status bars.",
            "type": "value",
            "value": "status-bar"
          }
        ],
        "styleDeclaration": [
          "font"
        ]
      },
      {
        "name": "font-synthesis-weight",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "auto",
            "prose": "Synthesis of bold faces is allowed",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Synthesis of bold faces is not allowed",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "font-synthesis-weight",
          "fontSynthesisWeight"
        ]
      },
      {
        "name": "font-synthesis-style",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "auto",
            "prose": "Synthesis of oblique faces is allowed",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Synthesis of oblique faces is not allowed",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "font-synthesis-style",
          "fontSynthesisStyle"
        ]
      },
      {
        "name": "font-synthesis-small-caps",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Synthesis of small caps faces is allowed",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Synthesis of small caps faces is not allowed",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "font-synthesis-small-caps",
          "fontSynthesisSmallCaps"
        ]
      },
      {
        "name": "font-synthesis",
        "value": "none | [ weight || style || small-caps]",
        "initial": "weight style small-caps",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "font-synthesis",
          "fontSynthesis"
        ]
      },
      {
        "name": "font-kerning",
        "value": "auto | normal | none",
        "initial": "auto",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Specifies that kerning is applied at the discretion of the user agent",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "normal",
            "prose": "Specifies that kerning is applied",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "none",
            "prose": "Specifies that kerning is not applied",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "font-kerning",
          "fontKerning"
        ]
      },
      {
        "name": "font-variant-ligatures",
        "value": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "A value of normal specifies that common default features are enabled, as described in detail in the next section. For OpenType fonts, common ligatures and contextual forms are on by default, discretionary and historical ligatures are not.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "none",
            "prose": "Specifies that all types of ligatures and contextual forms covered by this property are explicitly disabled. In situations where ligatures are not considered necessary, this may improve the speed of text rendering.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "common-ligatures",
            "prose": "Enables display of common ligatures (OpenType features: liga, clig). For OpenType fonts, common ligatures are enabled by default.",
            "type": "value",
            "value": "common-ligatures"
          },
          {
            "name": "no-common-ligatures",
            "prose": "Disables display of common ligatures (OpenType features: liga, clig).",
            "type": "value",
            "value": "no-common-ligatures"
          },
          {
            "name": "discretionary-ligatures",
            "prose": "Enables display of discretionary ligatures (OpenType feature: dlig). Which ligatures are discretionary or optional is decided by the type designer, so authors will need to refer to the documentation of a given font to understand which ligatures are considered discretionary.",
            "type": "value",
            "value": "discretionary-ligatures"
          },
          {
            "name": "no-discretionary-ligatures",
            "prose": "Disables display of discretionary ligatures (OpenType feature: dlig).",
            "type": "value",
            "value": "no-discretionary-ligatures"
          },
          {
            "name": "historical-ligatures",
            "prose": "Enables display of historical ligatures (OpenType feature: hlig).",
            "type": "value",
            "value": "historical-ligatures"
          },
          {
            "name": "no-historical-ligatures",
            "prose": "Disables display of historical ligatures (OpenType feature: hlig).",
            "type": "value",
            "value": "no-historical-ligatures"
          },
          {
            "name": "contextual",
            "prose": "Enables display of contextual alternates (OpenType feature: calt). Although not strictly a ligature feature, like ligatures this feature is commonly used to harmonize the shapes of glyphs with the surrounding context. For OpenType fonts, this feature is on by default.",
            "type": "value",
            "value": "contextual"
          },
          {
            "name": "no-contextual",
            "prose": "Disables display of contextual alternates (OpenType feature: calt).",
            "type": "value",
            "value": "no-contextual"
          }
        ],
        "styleDeclaration": [
          "font-variant-ligatures",
          "fontVariantLigatures"
        ]
      },
      {
        "name": "font-variant-position",
        "value": "normal | sub | super",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "None of the features listed below are enabled.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "sub",
            "prose": "Enables display of subscript variants (OpenType feature: subs).",
            "type": "value",
            "value": "sub"
          },
          {
            "name": "super",
            "prose": "Enables display of superscript variants (OpenType feature: sups).",
            "type": "value",
            "value": "super"
          }
        ],
        "styleDeclaration": [
          "font-variant-position",
          "fontVariantPosition"
        ]
      },
      {
        "name": "font-variant-caps",
        "value": "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "None of the features listed below are enabled.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "small-caps",
            "prose": "Enables display of small capitals (OpenType feature: smcp). Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.",
            "type": "value",
            "value": "small-caps"
          },
          {
            "name": "all-small-caps",
            "prose": "Enables display of small capitals for both upper and lowercase letters (OpenType features: c2sc, smcp).",
            "type": "value",
            "value": "all-small-caps"
          },
          {
            "name": "petite-caps",
            "prose": "Enables display of petite capitals (OpenType feature: pcap).",
            "type": "value",
            "value": "petite-caps"
          },
          {
            "name": "all-petite-caps",
            "prose": "Enables display of petite capitals for both upper and lowercase letters (OpenType features: c2pc, pcap).",
            "type": "value",
            "value": "all-petite-caps"
          },
          {
            "name": "unicase",
            "prose": "Enables display of mixture of small capitals for uppercase letters with normal lowercase letters (OpenType feature: unic).",
            "type": "value",
            "value": "unicase"
          },
          {
            "name": "titling-caps",
            "prose": "Enables display of titling capitals (OpenType feature: titl). Uppercase letter glyphs are often designed for use with lowercase letters. When used in all uppercase titling sequences they can appear too strong. Titling capitals are designed specifically for this situation.",
            "type": "value",
            "value": "titling-caps"
          }
        ],
        "styleDeclaration": [
          "font-variant-caps",
          "fontVariantCaps"
        ]
      },
      {
        "name": "font-variant-numeric",
        "value": "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "None of the features listed below are enabled.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "lining-nums",
            "prose": "Enables display of lining numerals (OpenType feature: lnum).",
            "type": "value",
            "value": "lining-nums"
          },
          {
            "name": "oldstyle-nums",
            "prose": "Enables display of old-style numerals (OpenType feature: onum).",
            "type": "value",
            "value": "oldstyle-nums"
          },
          {
            "name": "proportional-nums",
            "prose": "Enables display of proportional numerals (OpenType feature: pnum).",
            "type": "value",
            "value": "proportional-nums"
          },
          {
            "name": "tabular-nums",
            "prose": "Enables display of tabular numerals (OpenType feature: tnum).",
            "type": "value",
            "value": "tabular-nums"
          },
          {
            "name": "diagonal-fractions",
            "prose": "Enables display of lining diagonal fractions (OpenType feature: frac).",
            "type": "value",
            "value": "diagonal-fractions"
          },
          {
            "name": "stacked-fractions",
            "prose": "Enables display of lining stacked fractions (OpenType feature: afrc).",
            "type": "value",
            "value": "stacked-fractions"
          },
          {
            "name": "ordinal",
            "prose": "Enables display of letter forms used with ordinal numbers (OpenType feature: ordn).",
            "type": "value",
            "value": "ordinal"
          },
          {
            "name": "slashed-zero",
            "prose": "Enables display of slashed zeros (OpenType feature: zero).",
            "type": "value",
            "value": "slashed-zero"
          }
        ],
        "styleDeclaration": [
          "font-variant-numeric",
          "fontVariantNumeric"
        ]
      },
      {
        "name": "font-variant-alternates",
        "value": "normal | [ stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) ]",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "None of the features listed below are enabled.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "historical-forms",
            "prose": "Enables display of historical forms (OpenType feature: hist).",
            "type": "value",
            "value": "historical-forms"
          },
          {
            "name": "stylistic()",
            "value": "stylistic()",
            "type": "value"
          },
          {
            "name": "styleset()",
            "value": "styleset()",
            "type": "value"
          },
          {
            "name": "character-variant()",
            "value": "character-variant()",
            "type": "value"
          },
          {
            "name": "swash()",
            "value": "swash()",
            "type": "value"
          },
          {
            "name": "ornaments()",
            "value": "ornaments()",
            "type": "value"
          },
          {
            "name": "annotation()",
            "value": "annotation()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "font-variant-alternates",
          "fontVariantAlternates"
        ]
      },
      {
        "name": "font-variant-east-asian",
        "value": "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "None of the features listed below are enabled.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "jis78",
            "prose": "Enables rendering of JIS78 forms (OpenType feature: jp78).",
            "type": "value",
            "value": "jis78"
          },
          {
            "name": "jis83",
            "prose": "Enables rendering of JIS83 forms (OpenType feature: jp83).",
            "type": "value",
            "value": "jis83"
          },
          {
            "name": "jis90",
            "prose": "Enables rendering of JIS90 forms (OpenType feature: jp90).",
            "type": "value",
            "value": "jis90"
          },
          {
            "name": "jis04",
            "prose": "Enables rendering of JIS2004 forms (OpenType feature: jp04). The various JIS variants reflect the glyph forms defined in different Japanese national standards. Fonts generally include glyphs defined by the most recent national standard, but it’s sometimes necessary to use older variants, to match signage for example.",
            "type": "value",
            "value": "jis04"
          },
          {
            "name": "simplified",
            "prose": "Enables rendering of simplified forms (OpenType feature: smpl).",
            "type": "value",
            "value": "simplified"
          },
          {
            "name": "traditional",
            "prose": "Enables rendering of traditional forms (OpenType feature: trad).",
            "type": "value",
            "value": "traditional"
          },
          {
            "name": "full-width",
            "prose": "Enables rendering of full-width variants (OpenType feature: fwid).",
            "type": "value",
            "value": "full-width"
          },
          {
            "name": "proportional-width",
            "prose": "Enables rendering of proportionally-spaced variants (OpenType feature: pwid).",
            "type": "value",
            "value": "proportional-width"
          },
          {
            "name": "ruby",
            "prose": "Enables display of ruby variant glyphs (OpenType feature: ruby). Since ruby text is generally smaller than the associated body text, font designers can design special glyphs for use with ruby that are more readable than scaled down versions of the default glyphs. Only glyph selection is affected, there is no associated font scaling or other change that affects line layout. The red ruby text below is shown with default glyphs (top) and with ruby variant glyphs (bottom). Note the slight difference in stroke thickness.",
            "type": "value",
            "value": "ruby"
          }
        ],
        "styleDeclaration": [
          "font-variant-east-asian",
          "fontVariantEastAsian"
        ]
      },
      {
        "name": "font-variant",
        "value": "normal | none | [ [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ] || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || [ stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) ] || [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ] || [ <east-asian-variant-values> || <east-asian-width-values> || ruby ] || [ sub | super ] || [ text | emoji | unicode ] ]",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "The value normal resets all subproperties of font-variant to their initial value. The none value sets font-variant-ligatures to none and resets all other font feature properties to their initial value. Like other shorthands, using font-variant resets unspecified font-variant subproperties to their initial values.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "none",
            "prose": "The value normal resets all subproperties of font-variant to their initial value. The none value sets font-variant-ligatures to none and resets all other font feature properties to their initial value. Like other shorthands, using font-variant resets unspecified font-variant subproperties to their initial values.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "font-variant",
          "fontVariant"
        ]
      },
      {
        "name": "font-feature-settings",
        "value": "normal | <feature-tag-value>#",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "A value of normal means that no change in glyph selection or positioning occurs due to this property.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<feature-tag-value>",
            "type": "value",
            "value": "<string> [ <integer> | on | off ]?"
          }
        ],
        "styleDeclaration": [
          "font-feature-settings",
          "fontFeatureSettings"
        ]
      },
      {
        "name": "font-language-override",
        "value": "normal | <string>",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified string or the keyword none",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<string>",
            "prose": "single four-character case-sensitive OpenType language system tag, specifies the OpenType language system to be used instead of the language system implied by the language of the element. If the string is shorter than four characters, it is padded at the end with space (U+0020) characters such that the length is 4, before being matched.",
            "type": "value",
            "value": "<string>"
          }
        ],
        "styleDeclaration": [
          "font-language-override",
          "fontLanguageOverride"
        ]
      },
      {
        "name": "font-optical-sizing",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The user agent may modify the shape of glyphs based on the font-size and the pixel density of the screen. For OpenType and TrueType fonts using font variations, this is often done by using the \"opsz\" font variation.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "The user agent must not modify the shape of glyphs for optical size.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "font-optical-sizing",
          "fontOpticalSizing"
        ]
      },
      {
        "name": "font-variation-settings",
        "value": "normal | [ <string> <number>]#",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword normal or a list, each item a string paired with a number",
        "canonicalOrder": "per grammar",
        "animationType": "(see prose)",
        "styleDeclaration": [
          "font-variation-settings",
          "fontVariationSettings"
        ]
      },
      {
        "name": "font-palette",
        "value": "normal | light | dark | <palette-identifier>",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/a",
        "computedValue": "specified keyword or identifier",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "User-Agents display the color font with the default palette or default glyph colorisation. User-agents should take the computed value of the color property into consideration when a color font format requires use of the foreground color In the COLR [OPENTYPE] table, color index 0xFFFF should be rendered according the color property. For COLR/CPAL [OPENTYPE] fonts, font-palette: normal usually means rendering the font with the palette in the font at index 0.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "light",
            "prose": "Some color font formats include metadata marking certain palettes as applicable on a light (close to white) background. This keyword causes the user-agent to use the first available palette in the font file marked this way. If the font file format does not account for this metadata, or no palette in the font is marked this way, this value behaves as normal.",
            "type": "value",
            "value": "light"
          },
          {
            "name": "dark",
            "prose": "Some color font formats include metadata marking certain palettes as applicable on a dark (close to black) background. This keyword causes the user-agent to use the first available palette in the font file marked this way. If the font file format does not account for this metadata, or no palette in the font is marked this way, this value behaves as normal.",
            "type": "value",
            "value": "dark"
          },
          {
            "name": "<palette-identifier>",
            "prose": "This value identifies an CSS-defined palette to use. Users can define a palette by using the @font-palette-values rule. If no applicable @font-palette-values rule is present, this value behaves as normal. <palette-identifier> is parsed as a <dashed-ident>.",
            "type": "type"
          }
        ],
        "styleDeclaration": [
          "font-palette",
          "fontPalette"
        ]
      },
      {
        "name": "font-variant-emoji",
        "value": "normal | text | emoji | unicode",
        "initial": "normal",
        "appliesTo": "all elements and text",
        "inherited": "yes",
        "percentages": "N/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "User agents can choose to draw a Presentation Participating Code Point in either emoji style or text style. User agents typically follow platform conventions when performing this decision.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "text",
            "prose": "Code points are rendered as if U+FE0E VARIATION SELECTOR-15 was appended to every Presentation Participating Code Point.",
            "type": "value",
            "value": "text"
          },
          {
            "name": "emoji",
            "prose": "Code points are rendered as if U+FE0F VARIATION SELECTOR-16 was appended to every Presentation Participating Code Point.",
            "type": "value",
            "value": "emoji"
          },
          {
            "name": "unicode",
            "prose": "Code points are rendered in accordance with [UTS51] as either emoji-default, text-default, or text-only, depending on the values of the Emoji and Emoji_Presentation properties for each Presentation Participating Code Point. If present, FE0E VARIATION SELECTOR-15 and U+FE0F VARIATION SELECTOR-16 will override the default presentation of individual Presentation Participating Code Points.",
            "type": "value",
            "value": "unicode"
          }
        ],
        "styleDeclaration": [
          "font-variant-emoji",
          "fontVariantEmoji"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@font-face",
        "descriptors": [
          {
            "name": "font-family",
            "for": "@font-face",
            "value": "<family-name>",
            "initial": "N/A"
          },
          {
            "name": "src",
            "for": "@font-face",
            "value": "see prose",
            "initial": "N/A"
          },
          {
            "name": "font-style",
            "for": "@font-face",
            "value": "auto | normal | italic | oblique [ <angle>{1,2} ]?",
            "initial": "auto"
          },
          {
            "name": "font-weight",
            "for": "@font-face",
            "value": "auto | <font-weight-absolute>{1,2}",
            "initial": "auto"
          },
          {
            "name": "font-stretch",
            "for": "@font-face",
            "value": "auto | <'font-stretch'>{1,2}",
            "initial": "auto"
          },
          {
            "name": "unicode-range",
            "for": "@font-face",
            "value": "<urange>#",
            "initial": "U+0-10FFFF"
          },
          {
            "name": "font-feature-settings",
            "for": "@font-face",
            "value": "normal | <feature-tag-value>#",
            "initial": "normal"
          },
          {
            "name": "font-variation-settings",
            "for": "@font-face",
            "value": "normal | [ <string> <number>]#",
            "initial": "normal"
          },
          {
            "name": "font-named-instance",
            "for": "@font-face",
            "value": "auto | <string>",
            "initial": "auto"
          },
          {
            "name": "font-display",
            "for": "@font-face",
            "value": "auto | block | swap | fallback | optional",
            "initial": "auto",
            "values": [
              {
                "name": "auto",
                "prose": "The font display policy is user-agent-defined.",
                "type": "value",
                "value": "auto"
              },
              {
                "name": "block",
                "prose": "Gives the font face a short block period (3s is recommended in most cases) and an infinite swap period. This value must only be used when rendering text in a particular font is required for the page to be usable. It must only be used for small pieces of text. For example, badly designed \"icon fonts\" might associate a \"⎙\" (printer) icon with an unrelated character like \"P\", so if the text is displayed with a fallback font instead there will be confusing letters scattered around the page rather than the desired icon. In this case, temporary blank spots are better than using a fallback font. (However, the fallback font is used eventually, as having confusing letters scattered around the page is better than having links and such never show up at all.) A better solution is described in the Accessibility Considerations section.",
                "type": "value",
                "value": "block"
              },
              {
                "name": "swap",
                "prose": "Gives the font face an extremely small block period (100ms or less is recommended in most cases) and an infinite swap period. This value should only be used when rendering text in a particular font is very important for the page, but rendering in any font will still get a correct message across. It should only be used for small pieces of text. For example, if a website has a custom font for rendering their logo, rendering that logo correctly is fairly important for branding purposes, but displaying the logo in any font will at least get the point across without confusion.",
                "type": "value",
                "value": "swap"
              },
              {
                "name": "fallback",
                "prose": "Gives the font face an extremely small block period (100ms or less is recommended in most cases) and a short swap period (3s is recommended in most cases). This value should be used for body text, or any other text where the use of the chosen font is useful and desired, but it’s acceptable for the user to see the text in a fallback font. This value is appropriate to use for large pieces of text. For example, in large pieces of body text, it’s most important just to get the text rendered quickly, so the user can begin to read as quickly as possible. Further, once the user has started reading, they shouldn’t be disturbed by the text suddenly \"shifting\" as a new font is swapped in, as that’s distracting and annoying to re-find where one was in the text.",
                "type": "value",
                "value": "fallback"
              },
              {
                "name": "optional",
                "prose": "If the font can be loaded \"immediately\" (such that it’s available to be used for the \"first paint\" of the text), the font is used. Otherwise, the font is treated as if its block period and swap period both expired before it finished loading. If the font is not used due to this, the user agent may choose to abort the font download, or download it with a very low priority. If the user agent believes it would be useful for the user, it may avoid even starting the font download, and proceed immediately to using a fallback font. An optional font must never cause the layout of the page to \"jump\" as it loads in. A user agent may choose to slightly delay rendering an element using an optional font to give it time to load from a possibly-slow local cache, but once the text has been painted to the screen with a fallback font instead, it must not be rendered with the optional font for the rest of the page’s lifetime. This value should be used for body text, or any other text where the chosen font is purely a decorative \"nice-to-have\". It should be used anytime it is more important that the web page render quickly on first visit, than it is that the user wait a longer time to see everything perfect immediately. For example, body text is perfectly readable in one of the browser default fonts, though a downloadable font face might be more attractive and mesh with the site’s aesthetics better. First time visitors to a site generally care far more about the site being quickly usable than they do about the finer points of its display, and optional provides a good behavior for them. If they return later, the desired font faces might have finished downloading, giving them the \"intended\" experience without slowing down either their first or subsequent visits. Users on very slow connections might not ever receive the \"intended\" experience, but optional ensures they can actually use the site, rather than quitting and going elsewhere because the site takes too long to load.",
                "type": "value",
                "value": "optional"
              }
            ]
          },
          {
            "name": "font-language-override",
            "for": "@font-face",
            "value": "normal | <string>",
            "initial": "normal"
          },
          {
            "name": "ascent-override",
            "for": "@font-face",
            "value": "normal | <percentage [0,∞]>",
            "initial": "normal"
          },
          {
            "name": "descent-override",
            "for": "@font-face",
            "value": "normal | <percentage [0,∞]>",
            "initial": "normal"
          },
          {
            "name": "line-gap-override",
            "for": "@font-face",
            "value": "normal | <percentage [0,∞]>",
            "initial": "normal"
          }
        ],
        "value": "@font-face { <declaration-list> }"
      },
      {
        "name": "@font-feature-values",
        "descriptors": [
          {
            "name": "font-display",
            "for": "@font-feature-values",
            "value": "auto | block | swap | fallback | optional",
            "initial": "auto"
          }
        ],
        "value": "@font-feature-values <family-name># { <declaration-list> }"
      },
      {
        "name": "@font-palette-values",
        "prose": "The @font-palette-values rule defines a color palette and associates that color palette with a specific font. This allows a web author to select arbitrary colors to use inside a color font rather than being limited to the preexisting palettes inside font files. In addition, this rule’s association with a specific font allows a name of a palette to apply differently to different fonts, which allows similar colors to be used across multiple fonts when multiple fonts are used in an element (i.e. for font fallback).",
        "descriptors": [
          {
            "name": "font-family",
            "for": "@font-palette-values",
            "value": "<family-name>#",
            "initial": "N/A"
          },
          {
            "name": "base-palette",
            "for": "@font-palette-values",
            "value": "light | dark | <integer [0,∞]>",
            "initial": "N/A",
            "values": [
              {
                "name": "light",
                "prose": "Some color font formats include metadata marking certain palettes as applicable on a light (close to white) background. This keyword identifies the first available palette in the font file marked this way. If the font file format does not account for this metadata, or no palette in the font is marked this way, this value behaves as 0.",
                "type": "value",
                "value": "light"
              },
              {
                "name": "dark",
                "prose": "Some color font formats include metadata marking certain palettes as applicable on a dark (close to black) background. This keyword identifies the first available palette in the font file marked this way. If the font file format does not account for this metadata, or no palette in the font is marked this way, this value behaves as 0.",
                "type": "value",
                "value": "dark"
              },
              {
                "name": "<integer>",
                "prose": "Identifies a (zero-based) numerical palette index within the font.",
                "type": "type"
              }
            ]
          },
          {
            "name": "override-colors",
            "for": "@font-palette-values",
            "value": "[ <integer [0,∞]> <absolute-color-base> ]#",
            "initial": "N/A"
          }
        ],
        "value": "@font-palette-values <dashed-ident> { <declaration-list> }"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<family-name>",
        "prose": "The name of a font family, such as Helvetica or Verdana in the previous example.",
        "type": "type"
      },
      {
        "name": "<generic-family>",
        "prose": "Each <generic-family> keyword represents a generic font choice, and behaves as an alias for one or more locally-installed fonts belonging to the specified generic font category. A <generic-family> can thus be used as a reliable fallback for when an author’s more specific font choices are not available. Authors are encouraged to append a generic font family as a last alternative for improved robustness. Note that <generic-family> keywords cannot be quoted (otherwise they are interpreted as a <family-name>). The set of generic family keywords is defined in § 2.1.3 Generic font families.",
        "type": "type",
        "values": [
          {
            "name": "serif",
            "prose": "Serif fonts represent the formal text style for a script. This often means, but is not limited to, glyphs that have finishing strokes, flared or tapering ends, or have actual serifed endings (including slab serifs). Serif fonts are typically proportionately-spaced. They often display a greater variation between thick and thin strokes than fonts from the sans-serif generic font family. CSS uses the term \"serif\" to apply to a font for any script, although other names might be more familiar for particular scripts, such as Mincho (Japanese), Sung or Song (Chinese), Batang (Korean). For Arabic, the Naskh style would correspond to serif. This is due to its typographic role, rather than its design style. Any font that fits this typographic role may be used to represent the generic serif family. serif must always map to at least one matched font face. Sample serif fonts",
            "type": "value",
            "value": "serif"
          },
          {
            "name": "sans-serif",
            "prose": "Glyphs in sans-serif fonts, as the term is used in CSS, are generally low contrast (vertical and horizontal stems have the close to the same thickness) and have stroke endings that are plain (without any flaring, cross stroke, or other ornamentation). Sans-serif fonts are typically proportionately-spaced. They often have little variation between thick and thin strokes, compared to fonts from the serif family. CSS uses the term \"sans-serif\" to apply to a font for any script, although other names might be more familiar for particular scripts, such as Gothic (Japanese), Hei (Chinese), or Gulim (Korean). Any font that fits this typographic role may be used to represent the generic sans-serif family. sans-serif must always map to at least one matched font face. Sample sans-serif fonts",
            "type": "value",
            "value": "sans-serif"
          },
          {
            "name": "cursive",
            "prose": "Glyphs in cursive fonts generally use a more informal script style, and the result looks more like handwritten pen or brush writing than printed letterwork. For example, Kaiti (Chinese), which uses a brush-based style, would be classified as a CSS cursive font family. CSS uses the term \"cursive\" to apply to a font for any script, although other names such as Chancery, Brush, Swing and Script are also used in font names. Sample cursive fonts",
            "type": "value",
            "value": "cursive"
          },
          {
            "name": "fantasy",
            "prose": "Fantasy fonts are primarily decorative or expressive fonts that contain decorative or expressive representations of characters. These do not include Pi or Picture fonts which do not represent actual characters. Sample fantasy fonts",
            "type": "value",
            "value": "fantasy"
          },
          {
            "name": "monospace",
            "prose": "The sole criterion of a monospace font is that all glyphs have the same fixed width. This is often used to render samples of computer code. monospace must always map to at least one matched font face. Sample monospace fonts",
            "type": "value",
            "value": "monospace"
          },
          {
            "name": "system-ui",
            "prose": "This generic font family lets text render with the default user interface font on the platform on which the UA is running. A cross-platform UA should use different fonts on its different supported platforms. The purpose of system-ui is to allow web content to integrate with the look and feel of the native OS. As with other generic font families, the substitution of specific installed fonts for system-ui does not affect the computed style. <div id=\"system-text\" style=\"font-family: system-ui\"></div> ... window.getComputedStyle(document.getElementById(\"system-text\")).getPropertyValue(\"font-family\"); The script above should not have any knowledge of how system-ui is expanded to include a collection of system user interface fonts. In particular, the above script should yield a result of \"system-ui\" on every platform.",
            "type": "value",
            "value": "system-ui"
          },
          {
            "name": "emoji",
            "prose": "This font family is intended for use with emoji characters. Emoji are pictographs (pictorial symbols) that are typically presented in a colorful form and used inline in text. They represent things such as faces, weather, vehicles and buildings, food and drink, animals and plants, or icons that represent emotions, feelings, or activities.",
            "type": "value",
            "value": "emoji"
          },
          {
            "name": "math",
            "prose": "This font family is intended for use with mathematical expressions. Such fonts may include additional data (for example, the OpenType MATH table) to help with the hierarchical process of equation layout. In particular, they may contain stylistic and stretching glyph variants useful in setting mathematical equations.",
            "type": "value",
            "value": "math"
          },
          {
            "name": "fangsong",
            "prose": "This font family is used for Fang Song (仿宋) typefaces in Chinese. Fang Song is a relaxed, intermediate form between Song (serif) and Kai (cursive). Typically, the horizontal lines are tilted, the endpoint flourishes are smaller, and there is less variation in stroke width, compared to a Song style. Fang Song is often used for official Chinese Government documents.",
            "type": "value",
            "value": "fangsong"
          },
          {
            "name": "ui-serif",
            "prose": "This font family is used for the serif variant of the system’s user interface. The purpose of ui-serif is to allow web content to integrate with the look and feel of the native OS. Sample ui-serif font on macOS Catalina and iOS 13: New York",
            "type": "value",
            "value": "ui-serif"
          },
          {
            "name": "ui-sans-serif",
            "prose": "This font family is used for the sans-serif variant of the system’s user interface. The purpose of ui-sans-serif is to allow web content to integrate with the look and feel of the native OS. Sample ui-sans-serif font on macOS Catalina and iOS 13: San Francisco",
            "type": "value",
            "value": "ui-sans-serif"
          },
          {
            "name": "ui-monospace",
            "prose": "This font family is used for the monospaced variant of the system’s user interface. The purpose of ui-monospace is to allow web content to integrate with the look and feel of the native OS. Sample ui-monospace font on macOS Catalina and iOS 13: SF Mono",
            "type": "value",
            "value": "ui-monospace"
          },
          {
            "name": "ui-rounded",
            "prose": "This font family is used for the rounded variant of the system’s user interface. The purpose of ui-rounded is to allow web content to integrate with the look and feel of the native OS. Sample ui-rounded font on macOS Catalina and iOS 13: SF Rounded",
            "type": "value",
            "value": "ui-rounded"
          }
        ]
      },
      {
        "name": "<font-weight-absolute>",
        "type": "type",
        "value": "[normal | bold | <number [1,1000]>]"
      },
      {
        "name": "<font-variant-css2>",
        "type": "type",
        "value": "[normal | small-caps]"
      },
      {
        "name": "<font-stretch-css3>",
        "type": "type",
        "value": "[normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded]"
      },
      {
        "name": "<font-format>",
        "type": "type",
        "value": "[<string> | collection | embedded-opentype | opentype | svg | truetype | woff | woff2 ]"
      },
      {
        "name": "<font-tech>",
        "type": "type",
        "value": "[<font-features-tech> | <color-font-tech> | variations | palettes | incremental ]"
      },
      {
        "name": "<font-features-tech>",
        "type": "type",
        "value": "[features-opentype | features-aat | features-graphite]"
      },
      {
        "name": "<color-font-tech>",
        "type": "type",
        "value": "[color-COLRv0 | color-COLRv1 | color-SVG | color-sbix | color-CBDT ]"
      },
      {
        "name": "<common-lig-values>",
        "type": "type",
        "value": "[ common-ligatures | no-common-ligatures ]"
      },
      {
        "name": "<discretionary-lig-values>",
        "type": "type",
        "value": "[ discretionary-ligatures | no-discretionary-ligatures ]"
      },
      {
        "name": "<historical-lig-values>",
        "type": "type",
        "value": "[ historical-ligatures | no-historical-ligatures ]"
      },
      {
        "name": "<contextual-alt-values>",
        "type": "type",
        "value": "[ contextual | no-contextual ]"
      },
      {
        "name": "<numeric-figure-values>",
        "type": "type",
        "value": "[ lining-nums | oldstyle-nums ]"
      },
      {
        "name": "<numeric-spacing-values>",
        "type": "type",
        "value": "[ proportional-nums | tabular-nums ]"
      },
      {
        "name": "<numeric-fraction-values>",
        "type": "type",
        "value": "[ diagonal-fractions | stacked-fractions ]"
      },
      {
        "name": "<feature-value-name>",
        "type": "type",
        "value": "<ident>"
      },
      {
        "name": "<east-asian-variant-values>",
        "type": "type",
        "value": "[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]"
      },
      {
        "name": "<east-asian-width-values>",
        "type": "type",
        "value": "[ full-width | proportional-width ]"
      }
    ],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "<feature-value-block>",
        "value": "<font-feature-value-type> { <declaration-list> }"
      },
      {
        "msg": "Missing definition",
        "name": "<font-feature-value-type>",
        "value": "@stylistic | @historical-forms | @styleset | @character-variant | @swash | @ornaments | @annotation"
      },
      {
        "msg": "Dangling value",
        "name": "normal",
        "prose": "specifies that when rendering with OpenType fonts, the content language of the element is used to infer the OpenType language system",
        "type": "value",
        "value": "normal",
        "for": "font-language override"
      }
    ]
  },
  "css-gcpm-4": {
    "spec": {
      "title": "CSS Generated Content for Paged Media Module Level 4",
      "url": "https://drafts.csswg.org/css-gcpm-4/"
    },
    "properties": [
      {
        "name": "copy-into",
        "value": "none | [ [ <custom-ident> <content-level>] [, <custom-ident> <content-level>]* ]?",
        "initial": "none",
        "appliesTo": "all elements and pseudo-elements, but not ::first-line or ::first-letter.",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "copy-into",
          "copyInto"
        ]
      }
    ],
    "atrules": [],
    "selectors": [
      {
        "name": ":nth-of-page()",
        "value": ":nth-of-page(n)"
      },
      {
        "name": ":first-of-page",
        "prose": "Same as :nth-of-page(n), but where n = 1 (it is the first matched element on the page)."
      },
      {
        "name": ":last-of-page",
        "prose": "The element is the last matched element on the page."
      },
      {
        "name": ":start-of-page",
        "prose": "The element is the first matched element on the page, and neither it nor its ancestors have any previous siblings that appear on the page."
      }
    ],
    "values": [],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "content-list",
        "value": "element | content | text | attr(<identifier>) | counter() | counters()"
      }
    ]
  },
  "css-gcpm": {
    "spec": {
      "title": "CSS Generated Content for Paged Media Module",
      "url": "https://drafts.csswg.org/css-gcpm-3/"
    },
    "properties": [
      {
        "name": "position",
        "newValues": "running()",
        "styleDeclaration": [
          "position"
        ]
      },
      {
        "name": "content",
        "newValues": "element()",
        "styleDeclaration": [
          "content"
        ]
      },
      {
        "name": "float",
        "newValues": "footnote",
        "values": [
          {
            "name": "footnote",
            "prose": "each footnote element is placed in the footnote area of the page",
            "type": "value",
            "value": "footnote"
          }
        ],
        "styleDeclaration": [
          "float"
        ]
      },
      {
        "name": "footnote-display",
        "value": "block | inline | compact",
        "initial": "block",
        "appliesTo": "elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "footnote-display",
          "footnoteDisplay"
        ]
      },
      {
        "name": "footnote-policy",
        "value": "auto | line | block",
        "initial": "auto",
        "appliesTo": "elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The user agent chooses how to render footnotes, and may place the footnote body on a later page than the footnote reference. A footnote body must never be placed on a page before the footnote reference.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "line",
            "prose": "If a given footnote body cannot be placed on the current page due to lack of space, the user agent introduces a forced page break at the start of the line containing the footnote reference, so that both the reference and the footnote body fall on the next page. Note that the user agent must honor widow and orphan settings when doing this, and so may need to insert the page break on an earlier line.",
            "type": "value",
            "value": "line"
          },
          {
            "name": "block",
            "prose": "As with line, except a forced page break is introduced before the paragraph that contains the footnote.",
            "type": "value",
            "value": "block"
          }
        ],
        "styleDeclaration": [
          "footnote-policy",
          "footnotePolicy"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "running()",
        "type": "function",
        "value": "running( <custom-ident> )"
      },
      {
        "name": "nth()",
        "type": "function",
        "value": "( An+B [of <custom-ident>]?)"
      }
    ],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "content-list",
        "value": "[ <string> | <counter()> | <counters()> | <content()> | attr(<identifier>) ]+"
      },
      {
        "msg": "Dangling value",
        "name": "block",
        "prose": "The footnote element is placed in the footnote area as a block element",
        "type": "value",
        "value": "block",
        "for": "propdef-footnote-display"
      },
      {
        "msg": "Dangling value",
        "name": "inline",
        "prose": "The footnote element is placed in the footnote area as an inline element",
        "type": "value",
        "value": "inline",
        "for": "propdef-footnote-display"
      },
      {
        "msg": "Dangling value",
        "name": "compact",
        "prose": "The user agent determines whether a given footnote element is placed as a block element or an inline element. If two or more footnotes could fit on the same line in the footnote area, they should be placed inline.",
        "type": "value",
        "value": "compact",
        "for": "propdef-footnote-display"
      }
    ]
  },
  "css-grid-3": {
    "spec": {
      "title": "CSS Grid Layout Module Level 3",
      "url": "https://drafts.csswg.org/css-grid-3/"
    },
    "properties": [
      {
        "name": "grid-template-columns",
        "newValues": "masonry",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "refer to corresponding dimension of the content area",
        "computedValue": "the keyword none or the keyword masonry or a computed track list",
        "animationType": "see CSS Grid",
        "styleDeclaration": [
          "grid-template-columns",
          "gridTemplateColumns"
        ]
      },
      {
        "name": "grid-template-rows",
        "newValues": "masonry",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "refer to corresponding dimension of the content area",
        "computedValue": "the keyword none or the keyword masonry or a computed track list",
        "animationType": "see CSS Grid",
        "styleDeclaration": [
          "grid-template-rows",
          "gridTemplateRows"
        ]
      },
      {
        "name": "masonry-auto-flow",
        "value": "[ pack | next ] || [definite-first | ordered ]",
        "initial": "pack",
        "appliesTo": "grid containers with masonry layout",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "masonry-auto-flow",
          "masonryAutoFlow"
        ]
      },
      {
        "name": "align-tracks",
        "value": "[normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>]#",
        "initial": "normal",
        "appliesTo": "grid containers with masonry layout in their block axis",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "align-tracks",
          "alignTracks"
        ]
      },
      {
        "name": "justify-tracks",
        "value": "[normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
        "initial": "normal",
        "appliesTo": "grid containers with masonry layout in their inline axis",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "justify-tracks",
          "justifyTracks"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-grid": {
    "spec": {
      "title": "CSS Grid Layout Module Level 2",
      "url": "https://drafts.csswg.org/css-grid-2/"
    },
    "properties": [
      {
        "name": "grid-template-columns",
        "value": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "refer to corresponding dimension of the content area",
        "computedValue": "the keyword none or a computed track list",
        "canonicalOrder": "per grammar",
        "animationType": "if the list lengths match, by computed value type per item in the computed track list (see § 7.2.5 Computed Value of a Track Listing and § 7.2.3.3 Interpolation/Combination of repeat()); discrete otherwise",
        "values": [
          {
            "name": "none",
            "prose": "Indicates that no explicit grid tracks are created by this property (though explicit grid tracks could still be created by grid-template-areas).",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<track-list> | <auto-track-list>",
            "prose": "Specifies the track list as a series of track sizing functions and line names. Each track sizing function can be specified as a length, a percentage of the grid container’s size, a measurement of the contents occupying the column or row, or a fraction of the free space in the grid. It can also be specified as a range using the minmax() notation, which can combine any of the previously mentioned mechanisms to specify separate min and max track sizing functions for the column or row.",
            "type": "value",
            "value": "<track-list> | <auto-track-list>"
          },
          {
            "name": "subgrid <line-name-list>?",
            "prose": "The subgrid value indicates that the grid will adopt the spanned portion of its parent grid in that axis (the subgridded axis). Rather than being specified explicitly, the sizes of the grid rows/columns will be taken from the parent grid's definition, and the subgrid’s items will participate in the intrinsic size calculations (CSS Grid Layout 1 § 11.5 Resolve Intrinsic Track Sizes) of any tracks shared with the parent grid. Essentially, subgrids provide the ability to pass grid parameters down through nested elements, and content-based sizing information back up to their parent grid. The <line-name-list> argument allows local naming of the grid lines shared with the parent grid: if a <line-name-list> is given, the specified <line-names>s are assigned to the lines of the subgrid’s explicit grid, one per line, starting with line 1. Excess <line-names> are ignored. If there is no parent grid, or if the grid container is otherwised forced to establish an independent formatting context (for example, due to layout containment [CSS-CONTAIN-2] or absolute positioning [CSS-POSITION-3]), the used value is the initial value, none, and the grid container is not a subgrid. An axis that is not subgridded is a standalone axis.",
            "type": "value",
            "value": "subgrid <line-name-list>?"
          },
          {
            "name": "subgrid",
            "type": "value",
            "value": "subgrid"
          },
          {
            "name": "<length-percentage>",
            "prose": "A non-negative length or percentage, as defined by CSS3 Values. [CSS-VALUES-3] <percentage> values are relative to the inner inline size of the grid container in column grid tracks, and the inner block size of the grid container in row grid tracks. If the size of the grid container depends on the size of its tracks, then the <percentage> must be treated as auto, for the purpose of calculating the intrinsic sizes of the grid container and then resolve against that resulting grid container size for the purpose of laying out the grid and its items.",
            "type": "value",
            "value": "<length-percentage>"
          },
          {
            "name": "<flex>",
            "prose": "A non-negative dimension with the unit fr specifying the track’s flex factor. Each <flex>-sized track takes a share of the remaining space in proportion to its flex factor. For example, given a track listing of 1fr 2fr, the tracks will take up ⅓ and ⅔ of the leftover space, respectively. See § 7.2.4 Flexible Lengths: the fr unit for more details. When appearing outside a minmax() notation, implies an automatic minimum (i.e. ''minmax(auto, <flex>)'').",
            "type": "value",
            "value": "<flex>"
          },
          {
            "name": "minmax()",
            "value": "minmax()",
            "type": "value"
          },
          {
            "name": "auto",
            "prose": "As a maximum: represents the largest max-content contribution of the grid items occupying the grid track; however, unlike max-content, allows expansion of the track by the align-content and justify-content properties. As a minimum: represents the largest minimum size (specified by min-width/min-height) of the grid items occupying the grid track. (This initially is often, but not always, equal to a min-content minimum—see § 6.6 Automatic Minimum Size of Grid Items.) When appearing outside a minmax() notation: equivalent to minmax(auto, auto), representing the range between the minimum and maximum described above. (This behaves similar to minmax(min-content, max-content) in the most basic cases, but with extra abilities.)",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "max-content",
            "prose": "Represents the largest max-content contribution of the grid items occupying the grid track.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "min-content",
            "prose": "Represents the largest min-content contribution of the grid items occupying the grid track.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "grid-template-columns",
          "gridTemplateColumns"
        ]
      },
      {
        "name": "grid-template-rows",
        "value": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "refer to corresponding dimension of the content area",
        "computedValue": "the keyword none or a computed track list",
        "canonicalOrder": "per grammar",
        "animationType": "if the list lengths match, by computed value type per item in the computed track list (see § 7.2.5 Computed Value of a Track Listing and § 7.2.3.3 Interpolation/Combination of repeat()); discrete otherwise",
        "values": [
          {
            "name": "none",
            "prose": "Indicates that no explicit grid tracks are created by this property (though explicit grid tracks could still be created by grid-template-areas).",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<track-list> | <auto-track-list>",
            "prose": "Specifies the track list as a series of track sizing functions and line names. Each track sizing function can be specified as a length, a percentage of the grid container’s size, a measurement of the contents occupying the column or row, or a fraction of the free space in the grid. It can also be specified as a range using the minmax() notation, which can combine any of the previously mentioned mechanisms to specify separate min and max track sizing functions for the column or row.",
            "type": "value",
            "value": "<track-list> | <auto-track-list>"
          },
          {
            "name": "subgrid <line-name-list>?",
            "prose": "The subgrid value indicates that the grid will adopt the spanned portion of its parent grid in that axis (the subgridded axis). Rather than being specified explicitly, the sizes of the grid rows/columns will be taken from the parent grid's definition, and the subgrid’s items will participate in the intrinsic size calculations (CSS Grid Layout 1 § 11.5 Resolve Intrinsic Track Sizes) of any tracks shared with the parent grid. Essentially, subgrids provide the ability to pass grid parameters down through nested elements, and content-based sizing information back up to their parent grid. The <line-name-list> argument allows local naming of the grid lines shared with the parent grid: if a <line-name-list> is given, the specified <line-names>s are assigned to the lines of the subgrid’s explicit grid, one per line, starting with line 1. Excess <line-names> are ignored. If there is no parent grid, or if the grid container is otherwised forced to establish an independent formatting context (for example, due to layout containment [CSS-CONTAIN-2] or absolute positioning [CSS-POSITION-3]), the used value is the initial value, none, and the grid container is not a subgrid. An axis that is not subgridded is a standalone axis.",
            "type": "value",
            "value": "subgrid <line-name-list>?"
          },
          {
            "name": "subgrid",
            "type": "value",
            "value": "subgrid"
          },
          {
            "name": "<length-percentage>",
            "prose": "A non-negative length or percentage, as defined by CSS3 Values. [CSS-VALUES-3] <percentage> values are relative to the inner inline size of the grid container in column grid tracks, and the inner block size of the grid container in row grid tracks. If the size of the grid container depends on the size of its tracks, then the <percentage> must be treated as auto, for the purpose of calculating the intrinsic sizes of the grid container and then resolve against that resulting grid container size for the purpose of laying out the grid and its items.",
            "type": "value",
            "value": "<length-percentage>"
          },
          {
            "name": "<flex>",
            "prose": "A non-negative dimension with the unit fr specifying the track’s flex factor. Each <flex>-sized track takes a share of the remaining space in proportion to its flex factor. For example, given a track listing of 1fr 2fr, the tracks will take up ⅓ and ⅔ of the leftover space, respectively. See § 7.2.4 Flexible Lengths: the fr unit for more details. When appearing outside a minmax() notation, implies an automatic minimum (i.e. ''minmax(auto, <flex>)'').",
            "type": "value",
            "value": "<flex>"
          },
          {
            "name": "minmax()",
            "value": "minmax()",
            "type": "value"
          },
          {
            "name": "auto",
            "prose": "As a maximum: represents the largest max-content contribution of the grid items occupying the grid track; however, unlike max-content, allows expansion of the track by the align-content and justify-content properties. As a minimum: represents the largest minimum size (specified by min-width/min-height) of the grid items occupying the grid track. (This initially is often, but not always, equal to a min-content minimum—see § 6.6 Automatic Minimum Size of Grid Items.) When appearing outside a minmax() notation: equivalent to minmax(auto, auto), representing the range between the minimum and maximum described above. (This behaves similar to minmax(min-content, max-content) in the most basic cases, but with extra abilities.)",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "max-content",
            "prose": "Represents the largest max-content contribution of the grid items occupying the grid track.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "min-content",
            "prose": "Represents the largest min-content contribution of the grid items occupying the grid track.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "grid-template-rows",
          "gridTemplateRows"
        ]
      },
      {
        "name": "grid-template-areas",
        "value": "none | <string>+",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or a list of string values",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Indicates that no named grid areas, and likewise no explicit grid tracks, are defined by this property (though explicit grid tracks could still be created by grid-template-columns or grid-template-rows).",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<string>+",
            "prose": "A row is created for every separate string listed for the grid-template-areas property, and a column is created for each cell in the string, when parsed as follows: Tokenize the string into a list of the following tokens, using longest-match semantics: A sequence of ident code points, representing a named cell token with a name consisting of its code points. A sequence of one or more \".\" (U+002E FULL STOP), representing a null cell token. A sequence of whitespace, representing nothing (do not produce a token). A sequence of any other characters, representing a trash token. A null cell token represents an unnamed area in the grid container. A named cell token creates a named grid area with the same name. Multiple named cell tokens within and between rows create a single named grid area that spans the corresponding grid cells. A trash token is a syntax error, and makes the declaration invalid. All strings must define the same number of cell tokens (named cell tokens and/or null cell tokens), and at least one cell token, or else the declaration is invalid. If a named grid area spans multiple grid cells, but those cells do not form a single filled-in rectangle, the declaration is invalid.",
            "type": "value",
            "value": "<string>+"
          }
        ],
        "styleDeclaration": [
          "grid-template-areas",
          "gridTemplateAreas"
        ]
      },
      {
        "name": "grid-template",
        "value": "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "none",
            "prose": "Sets all three properties to their initial values (none).",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<'grid-template-rows'> / <'grid-template-columns'>",
            "prose": "Sets grid-template-rows and grid-template-columns to the specified values, respectively, and sets grid-template-areas to none. grid-template: auto 1fr / auto 1fr auto; is equivalent to grid-template-rows: auto 1fr; grid-template-columns: auto 1fr auto; grid-template-areas: none;",
            "type": "value",
            "value": "<'grid-template-rows'> / <'grid-template-columns'>"
          },
          {
            "name": "[ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
            "prose": "Sets grid-template-areas to the strings listed. Sets grid-template-rows to the <track-size>s following each string (filling in auto for any missing sizes), and splicing in the named lines defined before/after each size. Sets grid-template-columns to the track listing specified after the slash (or none, if not specified). This syntax allows the author to align track names and sizes inline with their respective grid areas. grid-template: [header-top] \"a a a\" [header-bottom] [main-top] \"b b b\" 1fr [main-bottom] / auto 1fr auto; is equivalent to grid-template-areas: \"a a a\" \"b b b\"; grid-template-rows: [header-top] auto [header-bottom main-top] 1fr [main-bottom]; grid-template-columns: auto 1fr auto; and creates the following grid: Three columns, sized auto, 1fr, and auto, respectively Two rows sized as auto and 1fr, respectively. A line named both “header-top” and “a-start” at the top, a line with four names—“header-bottom”, “main-top”, “a-end”, and “b-start”—in the middle, a line named “main-bottom” and “b-end” at the bottom. A line named “a-start” and “b-start” on the left edge, and a line named “a-end” and “b-end” on the right edge. The grid created by the declarations above. (The “a/b-start/end” names are implicitly assigned by the named grid areas.)",
            "type": "value",
            "value": "[ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?"
          }
        ],
        "styleDeclaration": [
          "grid-template",
          "gridTemplate"
        ]
      },
      {
        "name": "grid-auto-columns",
        "value": "<track-size>+",
        "initial": "auto",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "see Track Sizing",
        "computedValue": "see Track Sizing",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "grid-auto-columns",
          "gridAutoColumns"
        ]
      },
      {
        "name": "grid-auto-rows",
        "value": "<track-size>+",
        "initial": "auto",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "see Track Sizing",
        "computedValue": "see Track Sizing",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "grid-auto-rows",
          "gridAutoRows"
        ]
      },
      {
        "name": "grid-auto-flow",
        "value": "[ row | column ] || dense",
        "initial": "row",
        "appliesTo": "grid containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "row",
            "prose": "The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary. If neither row nor column is provided, row is assumed.",
            "type": "value",
            "value": "row"
          },
          {
            "name": "column",
            "prose": "The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary.",
            "type": "value",
            "value": "column"
          },
          {
            "name": "dense",
            "prose": "If specified, the auto-placement algorithm uses a “dense” packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items. If omitted, a “sparse” algorithm is used, where the placement algorithm only ever moves “forward” in the grid when placing items, never backtracking to fill holes. This ensures that all of the auto-placed items appear “in order”, even if this leaves holes that could have been filled by later items.",
            "type": "value",
            "value": "dense"
          }
        ],
        "styleDeclaration": [
          "grid-auto-flow",
          "gridAutoFlow"
        ]
      },
      {
        "name": "grid",
        "value": "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
        "initial": "none",
        "appliesTo": "grid containers",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?",
            "prose": "Sets up auto-flow, by setting the tracks in one axis explicitly (setting either grid-template-rows or grid-template-columns as specified, and setting the other to none), and specifying how to auto-repeat the tracks in the other axis (setting either grid-auto-rows or grid-auto-columns as specified, and setting the other to auto). grid-auto-flow is also set to either row or column accordingly, with dense if it’s specified. All other grid sub-properties are reset to their initial values.",
            "type": "value",
            "value": "<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?"
          },
          {
            "name": "[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
            "prose": "Sets up auto-flow, by setting the tracks in one axis explicitly (setting either grid-template-rows or grid-template-columns as specified, and setting the other to none), and specifying how to auto-repeat the tracks in the other axis (setting either grid-auto-rows or grid-auto-columns as specified, and setting the other to auto). grid-auto-flow is also set to either row or column accordingly, with dense if it’s specified. All other grid sub-properties are reset to their initial values.",
            "type": "value",
            "value": "[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>"
          }
        ],
        "styleDeclaration": [
          "grid"
        ]
      },
      {
        "name": "grid-row-start",
        "value": "<grid-line>",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword, identifier, and/or integer",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<grid-line>",
            "type": "type",
            "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
            "values": [
              {
                "name": "<custom-ident>",
                "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                "type": "value",
                "value": "<custom-ident>"
              },
              {
                "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                "type": "value",
                "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
              },
              {
                "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                "type": "value",
                "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
              },
              {
                "name": "auto",
                "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                "type": "value",
                "value": "auto"
              }
            ]
          }
        ],
        "styleDeclaration": [
          "grid-row-start",
          "gridRowStart"
        ]
      },
      {
        "name": "grid-column-start",
        "value": "<grid-line>",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword, identifier, and/or integer",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<grid-line>",
            "type": "type",
            "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
            "values": [
              {
                "name": "<custom-ident>",
                "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                "type": "value",
                "value": "<custom-ident>"
              },
              {
                "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                "type": "value",
                "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
              },
              {
                "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                "type": "value",
                "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
              },
              {
                "name": "auto",
                "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                "type": "value",
                "value": "auto"
              }
            ]
          }
        ],
        "styleDeclaration": [
          "grid-column-start",
          "gridColumnStart"
        ]
      },
      {
        "name": "grid-row-end",
        "value": "<grid-line>",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword, identifier, and/or integer",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<grid-line>",
            "type": "type",
            "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
            "values": [
              {
                "name": "<custom-ident>",
                "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                "type": "value",
                "value": "<custom-ident>"
              },
              {
                "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                "type": "value",
                "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
              },
              {
                "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                "type": "value",
                "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
              },
              {
                "name": "auto",
                "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                "type": "value",
                "value": "auto"
              }
            ]
          }
        ],
        "styleDeclaration": [
          "grid-row-end",
          "gridRowEnd"
        ]
      },
      {
        "name": "grid-column-end",
        "value": "<grid-line>",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword, identifier, and/or integer",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<grid-line>",
            "type": "type",
            "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
            "values": [
              {
                "name": "<custom-ident>",
                "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                "type": "value",
                "value": "<custom-ident>"
              },
              {
                "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                "type": "value",
                "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
              },
              {
                "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                "type": "value",
                "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
              },
              {
                "name": "auto",
                "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                "type": "value",
                "value": "auto"
              }
            ]
          }
        ],
        "styleDeclaration": [
          "grid-column-end",
          "gridColumnEnd"
        ]
      },
      {
        "name": "grid-row",
        "value": "<grid-line> [ / <grid-line> ]?",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "grid-row",
          "gridRow"
        ]
      },
      {
        "name": "grid-column",
        "value": "<grid-line> [ / <grid-line> ]?",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "grid-column",
          "gridColumn"
        ]
      },
      {
        "name": "grid-area",
        "value": "<grid-line> [ / <grid-line> ]{0,3}",
        "initial": "auto",
        "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "grid-area",
          "gridArea"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<track-list>",
        "type": "type",
        "value": "[ <line-names>? [ <track-size> | <track-repeat> ] ]+ <line-names>?"
      },
      {
        "name": "<auto-track-list>",
        "type": "type",
        "value": "[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat> [ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>?"
      },
      {
        "name": "<explicit-track-list>",
        "type": "type",
        "value": "[ <line-names>? <track-size> ]+ <line-names>?"
      },
      {
        "name": "<line-name-list>",
        "type": "type",
        "value": "[ <line-names> | <name-repeat> ]+"
      },
      {
        "name": "<track-size>",
        "type": "type",
        "value": "<track-breadth> | minmax( <inflexible-breadth> , <track-breadth> ) | fit-content( <length-percentage> )"
      },
      {
        "name": "<fixed-size>",
        "type": "type",
        "value": "<fixed-breadth> | minmax( <fixed-breadth> , <track-breadth> ) | minmax( <inflexible-breadth> , <fixed-breadth> )"
      },
      {
        "name": "<track-breadth>",
        "type": "type",
        "value": "<length-percentage> | <flex> | min-content | max-content | auto"
      },
      {
        "name": "<inflexible-breadth>",
        "type": "type",
        "value": "<length-percentage> | min-content | max-content | auto"
      },
      {
        "name": "<fixed-breadth>",
        "type": "type",
        "value": "<length-percentage>"
      },
      {
        "name": "<line-names>",
        "type": "type",
        "value": "'[' <custom-ident>* ']'"
      },
      {
        "name": "repeat()",
        "prose": "The repeat() notation represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.",
        "type": "function",
        "values": [
          {
            "name": "auto-fill",
            "prose": "Otherwise on a standalone axis, when auto-fill is given as the repetition number, if the grid container has a definite size or max size in the relevant axis, then the number of repetitions is the largest possible positive integer that does not cause the grid to overflow the content box of its grid container (treating each track as its max track sizing function if that is definite or as its minimum track sizing function otherwise, flooring the max track sizing function by the min track sizing function if both are definite, and taking gap into account); if any number of repetitions would overflow, then 1 repetition. Otherwise, if the grid container has a definite min size in the relevant axis, the number of repetitions is the smallest possible positive integer that fulfills that minimum requirement. Otherwise, the specified track list repeats only once.",
            "type": "value",
            "value": "auto-fill"
          },
          {
            "name": "auto-fit",
            "prose": "The auto-fit keyword behaves the same as auto-fill, except that after grid item placement any empty repeated tracks are collapsed. An empty track is one with no in-flow grid items placed into or spanning across it. (This can result in all tracks being collapsed, if they’re all empty.)",
            "type": "value",
            "value": "auto-fit"
          }
        ]
      },
      {
        "name": "<track-repeat>",
        "type": "type",
        "value": "repeat( [ <integer [1,∞]> ] , [ <line-names>? <track-size> ]+ <line-names>? )"
      },
      {
        "name": "<auto-repeat>",
        "type": "type",
        "value": "repeat( [ auto-fill | auto-fit ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
      },
      {
        "name": "<fixed-repeat>",
        "type": "type",
        "value": "repeat( [ <integer [1,∞]> ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
      },
      {
        "name": "<name-repeat>",
        "type": "type",
        "value": "repeat( [ <integer [1,∞]> | auto-fill ], <line-names>+)"
      },
      {
        "name": "<flex>",
        "prose": "A flexible length or <flex> is a dimension with the fr unit, which represents a fraction of the leftover space in the grid container. Tracks sized with fr units are called flexible tracks as they flex in response to leftover space similar to how flex items with a zero base size fill space in a flex container.",
        "type": "type",
        "values": [
          {
            "name": "fr",
            "prose": "A flexible length or <flex> is a dimension with the fr unit, which represents a fraction of the leftover space in the grid container. Tracks sized with fr units are called flexible tracks as they flex in response to leftover space similar to how flex items with a zero base size fill space in a flex container.",
            "type": "value",
            "value": "fr"
          }
        ]
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "grid",
        "prose": "This value causes an element to generate a grid container box that is block-level when placed in flow layout.",
        "type": "value",
        "value": "grid",
        "for": "display"
      },
      {
        "msg": "Dangling value",
        "name": "inline-grid",
        "prose": "This value causes an element to generate a grid container box that is inline-level when placed in flow layout.",
        "type": "value",
        "value": "inline-grid",
        "for": "display"
      }
    ]
  },
  "css-highlight-api": {
    "spec": {
      "title": "CSS Custom Highlight API Module Level 1",
      "url": "https://drafts.csswg.org/css-highlight-api-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": "::highlight()",
        "value": "::highlight(<custom-highlight-name>)"
      }
    ],
    "values": [
      {
        "name": "<custom-highlight-name>",
        "prose": "The ::highlight(<custom-highlight-name>) pseudo-element (also known as the custom highlight pseudo-element) represents the portion of a document that is being contained or partially contained in all the ranges of the registered custom highlight with the custom highlight name <custom-highlight-name>, if any. <custom-highlight-name> must be a valid CSS <ident-token>.",
        "type": "type"
      }
    ]
  },
  "css-images-4": {
    "spec": {
      "title": "CSS Images Module Level 4",
      "url": "https://drafts.csswg.org/css-images-4/"
    },
    "properties": [
      {
        "name": "object-fit",
        "value": "fill | none | [contain | cover] || scale-down",
        "initial": "fill",
        "appliesTo": "replaced elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "fill",
            "prose": "The replaced content is sized to fill the element’s content box: the object’s concrete object size is the element’s used width and height.",
            "type": "value",
            "value": "fill"
          },
          {
            "name": "none",
            "prose": "The replaced content is not resized to fit inside the element’s content box: determine the object’s concrete object size using the default sizing algorithm with no specified size, and a default object size equal to the replaced element’s used width and height.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "contain",
            "prose": "The replaced content is sized to maintain its aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element’s used width and height. If the scale-down flag is used, size the content as if none or contain were specified, whichever would result in a smaller concrete object size.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "cover",
            "prose": "The replaced content is sized to maintain its aspect ratio while filling the element’s entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height. If the scale-down flag is used, size the content as if none or cover were specified, whichever would result in a smaller concrete object size.",
            "type": "value",
            "value": "cover"
          },
          {
            "name": "scale-down",
            "prose": "Equivalent to contain scale-down.",
            "type": "value",
            "value": "scale-down"
          }
        ],
        "styleDeclaration": [
          "object-fit",
          "objectFit"
        ]
      },
      {
        "name": "image-resolution",
        "value": "[ from-image || <resolution> ] && snap?",
        "initial": "1dppx",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s) and/or <resolution> (possibly adjusted for snap, see below)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<resolution>",
            "prose": "Specifies the preferred resolution explicitly. A \"dot\" in this case corresponds to a single image pixel.",
            "type": "value",
            "value": "<resolution>"
          },
          {
            "name": "from-image",
            "prose": "The image’s preferred resolution is taken as that specified by the image format (the natural resolution). If the image does not specify its own resolution, the explicitly specified resolution is used (if given), else it defaults to 1dppx.",
            "type": "value",
            "value": "from-image"
          },
          {
            "name": "snap",
            "prose": "If the \"snap\" keyword is provided, the computed <resolution> (if any) is the specified resolution rounded to the nearest value that would map one image pixel to an integer number of device pixels. If the resolution is taken from the image, then the used natural resolution is the image’s native resolution similarly adjusted.",
            "type": "value",
            "value": "snap"
          }
        ],
        "styleDeclaration": [
          "image-resolution",
          "imageResolution"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<image>",
        "type": "type",
        "value": "<url> | <image()> | <image-set()> | <cross-fade()> | <element()> | <gradient>"
      },
      {
        "name": "image-set()",
        "prose": "Delivering the most appropriate image resolution for a user’s device can be a difficult task. Ideally, images should be in the same resolution as the device they’re being viewed in, which can vary between users. However, other factors can factor into the decision of which image to send; for example, if the user is on a slow mobile connection, they may prefer to receive lower-res images rather than waiting for a large proper-res image to load. The image-set() function allows an author to ignore most of these issues, simply providing multiple resolutions of an image and letting the UA decide which is most appropriate in a given situation.",
        "type": "function",
        "value": "image-set( <image-set-option># )",
        "values": [
          {
            "name": "type()",
            "value": "type( <string> )",
            "type": "function"
          }
        ]
      },
      {
        "name": "<image-set-option>",
        "type": "type",
        "value": "[ <image> | <string> ] [ <resolution> || type(<string>) ]"
      },
      {
        "name": "image()",
        "type": "function",
        "value": "image( <image-tags>? [ <image-src>? , <color>? ]! )"
      },
      {
        "name": "<image-tags>",
        "type": "type",
        "value": "[ ltr | rtl ]"
      },
      {
        "name": "<image-src>",
        "type": "type",
        "value": "[ <url> | <string> ]"
      },
      {
        "name": "cross-fade()",
        "type": "function",
        "value": "cross-fade( <cf-image># )"
      },
      {
        "name": "<cf-image>",
        "type": "type",
        "value": "<percentage [0,100]>? && [ <image> | <color> ]"
      },
      {
        "name": "element()",
        "type": "function",
        "value": "element( <id-selector> )"
      },
      {
        "name": "<gradient>",
        "type": "type",
        "value": "[ <linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()> | <repeating-conic-gradient()> ]"
      },
      {
        "name": "linear-gradient()",
        "type": "function",
        "value": "linear-gradient( [ [ <angle> | to <side-or-corner> ] || <color-interpolation-method> ]? , <color-stop-list> )"
      },
      {
        "name": "<side-or-corner>",
        "type": "type",
        "value": "[left | right] || [top | bottom]"
      },
      {
        "name": "radial-gradient()",
        "type": "function",
        "value": "radial-gradient( [ [ [ <rg-ending-shape> || <rg-size> ]? [ at <position> ]? ] || <color-interpolation-method>]? , <color-stop-list> )"
      },
      {
        "name": "conic-gradient()",
        "type": "function",
        "value": "conic-gradient( [ [ [ from <angle> ]? [ at <position> ]? ] || <color-interpolation-method> ]? , <angular-color-stop-list> )",
        "values": [
          {
            "name": "<angle>",
            "prose": "The entire gradient is rotated by this angle. If omitted, defaults to 0deg. The unit identifier may be omitted if the <angle> is zero.",
            "type": "value",
            "value": "<angle>"
          },
          {
            "name": "<position>",
            "prose": "Determines the gradient center of the gradient. The <position> value type (which is also used for background-position) is defined in [CSS-VALUES-3], and is resolved using the center-point as the object area and the gradient box as the positioning area. If this argument is omitted, it defaults to center.",
            "type": "value",
            "value": "<position>"
          }
        ]
      },
      {
        "name": "repeating-linear-gradient()",
        "prose": "In addition to linear-gradient(), radial-gradient(), and conic-gradient(), this specification defines repeating-linear-gradient(), repeating-radial-gradient(), and repeating-conic-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
        "type": "function"
      },
      {
        "name": "repeating-radial-gradient()",
        "prose": "In addition to linear-gradient(), radial-gradient(), and conic-gradient(), this specification defines repeating-linear-gradient(), repeating-radial-gradient(), and repeating-conic-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
        "type": "function"
      },
      {
        "name": "repeating-conic-gradient()",
        "prose": "In addition to linear-gradient(), radial-gradient(), and conic-gradient(), this specification defines repeating-linear-gradient(), repeating-radial-gradient(), and repeating-conic-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
        "type": "function",
        "values": [
          {
            "name": "<angle>",
            "prose": "The entire gradient is rotated by this angle. If omitted, defaults to 0deg. The unit identifier may be omitted if the <angle> is zero.",
            "type": "value",
            "value": "<angle>"
          },
          {
            "name": "<position>",
            "prose": "Determines the gradient center of the gradient. The <position> value type (which is also used for background-position) is defined in [CSS-VALUES-3], and is resolved using the center-point as the object area and the gradient box as the positioning area. If this argument is omitted, it defaults to center.",
            "type": "value",
            "value": "<position>"
          }
        ]
      },
      {
        "name": "<color-stop-list>",
        "type": "type",
        "value": "<linear-color-stop> , [ <linear-color-hint>? , <linear-color-stop> ]#"
      },
      {
        "name": "<linear-color-stop>",
        "type": "type",
        "value": "<color> && <color-stop-length>?"
      },
      {
        "name": "<linear-color-hint>",
        "type": "type",
        "value": "<length-percentage>"
      },
      {
        "name": "<color-stop-length>",
        "type": "type",
        "value": "<length-percentage>{1,2}"
      },
      {
        "name": "<angular-color-stop-list>",
        "type": "type",
        "value": "<angular-color-stop> , [ <angular-color-hint>? , <angular-color-stop> ]#"
      },
      {
        "name": "<angular-color-stop>",
        "type": "type",
        "value": "<color> && <color-stop-angle>?"
      },
      {
        "name": "<angular-color-hint>",
        "type": "type",
        "value": "<angle-percentage>"
      },
      {
        "name": "<color-stop-angle>",
        "type": "type",
        "value": "<angle-percentage>{1,2}"
      },
      {
        "name": "<color-stop>",
        "type": "type",
        "value": "<color-stop-length> | <color-stop-angle>"
      },
      {
        "name": "<image-1D>",
        "prose": "While <image> values represent a 2-dimensional (2D) image, and <color> can be thought of as a 0-dimensional (0D) image (unvarying in either axis), some contexts require a 1-dimensional (1D) image, which specifies colors along an abstract, directionless, single-axis paint line. The <image-1D> type represents such 1D images, including the stripes() functional notation:",
        "type": "type",
        "value": "<stripes()>"
      },
      {
        "name": "stripes()",
        "prose": "The stripes() function defines a 1D image as a comma-separated list of colored stripes, each placed end-to-end on the paint line in the order given.",
        "type": "function",
        "value": "stripes( <color-stripe># )",
        "values": [
          {
            "name": "<percentage [0,100]>",
            "prose": "Percentage thicknesses are relative to the total width. Only values between 0% and 100% (inclusive) are valid.",
            "type": "value",
            "value": "<percentage [0,100]>"
          },
          {
            "name": "<length [0,∞]>",
            "prose": "Negative length values are invalid.",
            "type": "value",
            "value": "<length [0,∞]>"
          },
          {
            "name": "<flex>",
            "prose": "A <flex> is evaluated as a fraction of the total width relative to the total sum of <flex> entries in the function, after subtracting the thickness of any non-<flex> entries (flooring the subtraction result at zero). If the sum of <flex> values is less than 1fr, the result of the subtraction is multiplied by the sum’s value before being distributed.",
            "type": "value",
            "value": "<flex>"
          }
        ]
      },
      {
        "name": "<color-stripe>",
        "prose": "Each <color-stripe> entry defines a solid-color stripe with the specified <color> and thickness. If the thickness is omitted, it defaults to 1fr. Thickness values are intepreted as follows:",
        "type": "type",
        "value": "<color> && [ <length-percentage> | <flex> ]?"
      },
      {
        "name": "-webkit-image-set()",
        "prose": "Implementations must accept -webkit-image-set() as a parse-time alias of image-set(). (It’s a valid value, with identical arguments to image-set(), and is turned into image-set() during parsing.)",
        "type": "function"
      }
    ]
  },
  "css-images-5": {
    "spec": {
      "title": "CSS Images Module Level 5",
      "url": "https://drafts.csswg.org/css-images-5/"
    },
    "properties": [
      {
        "name": "object-view-box",
        "value": "none | <basic-shape-rect>",
        "initial": "none",
        "appliesTo": "replaced elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword, or computed function",
        "canonicalOrder": "per grammar",
        "animationType": "as if possible, otherwise discrete",
        "values": [
          {
            "name": "none",
            "prose": "The element does not have a view box.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<basic-shape-rect>",
            "prose": "If the element does not have both a natural width and a natural height, this value has no effect, similar to none. Otherwise, specifies a view box for the element. First, resolve the <basic-shape-rect> against a reference box formed by the element’s natural sizes to obtain the element’s view box. For all purposes, the element is now treated as having natural sizes equal to the view box’s width and height. If the element had a natural aspect ratio, it’s now treated as instead having the same ratio as the view box. Further adjustments to the size/position of the element’s contents, such as object-position or object-fit, are similarly performed on the view box instead. When the element is painted, its contents are scaled and translated such that the element’s contents retain the same position and size, relative to the view box’s final size and position, that they had when the view box was determined (above). Have not yet defined what happens if the view box is zero-area. It’s an error case, so precise behavior isn’t important; just need to see what impls want to do about it.",
            "type": "value",
            "value": "<basic-shape-rect>"
          }
        ],
        "styleDeclaration": [
          "object-view-box",
          "objectViewBox"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-images": {
    "spec": {
      "title": "CSS Images Module Level 3",
      "url": "https://drafts.csswg.org/css-images-3/"
    },
    "properties": [
      {
        "name": "object-fit",
        "value": "fill | contain | cover | none | scale-down",
        "initial": "fill",
        "appliesTo": "replaced elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "fill",
            "prose": "The replaced content is sized to fill the element’s content box: the object’s concrete object size is the element’s used width and height.",
            "type": "value",
            "value": "fill"
          },
          {
            "name": "contain",
            "prose": "The replaced content is sized to maintain its natural aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element’s used width and height.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "cover",
            "prose": "The replaced content is sized to maintain its natural aspect ratio while filling the element’s entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height.",
            "type": "value",
            "value": "cover"
          },
          {
            "name": "none",
            "prose": "The replaced content is not resized to fit inside the element’s content box: determine the object’s concrete object size using the default sizing algorithm with no specified size, and a default object size equal to the replaced element’s used width and height.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "scale-down",
            "prose": "Size the content as if none or contain were specified, whichever would result in a smaller concrete object size.",
            "type": "value",
            "value": "scale-down"
          }
        ],
        "styleDeclaration": [
          "object-fit",
          "objectFit"
        ]
      },
      {
        "name": "object-position",
        "value": "<position>",
        "initial": "50% 50%",
        "appliesTo": "replaced elements",
        "inherited": "no",
        "percentages": "refer to width and height of element itself",
        "computedValue": "as for background-position",
        "canonicalOrder": "the horizontal component of the <position>, followed by the vertical component",
        "animationType": "as for background-position",
        "styleDeclaration": [
          "object-position",
          "objectPosition"
        ]
      },
      {
        "name": "image-orientation",
        "value": "from-image | none | [ <angle> || flip ]",
        "initial": "from-image",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the specified keyword, or an <angle>, rounded and normalized (see text), plus optionally a flip keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No additional rotation is applied: the image is oriented as encoded.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "from-image",
            "prose": "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image. If necessary, this angle is then rounded and normalized as described above for an <angle> value. If there is no orientation specified in its metadata, this value computes to none.",
            "type": "value",
            "value": "from-image"
          },
          {
            "name": "<angle>",
            "prose": "Positive <angle> values cause the image to be rotated to the right (in a clockwise direction), while negative values cause a rotation to the left. If the <angle> is omitted, it defaults to 0deg. If flip is specified, after rotation the image is flipped horizontally. This value only applies to content images; decorative images continue to behave as from-image. This value is deprecated and is optional for implementations except those conforming to [CSS-PRINT]. The computed value of the property is calculated by rounding the <angle> to the nearest quarter turn, rounding towards positive infinity when that’s ambiguous, then moduloing the value by 1turn (so that it lies in the half-open range [0turn, 1turn)).",
            "type": "value",
            "value": "<angle>"
          }
        ],
        "styleDeclaration": [
          "image-orientation",
          "imageOrientation"
        ]
      },
      {
        "name": "image-rendering",
        "value": "auto | smooth | high-quality | pixelated | crisp-edges",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The scaling algorithm is UA-dependent.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "smooth",
            "prose": "The image should be scaled with an algorithm that maximizes the appearance of the image. In particular, scaling algorithms that \"smooth\" colors are acceptable, such as bilinear interpolation. This is intended for images such as photos.",
            "type": "value",
            "value": "smooth"
          },
          {
            "name": "high-quality",
            "prose": "Identical to smooth, but with a preference for higher-quality scaling. If system resources are constrained, images with high-quality should be prioritized over those with any other value, when considering which images to degrade the quality of and to what degree.",
            "type": "value",
            "value": "high-quality"
          },
          {
            "name": "pixelated",
            "prose": "The image is scaled in a way that preserves the pixelation of the original as much as possible, but allows minor smoothing as necessary to avoid distorting the image when the target size is not a clean multiple of the original. For each axis independently, first determine the integer multiple of its natural size that puts it closest to the target size and is greater than zero. Scale it to this integer-multiple-size using nearest neighbor, then scale it the rest of the way to the target size as for smooth.",
            "type": "value",
            "value": "pixelated"
          },
          {
            "name": "crisp-edges",
            "prose": "The image is scaled in a way that preserves contrast and edges, and which avoids smoothing colors or introducing blur to the image in the process. This is intended for images such as line drawings. The image may be scaled using nearest neighbor or any other UA-chosen algorithm that does not blur edges or blend colors from the source image. It can, however, detect diagonal or curved lines and render them as such (rather than as jagged-looking “giant pixels”).",
            "type": "value",
            "value": "crisp-edges"
          }
        ],
        "styleDeclaration": [
          "image-rendering",
          "imageRendering"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<image>",
        "type": "type",
        "value": "<url> | <gradient>"
      },
      {
        "name": "<gradient>",
        "type": "type",
        "value": "<linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()>"
      },
      {
        "name": "linear-gradient()",
        "prose": "The linear-gradient() notation specifies a linear gradient in CSS. Its syntax is as follows:",
        "type": "function",
        "value": "linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )"
      },
      {
        "name": "<side-or-corner>",
        "type": "type",
        "value": "[left | right] || [top | bottom]"
      },
      {
        "name": "radial-gradient()",
        "prose": "The radial-gradient() notation specifies a radial gradient by indicating the center of the gradient (where the 0% ellipse will be) and the size and shape of the ending shape (the 100% ellipse). Color stops are given as a list, just as for linear-gradient(). Starting from the gradient center and progressing towards (and potentially beyond) the ending shape, uniformly-scaled concentric ellipses are drawn and colored according to the specified color stops.",
        "type": "function",
        "value": "radial-gradient( [ <rg-ending-shape> || <rg-size> ]? [ at <position> ]? , <color-stop-list> )",
        "values": [
          {
            "name": "<position>",
            "prose": "Determines the center of the gradient. The <position> value type (which is also used for background-position) is defined in [CSS-VALUES-3], and is resolved using the center-point as the object area and the gradient box as the positioning area. If this argument is omitted, it defaults to center.",
            "type": "value",
            "value": "<position>"
          },
          {
            "name": "<rg-ending-shape>",
            "prose": "Can be either circle or ellipse; determines whether the gradient’s ending shape is a circle or an ellipse, respectively. If <rg-ending-shape> is omitted, the ending shape defaults to a circle if the <rg-size> is a single <length>, and to an ellipse otherwise.",
            "type": "value",
            "value": "<rg-ending-shape>"
          },
          {
            "name": "<rg-size>",
            "prose": "Determines the size of the gradient’s ending shape. If omitted it defaults to farthest-corner. It can be given explicitly or by keyword. For the purpose of the keyword definitions, consider the gradient box edges as extending infinitely in both directions, rather than being finite line segments. If the ending-shape is an ellipse, its axises are aligned with the horizontal and vertical axises. Both circle and ellipse gradients accept the following <rg-extent-keyword> values: If <rg-ending-shape> is specified as circle or is omitted, the <rg-size> may be given explicitly as: If <rg-ending-shape> is specified as ellipse or is omitted, <rg-size> may instead be given explicitly as:",
            "type": "value",
            "value": "<rg-size>"
          }
        ]
      },
      {
        "name": "<rg-size>",
        "type": "type",
        "value": "<rg-extent-keyword> | <length [0,∞]> | <length-percentage [0,∞]>{2}",
        "values": [
          {
            "name": "<length [0,∞]>",
            "prose": "Gives the radius of the circle explicitly. Negative values are invalid.",
            "type": "value",
            "value": "<length [0,∞]>"
          },
          {
            "name": "<length-percentage [0,∞]>{2}",
            "prose": "Gives the size of the ellipse explicitly. The first value represents the horizontal radius, the second the vertical radius. Percentages values are relative to the corresponding dimension of the gradient box. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>{2}"
          }
        ]
      },
      {
        "name": "<rg-extent-keyword>",
        "type": "type",
        "value": "closest-corner | closest-side | farthest-corner | farthest-side",
        "values": [
          {
            "name": "closest-side",
            "prose": "The ending shape is sized so that it exactly meets the side of the gradient box closest to the gradient’s center. If the shape is an ellipse, it exactly meets the closest side in each dimension.",
            "type": "value",
            "value": "closest-side"
          },
          {
            "name": "farthest-side",
            "prose": "Same as closest-side, except the ending shape is sized based on the farthest side(s).",
            "type": "value",
            "value": "farthest-side"
          },
          {
            "name": "closest-corner",
            "prose": "The ending shape is sized so that it passes through the corner of the gradient box closest to the gradient’s center. If the shape is an ellipse, the ending shape is given the same aspect-ratio it would have if closest-side were specified.",
            "type": "value",
            "value": "closest-corner"
          },
          {
            "name": "farthest-corner",
            "prose": "Same as closest-corner, except the ending shape is sized based on the farthest corner. If the shape is an ellipse, the ending shape is given the same aspect ratio it would have if farthest-side were specified.",
            "type": "value",
            "value": "farthest-corner"
          }
        ]
      },
      {
        "name": "<rg-ending-shape>",
        "type": "type",
        "value": "circle | ellipse",
        "values": [
          {
            "name": "circle",
            "type": "value",
            "value": "circle"
          },
          {
            "name": "ellipse",
            "type": "value",
            "value": "ellipse"
          }
        ]
      },
      {
        "name": "repeating-linear-gradient()",
        "prose": "In addition to linear-gradient() and radial-gradient(), this specification defines repeating-linear-gradient() and repeating-radial-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
        "type": "function"
      },
      {
        "name": "repeating-radial-gradient()",
        "prose": "In addition to linear-gradient() and radial-gradient(), this specification defines repeating-linear-gradient() and repeating-radial-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
        "type": "function",
        "values": [
          {
            "name": "<position>",
            "prose": "Determines the center of the gradient. The <position> value type (which is also used for background-position) is defined in [CSS-VALUES-3], and is resolved using the center-point as the object area and the gradient box as the positioning area. If this argument is omitted, it defaults to center.",
            "type": "value",
            "value": "<position>"
          },
          {
            "name": "<rg-ending-shape>",
            "prose": "Can be either circle or ellipse; determines whether the gradient’s ending shape is a circle or an ellipse, respectively. If <rg-ending-shape> is omitted, the ending shape defaults to a circle if the <rg-size> is a single <length>, and to an ellipse otherwise.",
            "type": "value",
            "value": "<rg-ending-shape>"
          },
          {
            "name": "<rg-size>",
            "prose": "Determines the size of the gradient’s ending shape. If omitted it defaults to farthest-corner. It can be given explicitly or by keyword. For the purpose of the keyword definitions, consider the gradient box edges as extending infinitely in both directions, rather than being finite line segments. If the ending-shape is an ellipse, its axises are aligned with the horizontal and vertical axises. Both circle and ellipse gradients accept the following <rg-extent-keyword> values: If <rg-ending-shape> is specified as circle or is omitted, the <rg-size> may be given explicitly as: If <rg-ending-shape> is specified as ellipse or is omitted, <rg-size> may instead be given explicitly as:",
            "type": "value",
            "value": "<rg-size>"
          }
        ]
      },
      {
        "name": "<color-stop-list>",
        "type": "type",
        "value": "<linear-color-stop> , [ <linear-color-hint>? , <linear-color-stop> ]#"
      },
      {
        "name": "<linear-color-stop>",
        "type": "type",
        "value": "<color> && <length-percentage>?"
      },
      {
        "name": "<linear-color-hint>",
        "type": "type",
        "value": "<length-percentage>"
      }
    ]
  },
  "css-inline": {
    "spec": {
      "title": "CSS Inline Layout Module Level 3",
      "url": "https://drafts.csswg.org/css-inline-3/"
    },
    "properties": [
      {
        "name": "dominant-baseline",
        "value": "auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top",
        "initial": "auto",
        "appliesTo": "block containers, inline boxes, table rows, grid containers, flex containers, and SVG text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Equivalent to alphabetic in horizontal writing modes and in vertical writing modes when text-orientation is sideways. Equivalent to central in vertical writing modes when text-orientation is mixed or upright. However, in SVG text, the origin point of glyphs (used for coordinate-based glyph positioning) is always handled as for central in vertical writing modes.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "text-bottom",
            "prose": "Use the text-under baselines.",
            "type": "value",
            "value": "text-bottom"
          },
          {
            "name": "alphabetic",
            "prose": "Use the alphabetic baselines.",
            "type": "value",
            "value": "alphabetic"
          },
          {
            "name": "ideographic",
            "prose": "Use the ideographic-under baselines.",
            "type": "value",
            "value": "ideographic"
          },
          {
            "name": "middle",
            "prose": "Use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline.",
            "type": "value",
            "value": "middle"
          },
          {
            "name": "central",
            "prose": "Use the central baselines.",
            "type": "value",
            "value": "central"
          },
          {
            "name": "mathematical",
            "prose": "Use the math baselines.",
            "type": "value",
            "value": "mathematical"
          },
          {
            "name": "hanging",
            "prose": "Use the hanging baselines.",
            "type": "value",
            "value": "hanging"
          },
          {
            "name": "text-top",
            "prose": "Use the text-over baselines.",
            "type": "value",
            "value": "text-top"
          }
        ],
        "styleDeclaration": [
          "dominant-baseline",
          "dominantBaseline"
        ]
      },
      {
        "name": "vertical-align",
        "value": "[ first | last] || <'alignment-baseline'> || <'baseline-shift'>",
        "initial": "baseline",
        "appliesTo": "see individual properties",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "Specifies last-baseline alignment for inline-block, first-baseline alignment for everything else.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "first",
            "prose": "Specifies first-baseline alignment.",
            "type": "value",
            "value": "first"
          },
          {
            "name": "last",
            "prose": "Specifies last-baseline alignment.",
            "type": "value",
            "value": "last"
          },
          {
            "name": "baseline",
            "prose": "Use the dominant baseline choice of the parent.",
            "type": "value",
            "value": "baseline"
          },
          {
            "name": "text-bottom",
            "prose": "Use the text-under baseline.",
            "type": "value",
            "value": "text-bottom"
          },
          {
            "name": "alphabetic",
            "prose": "Use the alphabetic baseline.",
            "type": "value",
            "value": "alphabetic"
          },
          {
            "name": "ideographic",
            "prose": "Use the ideographic-under baseline.",
            "type": "value",
            "value": "ideographic"
          },
          {
            "name": "middle",
            "prose": "In general, use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline instead.",
            "type": "value",
            "value": "middle"
          },
          {
            "name": "central",
            "prose": "Use the central baseline.",
            "type": "value",
            "value": "central"
          },
          {
            "name": "mathematical",
            "prose": "Use the math baseline.",
            "type": "value",
            "value": "mathematical"
          },
          {
            "name": "text-top",
            "prose": "Use the text-over baseline.",
            "type": "value",
            "value": "text-top"
          },
          {
            "name": "<length>",
            "prose": "Raise (positive value) or lower (negative value) by the specified length.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "Raise (positive value) or lower (negative value) by the specified percentage of the line-height.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "sub",
            "prose": "Lower by the offset appropriate for subscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to dropping by one fifth of the parent’s used font-size.",
            "type": "value",
            "value": "sub"
          },
          {
            "name": "super",
            "prose": "Raise by the offset appropriate for superscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to raising by one third of the parent’s used font-size.",
            "type": "value",
            "value": "super"
          },
          {
            "name": "top",
            "prose": "Align the line-over edge of the aligned subtree with the line-over edge of the line box.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "center",
            "prose": "Align the center of the aligned subtree with the center of the line box.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "bottom",
            "prose": "Align the line-under edge of the aligned subtree with the line-under edge of the line box.",
            "type": "value",
            "value": "bottom"
          }
        ],
        "styleDeclaration": [
          "vertical-align",
          "verticalAlign"
        ]
      },
      {
        "name": "baseline-source",
        "value": "auto | first | last",
        "initial": "auto",
        "appliesTo": "inline-level boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Specifies last-baseline alignment for inline-block, first-baseline alignment for everything else.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "first",
            "prose": "Specifies first-baseline alignment.",
            "type": "value",
            "value": "first"
          },
          {
            "name": "last",
            "prose": "Specifies last-baseline alignment.",
            "type": "value",
            "value": "last"
          }
        ],
        "styleDeclaration": [
          "baseline-source",
          "baselineSource"
        ]
      },
      {
        "name": "alignment-baseline",
        "value": "baseline | text-bottom | alphabetic | ideographic | middle | central | mathematical | text-top",
        "initial": "baseline",
        "appliesTo": "inline-level boxes, flex items, grid items, table cells, and SVG text content elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "baseline",
            "prose": "Use the dominant baseline choice of the parent.",
            "type": "value",
            "value": "baseline"
          },
          {
            "name": "text-bottom",
            "prose": "Use the text-under baseline.",
            "type": "value",
            "value": "text-bottom"
          },
          {
            "name": "alphabetic",
            "prose": "Use the alphabetic baseline.",
            "type": "value",
            "value": "alphabetic"
          },
          {
            "name": "ideographic",
            "prose": "Use the ideographic-under baseline.",
            "type": "value",
            "value": "ideographic"
          },
          {
            "name": "middle",
            "prose": "In general, use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline instead.",
            "type": "value",
            "value": "middle"
          },
          {
            "name": "central",
            "prose": "Use the central baseline.",
            "type": "value",
            "value": "central"
          },
          {
            "name": "mathematical",
            "prose": "Use the math baseline.",
            "type": "value",
            "value": "mathematical"
          },
          {
            "name": "text-top",
            "prose": "Use the text-over baseline.",
            "type": "value",
            "value": "text-top"
          },
          {
            "name": "text-before-edge",
            "type": "value",
            "value": "text-top"
          },
          {
            "name": "text-after-edge",
            "type": "value",
            "value": "text-bottom"
          }
        ],
        "styleDeclaration": [
          "alignment-baseline",
          "alignmentBaseline"
        ]
      },
      {
        "name": "baseline-shift",
        "value": "<length-percentage> | sub | super | top | center | bottom",
        "initial": "0",
        "appliesTo": "inline-level boxes and SVG text content elements",
        "inherited": "no",
        "percentages": "refer to the used value of line-height",
        "computedValue": "the specified keyword or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "Raise (positive value) or lower (negative value) by the specified length.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "Raise (positive value) or lower (negative value) by the specified percentage of the line-height.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "sub",
            "prose": "Lower by the offset appropriate for subscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to dropping by one fifth of the parent’s used font-size.",
            "type": "value",
            "value": "sub"
          },
          {
            "name": "super",
            "prose": "Raise by the offset appropriate for superscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to raising by one third of the parent’s used font-size.",
            "type": "value",
            "value": "super"
          },
          {
            "name": "top",
            "prose": "Align the line-over edge of the aligned subtree with the line-over edge of the line box.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "center",
            "prose": "Align the center of the aligned subtree with the center of the line box.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "bottom",
            "prose": "Align the line-under edge of the aligned subtree with the line-under edge of the line box.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "baseline",
            "prose": "User agents may additionally support the keyword baseline as computing to 0 if is necessary for them to support legacy SVG content. This value is not allowed in the vertical-align shorthand.",
            "type": "value",
            "value": "baseline"
          }
        ],
        "styleDeclaration": [
          "baseline-shift",
          "baselineShift"
        ]
      },
      {
        "name": "line-height",
        "value": "normal | <number> | <length-percentage>",
        "initial": "normal",
        "appliesTo": "non-replaced inline boxes and SVG text content elements",
        "inherited": "yes",
        "percentages": "computed relative to 1em",
        "computedValue": "the specified keyword, a number, or a computed <length> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "Determine the preferred line height automatically based on font metrics.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<length>",
            "prose": "The specified length is used as the preferred line height. Negative values are illegal.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<number>",
            "prose": "The preferred line height is this number multiplied by the element’s computed font-size. Negative values are illegal. The computed value is the same as the specified value.",
            "type": "value",
            "value": "<number>"
          },
          {
            "name": "<percentage>",
            "prose": "The preferred line height and computed value of the property is this percentage of the element’s computed font-size. Negative values are illegal.",
            "type": "value",
            "value": "<percentage>"
          }
        ],
        "styleDeclaration": [
          "line-height",
          "lineHeight"
        ]
      },
      {
        "name": "text-edge",
        "value": "leading | [ text | cap | ex | ideographic | ideographic-ink ] [ text | alphabetic | ideographic | ideographic-ink ]?",
        "initial": "leading",
        "appliesTo": "inline boxes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "leading",
            "prose": "Use the ascent/descent plus any positive half-leading. Margin/padding/border is ignored for the purpose of sizing the line box.",
            "type": "value",
            "value": "leading"
          },
          {
            "name": "text",
            "prose": "Use the text-over baseline/text-under baseline.",
            "type": "value",
            "value": "text"
          },
          {
            "name": "cap",
            "prose": "Use the cap-height baseline.",
            "type": "value",
            "value": "cap"
          },
          {
            "name": "ex",
            "prose": "Use the x-height baseline.",
            "type": "value",
            "value": "ex"
          },
          {
            "name": "ideographic",
            "prose": "Use the ideographic-over baseline/ideographic-under baseline.",
            "type": "value",
            "value": "ideographic"
          },
          {
            "name": "ideographic-ink",
            "prose": "Use the ideographic-ink-over baseline/ideographic-ink-under baseline.",
            "type": "value",
            "value": "ideographic-ink"
          },
          {
            "name": "alphabetic",
            "prose": "Use the alphabetic baseline.",
            "type": "value",
            "value": "alphabetic"
          }
        ],
        "styleDeclaration": [
          "text-edge",
          "textEdge"
        ]
      },
      {
        "name": "leading-trim",
        "value": "normal | start | end | both",
        "initial": "normal",
        "appliesTo": "block containers and inline boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "No special handling of the first/last line box when applied to a block container. When applied to an inline box, specifies that the over/under content edges coincide with the text-over/text-under baselines regardless of text-edge (which nonetheless still affects line box sizing).",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "start",
            "prose": "For block containers: trim the block-start side of the first formatted line to the corresponding text-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-edge (treating leading as text).",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "For block containers: trim the block-end side of the last formatted line to the corresponding text-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-edge (treating leading as text).",
            "type": "value",
            "value": "end"
          },
          {
            "name": "both",
            "prose": "Specifies the behavior of start and end simultaneously.",
            "type": "value",
            "value": "both"
          }
        ],
        "styleDeclaration": [
          "leading-trim",
          "leadingTrim"
        ]
      },
      {
        "name": "inline-sizing",
        "value": "normal | stretch",
        "initial": "normal",
        "appliesTo": "inline boxes, but not ruby container boxes nor internal ruby boxes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "The content area of the inline box is sized and positioned to fit (possibly hypothetical) text from its first available font. This specification does not specify how. A UA may, e.g., use the maximum ascender and descender of the font. (This would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.)",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "stretch",
            "prose": "Once the line box has been sized and its contents positioned as for normal, the inline box’s box edges are shifted such that its over/under margin edges coincide with the corresponding line box’s edges, stretching the inline box’s inner logical height so that its block-axis outer size fills the line box. (The sizes and positions of its in-flow contents are not affected.)",
            "type": "value",
            "value": "stretch"
          }
        ],
        "styleDeclaration": [
          "inline-sizing",
          "inlineSizing"
        ]
      },
      {
        "name": "initial-letter",
        "value": "normal | <number [1,∞]> <integer [1,∞]> | <number [1,∞]> && [ drop | raise ]?",
        "initial": "normal",
        "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword normal or a number paired with an integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "No special initial letter effect. Text behaves as normal.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<number [1,∞]>",
            "prose": "This first argument defines the size of the initial letter in terms of how many lines it occupies. Values less than one are invalid.",
            "type": "value",
            "value": "<number [1,∞]>"
          },
          {
            "name": "<integer [1,∞]>",
            "prose": "This optional second argument defines the number of lines the initial letter should sink. A value of 1 indicates a raised initial; values greater than 1 indicate a sunken initial. Values less than one are invalid.",
            "type": "value",
            "value": "<integer [1,∞]>"
          },
          {
            "name": "raise",
            "prose": "Computes to an initial letter sink of 1.",
            "type": "value",
            "value": "raise"
          },
          {
            "name": "drop",
            "prose": "Computes to an initial letter sink equal to the initial letter size floored to the nearest positive whole number.",
            "type": "value",
            "value": "drop"
          }
        ],
        "styleDeclaration": [
          "initial-letter",
          "initialLetter"
        ]
      },
      {
        "name": "initial-letter-align",
        "value": "[ border-box? [ alphabetic | ideographic | hanging | leading ]? ]!",
        "initial": "alphabetic",
        "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "alphabetic",
            "prose": "Use the cap-height and alphabetic baselines of the surrounding text to align the initial letter.",
            "type": "value",
            "value": "alphabetic"
          },
          {
            "name": "ideographic",
            "prose": "Use the ideographic-ink-over and ideographic-ink-under baselines of the surrounding text to align the initial letter.",
            "type": "value",
            "value": "ideographic"
          },
          {
            "name": "hanging",
            "prose": "Use the hanging and alphabetic baselines of the surrounding text to align the initial letter.",
            "type": "value",
            "value": "hanging"
          },
          {
            "name": "leading",
            "prose": "Use the over/under half-leading edges (i.e. ascent/descent + half-leading) of the surrounding text to align the initial letter.",
            "type": "value",
            "value": "leading"
          },
          {
            "name": "border-box",
            "prose": "Use the initial letter box’s line-under and line-over border edges as the over and under alignment points, respectively.",
            "type": "value",
            "value": "border-box"
          }
        ],
        "styleDeclaration": [
          "initial-letter-align",
          "initialLetterAlign"
        ]
      },
      {
        "name": "initial-letter-wrap",
        "value": "none | first | all | grid | <length-percentage>",
        "initial": "none",
        "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
        "inherited": "yes",
        "percentages": "relative to logical width of (last fragment of) initial letter",
        "computedValue": "specified keyword or computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "No contour-fitting is performed: each impacted line is aligned flush to the inline-end margin edge of the initial letter.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "first",
            "prose": "Behaves as none if the first typographic character unit after the initial letter belongs to Unicode General Category Zs. Otherwise behaves as for all on the first line of the block containing the initial letter and as none on the rest. This example shows why contour-fitting the first line is necessary, and why it is dropped when the initial letter is followed by a space: In the top paragraph, the initial letter \"A\" has a word space after it: the gap between the top of the \"A\" and the next letter provides the necessary word separation. In the next paragraph, the initial letter \"A\" is part of the first word, and leaving a gap between the top of the \"A\" and the next letter would create a jarring visual break within the word. In this case, the first line of text should be kerned into the initial letter’s area, as shown in the bottom paragraph. Do we need an unconditional first? (I.e. Should we rename this value to auto and add a first value that does not check for spaces?) See GitHub issue 410",
            "type": "value",
            "value": "first"
          },
          {
            "name": "all",
            "prose": "For each line of text impacted by the initial letter, the line box adjacent to the initial letter starts at the start-most point that does not overlap the initial letter’s glyph outline. If the value of shape-outside is not none, shape-outside is used instead of the glyph outline. In both cases, shape-margin is applied to expand the outline, and the resulting outline is clipped by the initial letter’s margin edges.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "grid",
            "prose": "This value is the same as none, except that the exclusion area of the impacted lines is increased as necessary for its end-edge to land on the character grid, i.e. to be a multiple of (1ic + letter-spacing) as computed on the containing block. The justify-self property can then be used to align the initial letter box within the exclusion area. Diagram of Japanese initial letter in vertical writing mode",
            "type": "value",
            "value": "grid"
          },
          {
            "name": "<length>",
            "prose": "This value behaves the same as first except that the adjustment to the first line is given explicitly instead of being inferred from the glyph shape. This really needs font-relative lengths to be relative to the used size. In the following example, UAs that support first will use the glyph outline plus the specified margin in order to place the first line, whereas UAs that only support <length> or <percentage> values will pull in the first line by 40% of the initial letter’s width (and then add the margin to that point). h1 + p:first-letter { initial-letter: 3; /* 3-line drop-cap */ initial-letter-wrap: first; margin-right: 0.1em; } @supports (not (initial-letter-wrap: first)) { /* Classes auto-generated on paragraphs to match first letter. */ p.A:first-letter { initial-letter-wrap: -40%; /* Start of glyph outline, assuming correct font. */ } } These values and related annoyance is likely unnecessary if someone submits a patch to Blink to support first.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "This value behaves the same as first except that the adjustment to the first line is given explicitly instead of being inferred from the glyph shape. This really needs font-relative lengths to be relative to the used size. In the following example, UAs that support first will use the glyph outline plus the specified margin in order to place the first line, whereas UAs that only support <length> or <percentage> values will pull in the first line by 40% of the initial letter’s width (and then add the margin to that point). h1 + p:first-letter { initial-letter: 3; /* 3-line drop-cap */ initial-letter-wrap: first; margin-right: 0.1em; } @supports (not (initial-letter-wrap: first)) { /* Classes auto-generated on paragraphs to match first letter. */ p.A:first-letter { initial-letter-wrap: -40%; /* Start of glyph outline, assuming correct font. */ } } These values and related annoyance is likely unnecessary if someone submits a patch to Blink to support first.",
            "type": "value",
            "value": "<percentage>"
          }
        ],
        "styleDeclaration": [
          "initial-letter-wrap",
          "initialLetterWrap"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-layout-api": {
    "spec": {
      "title": "CSS Layout API Level 1",
      "url": "https://drafts.css-houdini.org/css-layout-api-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "layout()",
        "prose": "This value causes an element to generate a layout API container box.",
        "type": "value",
        "value": "layout()",
        "for": "display"
      }
    ]
  },
  "css-line-grid": {
    "spec": {
      "title": "CSS Line Grid Module Level 1",
      "url": "https://drafts.csswg.org/css-line-grid-1/"
    },
    "properties": [
      {
        "name": "line-grid",
        "value": "match-parent | create",
        "initial": "match-parent",
        "appliesTo": "block, flex and grid containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "match-parent",
            "prose": "Box assumes the line grid of its parent if its writing mode is the same as its parent. If the box has a writing mode that is different than its parent, then the box creates a new line grid as create below.",
            "type": "value",
            "value": "match-parent"
          },
          {
            "name": "create",
            "prose": "Box creates a new line grid using its own font and line layout settings, including any adjustment to the line height caused by the line-height-step property. The line grid consists of a series of horizontal lines corresponding to all the baselines (alphabetic, text-top, text-bottom, mathematic, central, hanging, etc.) and to the line-over and line-under edges, positioned where they would fall if the contents of this element consisted entirely of line boxes filled with text (no sub-elements) using the first available font. If the box is paginated, the line grid is restarted on each page; since line boxes cannot be fragmented, no page begins with the bottom part of a line’s grid.",
            "type": "value",
            "value": "create"
          }
        ],
        "styleDeclaration": [
          "line-grid",
          "lineGrid"
        ]
      },
      {
        "name": "line-snap",
        "value": "none | baseline | contain",
        "initial": "none",
        "appliesTo": "block container elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Line boxes do not snap to the grid; they stack normally.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "baseline",
            "prose": "The dominant baseline snaps with the matching baseline on the line grid applying to the element.",
            "type": "value",
            "value": "baseline"
          },
          {
            "name": "contain",
            "prose": "Two baselines are used to align the line box: the line box is snapped so that its central baseline is centered between one of the line grid’s text-over-edge baselines and a subsequent (but not necessarily consecutive) text-under-edge baseline.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "line-snap",
          "lineSnap"
        ]
      },
      {
        "name": "box-snap",
        "value": "none | block-start | block-end | center | baseline | last-baseline",
        "initial": "none",
        "appliesTo": "block-level boxes and internal table elements except table cells",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The block is not snapped to any grid.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "block-start",
            "prose": "The block-start edge is snapped to the nearest grid line.",
            "type": "value",
            "value": "block-start"
          },
          {
            "name": "block-end",
            "prose": "The block-end edge is snapped to the nearest grid line.",
            "type": "value",
            "value": "block-end"
          },
          {
            "name": "center",
            "prose": "The block is centered between one of the baseline grid’s text-over baselines and a subsequent (but not necessarily consecutive) text-under baseline.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "baseline",
            "prose": "The first line box’s dominant baseline is snapped to the nearest grid line.",
            "type": "value",
            "value": "baseline"
          },
          {
            "name": "last-baseline",
            "prose": "The last line box’s dominant baseline is snapped to the nearest grid line.",
            "type": "value",
            "value": "last-baseline"
          }
        ],
        "styleDeclaration": [
          "box-snap",
          "boxSnap"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-link-params": {
    "spec": {
      "title": "CSS Linked Parameters",
      "url": "https://drafts.csswg.org/css-link-params-1/"
    },
    "properties": [
      {
        "name": "link-parameters",
        "value": "none | <link-param>+",
        "initial": "none",
        "appliesTo": "all elements and pseudo-elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "link-parameters",
          "linkParameters"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<link-param>",
        "type": "type",
        "value": "param( <custom-property-name> <declaration-value>? )"
      }
    ]
  },
  "css-lists": {
    "spec": {
      "title": "CSS Lists and Counters Module Level 3",
      "url": "https://drafts.csswg.org/css-lists-3/"
    },
    "properties": [
      {
        "name": "list-style-image",
        "value": "<image> | none",
        "initial": "none",
        "appliesTo": "list items",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword noneor the computed <image>",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<image>",
            "prose": "If the <image> represents a valid image, specifies the element’s marker image as the <image>. Otherwise, the element has no marker image.",
            "type": "value",
            "value": "<image>"
          },
          {
            "name": "none",
            "prose": "The element has no marker image.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "list-style-image",
          "listStyleImage"
        ]
      },
      {
        "name": "list-style-type",
        "value": "<counter-style> | <string> | none",
        "initial": "disc",
        "appliesTo": "list items",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<counter-style>",
            "prose": "Specifies the element’s marker string as the value of the list-item counter represented using the specified <counter-style>. Specifically, the marker string is the result of generating a counter representation of the list-item counter value using the specified <counter-style>, prefixed by the prefix of the <counter-style>, and followed by the suffix of the <counter-style>. If the specified <counter-style> does not exist, decimal is assumed.",
            "type": "value",
            "value": "<counter-style>"
          },
          {
            "name": "<string>",
            "prose": "The element’s marker string is the specified <string>.",
            "type": "value",
            "value": "<string>"
          },
          {
            "name": "none",
            "prose": "The element has no marker string.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "list-style-type",
          "listStyleType"
        ]
      },
      {
        "name": "list-style-position",
        "value": "inside | outside",
        "initial": "outside",
        "appliesTo": "list items",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "keyword, but see prose",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "inside",
            "prose": "No special effect. (The ::marker is an inline element at the start of the list item’s contents.)",
            "type": "value",
            "value": "inside"
          },
          {
            "name": "outside",
            "prose": "If the list item is a block container: the marker box is a block container and is placed outside the principal block box; however, the position of the list-item marker adjacent to floats is undefined. CSS does not specify the precise location of the marker box or its position in the painting order, but does require that it be placed on the inline-start side of the box, using the writing mode of the box indicated by marker-side. The marker box is fixed with respect to the principal block box’s border and does not scroll with the principal box’s content. A UA may hide the marker if the element’s overflow is other than visible. (This allowance may change in the future.) The size or contents of the marker box may affect the height of the principal block box and/or the height of its first line box, and in some cases may cause the creation of a new line box; this interaction is also not defined. This is handwavey nonsense from CSS2, and needs a real definition. If the list item is an inline box: this value is equivalent to inside. Alternatively, outside could lay out the marker as a previous sibling of the principal inline box.",
            "type": "value",
            "value": "outside"
          }
        ],
        "styleDeclaration": [
          "list-style-position",
          "listStylePosition"
        ]
      },
      {
        "name": "list-style",
        "value": "<'list-style-position'> || <'list-style-image'> || <'list-style-type'>",
        "initial": "see individual properties",
        "appliesTo": "list items",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "list-style",
          "listStyle"
        ]
      },
      {
        "name": "marker-side",
        "value": "match-self | match-parent",
        "initial": "match-self",
        "appliesTo": "list items",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "match-self",
            "prose": "The marker box is positioned using the directionality of the ::marker’s originating element.",
            "type": "value",
            "value": "match-self"
          },
          {
            "name": "match-parent",
            "prose": "The marker box is positioned using the directionality of the ::marker’s originating element’s parent element.",
            "type": "value",
            "value": "match-parent"
          }
        ],
        "styleDeclaration": [
          "marker-side",
          "markerSide"
        ]
      },
      {
        "name": "counter-reset",
        "value": "[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or a list, each item an identifier or a reversed() function paired with an integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "This element does not create any new counters.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<counter-name> <integer>?",
            "prose": "Instantiates a counter of the given <counter-name> with a starting value of the given <integer>, defaulting to 0.",
            "type": "value",
            "value": "<counter-name> <integer>?"
          },
          {
            "name": "<reversed-counter-name> <integer>?",
            "prose": "Instantiates a reversed counter of the given <counter-name> with a starting value of the given <integer>, or no starting value if not given.",
            "type": "value",
            "value": "<reversed-counter-name> <integer>?"
          },
          {
            "name": "list-item",
            "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
            "type": "value",
            "value": "list-item"
          }
        ],
        "styleDeclaration": [
          "counter-reset",
          "counterReset"
        ]
      },
      {
        "name": "counter-increment",
        "value": "[ <counter-name> <integer>? ]+ | none",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or a list, each item an identifier paired with an integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "This element does not alter the value of any counters.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<counter-name> <integer>?",
            "prose": "Sets (for counter-set) or increments (for counter-increment) the value of the named counter on the element to/by the specified <integer>. If the <integer> is omitted, it defaults to 1 (for counter-increment) or 0 (for counter-set). If there is not currently a counter of the given name on the element, the element instantiates a new counter of the given name with a starting value of 0 before setting or incrementing its value.",
            "type": "value",
            "value": "<counter-name> <integer>?"
          },
          {
            "name": "list-item",
            "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
            "type": "value",
            "value": "list-item"
          }
        ],
        "styleDeclaration": [
          "counter-increment",
          "counterIncrement"
        ]
      },
      {
        "name": "counter-set",
        "value": "[ <counter-name> <integer>? ]+ | none",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or a list, each item an identifier paired with an integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "This element does not alter the value of any counters.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<counter-name> <integer>?",
            "prose": "Sets (for counter-set) or increments (for counter-increment) the value of the named counter on the element to/by the specified <integer>. If the <integer> is omitted, it defaults to 1 (for counter-increment) or 0 (for counter-set). If there is not currently a counter of the given name on the element, the element instantiates a new counter of the given name with a starting value of 0 before setting or incrementing its value.",
            "type": "value",
            "value": "<counter-name> <integer>?"
          },
          {
            "name": "list-item",
            "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
            "type": "value",
            "value": "list-item"
          }
        ],
        "styleDeclaration": [
          "counter-set",
          "counterSet"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<counter-name>",
        "prose": "Counters are referred to in CSS syntax using the <counter-name> type, which represents their name as a <custom-ident>. A <counter-name> name cannot match the keyword none; such an identifier is invalid as a <counter-name>.",
        "type": "type"
      },
      {
        "name": "<reversed-counter-name>",
        "type": "type",
        "value": "reversed( <counter-name> )"
      },
      {
        "name": "<counter>",
        "type": "type",
        "value": "<counter()> | <counters()>"
      },
      {
        "name": "counter()",
        "type": "function",
        "value": "counter( <counter-name>, <counter-style>? )",
        "values": [
          {
            "name": "list-item",
            "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
            "type": "value",
            "value": "list-item"
          }
        ]
      },
      {
        "name": "counters()",
        "type": "function",
        "value": "counters( <counter-name>, <string>, <counter-style>? )",
        "values": [
          {
            "name": "list-item",
            "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
            "type": "value",
            "value": "list-item"
          }
        ]
      }
    ]
  },
  "css-logical": {
    "spec": {
      "title": "CSS Logical Properties and Values Level 1",
      "url": "https://drafts.csswg.org/css-logical-1/"
    },
    "properties": [
      {
        "name": "block-size",
        "value": "<'width'>",
        "initial": "auto",
        "appliesTo": "Same as height and width",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as height, width",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "block-size",
          "blockSize"
        ]
      },
      {
        "name": "inline-size",
        "value": "<'width'>",
        "initial": "auto",
        "appliesTo": "Same as height and width",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as height, width",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "inline-size",
          "inlineSize"
        ]
      },
      {
        "name": "min-block-size",
        "value": "<'min-width'>",
        "initial": "0",
        "appliesTo": "same as height and width",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as min-height, min-width",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "min-block-size",
          "minBlockSize"
        ]
      },
      {
        "name": "min-inline-size",
        "value": "<'min-width'>",
        "initial": "0",
        "appliesTo": "same as height and width",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as min-height, min-width",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "min-inline-size",
          "minInlineSize"
        ]
      },
      {
        "name": "max-block-size",
        "value": "<'max-width'>",
        "initial": "none",
        "appliesTo": "same as height and width",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as max-height, max-width",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "max-block-size",
          "maxBlockSize"
        ]
      },
      {
        "name": "max-inline-size",
        "value": "<'max-width'>",
        "initial": "none",
        "appliesTo": "same as height and width",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as max-height, max-width",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "max-inline-size",
          "maxInlineSize"
        ]
      },
      {
        "name": "margin-block-start",
        "value": "<'margin-top'>",
        "initial": "0",
        "appliesTo": "Same as margin-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding margin-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-block-start",
          "marginBlockStart"
        ]
      },
      {
        "name": "margin-block-end",
        "value": "<'margin-top'>",
        "initial": "0",
        "appliesTo": "Same as margin-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding margin-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-block-end",
          "marginBlockEnd"
        ]
      },
      {
        "name": "margin-inline-start",
        "value": "<'margin-top'>",
        "initial": "0",
        "appliesTo": "Same as margin-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding margin-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-inline-start",
          "marginInlineStart"
        ]
      },
      {
        "name": "margin-inline-end",
        "value": "<'margin-top'>",
        "initial": "0",
        "appliesTo": "Same as margin-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding margin-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "margin-inline-end",
          "marginInlineEnd"
        ]
      },
      {
        "name": "margin-block",
        "value": "<'margin-top'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "margin-block",
          "marginBlock"
        ]
      },
      {
        "name": "margin-inline",
        "value": "<'margin-top'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "margin-inline",
          "marginInline"
        ]
      },
      {
        "name": "padding-block-start",
        "value": "<'padding-top'>",
        "initial": "0",
        "appliesTo": "Same as padding-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding padding-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-block-start",
          "paddingBlockStart"
        ]
      },
      {
        "name": "padding-block-end",
        "value": "<'padding-top'>",
        "initial": "0",
        "appliesTo": "Same as padding-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding padding-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-block-end",
          "paddingBlockEnd"
        ]
      },
      {
        "name": "padding-inline-start",
        "value": "<'padding-top'>",
        "initial": "0",
        "appliesTo": "Same as padding-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding padding-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-inline-start",
          "paddingInlineStart"
        ]
      },
      {
        "name": "padding-inline-end",
        "value": "<'padding-top'>",
        "initial": "0",
        "appliesTo": "Same as padding-top",
        "inherited": "no",
        "percentages": "As for the corresponding physical property",
        "computedValue": "Same as corresponding padding-* properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "padding-inline-end",
          "paddingInlineEnd"
        ]
      },
      {
        "name": "padding-block",
        "value": "<'padding-top'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "padding-block",
          "paddingBlock"
        ]
      },
      {
        "name": "padding-inline",
        "value": "<'padding-top'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "padding-inline",
          "paddingInline"
        ]
      },
      {
        "name": "border-block-start-width",
        "value": "<'border-top-width'>",
        "initial": "medium",
        "appliesTo": "Same as border-top-width",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-width properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-block-start-width",
          "borderBlockStartWidth"
        ]
      },
      {
        "name": "border-block-end-width",
        "value": "<'border-top-width'>",
        "initial": "medium",
        "appliesTo": "Same as border-top-width",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-width properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-block-end-width",
          "borderBlockEndWidth"
        ]
      },
      {
        "name": "border-inline-start-width",
        "value": "<'border-top-width'>",
        "initial": "medium",
        "appliesTo": "Same as border-top-width",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-width properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-inline-start-width",
          "borderInlineStartWidth"
        ]
      },
      {
        "name": "border-inline-end-width",
        "value": "<'border-top-width'>",
        "initial": "medium",
        "appliesTo": "Same as border-top-width",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-width properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-inline-end-width",
          "borderInlineEndWidth"
        ]
      },
      {
        "name": "border-block-width",
        "value": "<'border-top-width'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-block-width",
          "borderBlockWidth"
        ]
      },
      {
        "name": "border-inline-width",
        "value": "<'border-top-width'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-inline-width",
          "borderInlineWidth"
        ]
      },
      {
        "name": "border-block-start-style",
        "value": "<'border-top-style'>",
        "initial": "none",
        "appliesTo": "Same as border-top-style",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-style properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-block-start-style",
          "borderBlockStartStyle"
        ]
      },
      {
        "name": "border-block-end-style",
        "value": "<'border-top-style'>",
        "initial": "none",
        "appliesTo": "Same as border-top-style",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-style properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-block-end-style",
          "borderBlockEndStyle"
        ]
      },
      {
        "name": "border-inline-start-style",
        "value": "<'border-top-style'>",
        "initial": "none",
        "appliesTo": "Same as border-top-style",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-style properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-inline-start-style",
          "borderInlineStartStyle"
        ]
      },
      {
        "name": "border-inline-end-style",
        "value": "<'border-top-style'>",
        "initial": "none",
        "appliesTo": "Same as border-top-style",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-style properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-inline-end-style",
          "borderInlineEndStyle"
        ]
      },
      {
        "name": "border-block-style",
        "value": "<'border-top-style'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-block-style",
          "borderBlockStyle"
        ]
      },
      {
        "name": "border-inline-style",
        "value": "<'border-top-style'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-inline-style",
          "borderInlineStyle"
        ]
      },
      {
        "name": "border-block-start-color",
        "value": "<'border-top-color'>",
        "initial": "currentcolor",
        "appliesTo": "Same as border-top-color",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-color properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-block-start-color",
          "borderBlockStartColor"
        ]
      },
      {
        "name": "border-block-end-color",
        "value": "<'border-top-color'>",
        "initial": "currentcolor",
        "appliesTo": "Same as border-top-color",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-color properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-block-end-color",
          "borderBlockEndColor"
        ]
      },
      {
        "name": "border-inline-start-color",
        "value": "<'border-top-color'>",
        "initial": "currentcolor",
        "appliesTo": "Same as border-top-color",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-color properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-inline-start-color",
          "borderInlineStartColor"
        ]
      },
      {
        "name": "border-inline-end-color",
        "value": "<'border-top-color'>",
        "initial": "currentcolor",
        "appliesTo": "Same as border-top-color",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Same as corresponding border-*-color properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-inline-end-color",
          "borderInlineEndColor"
        ]
      },
      {
        "name": "border-block-color",
        "value": "<'border-top-color'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-block-color",
          "borderBlockColor"
        ]
      },
      {
        "name": "border-inline-color",
        "value": "<'border-top-color'>{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-inline-color",
          "borderInlineColor"
        ]
      },
      {
        "name": "border-block-start",
        "value": "<'border-top-width'> || <'border-top-style'> || <color>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-block-start",
          "borderBlockStart"
        ]
      },
      {
        "name": "border-block-end",
        "value": "<'border-top-width'> || <'border-top-style'> || <color>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-block-end",
          "borderBlockEnd"
        ]
      },
      {
        "name": "border-inline-start",
        "value": "<'border-top-width'> || <'border-top-style'> || <color>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-inline-start",
          "borderInlineStart"
        ]
      },
      {
        "name": "border-inline-end",
        "value": "<'border-top-width'> || <'border-top-style'> || <color>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-inline-end",
          "borderInlineEnd"
        ]
      },
      {
        "name": "border-block",
        "value": "<'border-block-start'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-block",
          "borderBlock"
        ]
      },
      {
        "name": "border-inline",
        "value": "<'border-block-start'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "border-inline",
          "borderInline"
        ]
      },
      {
        "name": "border-start-start-radius",
        "value": "<'border-top-left-radius'>",
        "initial": "Same as border-top-left-radius",
        "appliesTo": "Same as border-top-left-radius",
        "inherited": "no",
        "percentages": "Same as border-top-left-radius",
        "computedValue": "Same as corresponding physical border-*-radius properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-start-start-radius",
          "borderStartStartRadius"
        ]
      },
      {
        "name": "border-start-end-radius",
        "value": "<'border-top-left-radius'>",
        "initial": "Same as border-top-left-radius",
        "appliesTo": "Same as border-top-left-radius",
        "inherited": "no",
        "percentages": "Same as border-top-left-radius",
        "computedValue": "Same as corresponding physical border-*-radius properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-start-end-radius",
          "borderStartEndRadius"
        ]
      },
      {
        "name": "border-end-start-radius",
        "value": "<'border-top-left-radius'>",
        "initial": "Same as border-top-left-radius",
        "appliesTo": "Same as border-top-left-radius",
        "inherited": "no",
        "percentages": "Same as border-top-left-radius",
        "computedValue": "Same as corresponding physical border-*-radius properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-end-start-radius",
          "borderEndStartRadius"
        ]
      },
      {
        "name": "border-end-end-radius",
        "value": "<'border-top-left-radius'>",
        "initial": "Same as border-top-left-radius",
        "appliesTo": "Same as border-top-left-radius",
        "inherited": "no",
        "percentages": "Same as border-top-left-radius",
        "computedValue": "Same as corresponding physical border-*-radius properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "border-end-end-radius",
          "borderEndEndRadius"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "recto",
        "prose": "Equivalent to right in left-to-right page progressions and left in right-to-left page progressions.",
        "type": "value",
        "value": "recto",
        "for": "logical-page"
      },
      {
        "msg": "Dangling value",
        "name": "verso",
        "prose": "Equivalent to left in left-to-right page progressions and right in right-to-left page progressions.",
        "type": "value",
        "value": "verso",
        "for": "logical-page"
      },
      {
        "msg": "Dangling value",
        "name": ":recto",
        "prose": "Equivalent to ':right' in left-to-right page progressions and ':left' in right-to-left page progressions.",
        "type": "value",
        "value": ":recto",
        "for": "logical-page-selector"
      },
      {
        "msg": "Dangling value",
        "name": ":verso",
        "prose": "Equivalent to ':left' in left-to-right page progressions and ':right' in right-to-left page progressions.",
        "type": "value",
        "value": ":verso",
        "for": "logical-page-selector"
      },
      {
        "msg": "Dangling value",
        "name": "logical",
        "prose": "The shorthand properties for margin, padding, and border set values for physical properties by default. But authors can specify the logical keyword at the beginning of the property value to indicate that the values map to the flow-relative properties instead of the physical ones.",
        "type": "value",
        "value": "logical",
        "for": "margin"
      },
      {
        "msg": "Dangling value",
        "name": "logical",
        "prose": "The shorthand properties for margin, padding, and border set values for physical properties by default. But authors can specify the logical keyword at the beginning of the property value to indicate that the values map to the flow-relative properties instead of the physical ones.",
        "type": "value",
        "value": "logical",
        "for": "padding"
      },
      {
        "msg": "Dangling value",
        "name": "logical",
        "prose": "The shorthand properties for margin, padding, and border set values for physical properties by default. But authors can specify the logical keyword at the beginning of the property value to indicate that the values map to the flow-relative properties instead of the physical ones.",
        "type": "value",
        "value": "logical",
        "for": "border-color"
      },
      {
        "msg": "Dangling value",
        "name": "logical",
        "prose": "The shorthand properties for margin, padding, and border set values for physical properties by default. But authors can specify the logical keyword at the beginning of the property value to indicate that the values map to the flow-relative properties instead of the physical ones.",
        "type": "value",
        "value": "logical",
        "for": "border-style"
      },
      {
        "msg": "Dangling value",
        "name": "logical",
        "prose": "The shorthand properties for margin, padding, and border set values for physical properties by default. But authors can specify the logical keyword at the beginning of the property value to indicate that the values map to the flow-relative properties instead of the physical ones.",
        "type": "value",
        "value": "logical",
        "for": "border-width"
      }
    ]
  },
  "css-masking": {
    "spec": {
      "title": "CSS Masking Module Level 1",
      "url": "https://drafts.fxtf.org/css-masking-1/"
    },
    "properties": [
      {
        "name": "clip-path",
        "value": "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
        "initial": "none",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified, but with <url> values made absolute",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "values": [
          {
            "name": "fill-box",
            "prose": "Uses the object bounding box as reference box.",
            "type": "value",
            "value": "fill-box"
          },
          {
            "name": "stroke-box",
            "prose": "Uses the stroke bounding box as reference box.",
            "type": "value",
            "value": "stroke-box"
          },
          {
            "name": "view-box",
            "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
            "type": "value",
            "value": "view-box"
          }
        ],
        "styleDeclaration": [
          "clip-path",
          "clipPath"
        ]
      },
      {
        "name": "clip-rule",
        "value": "nonzero | evenodd",
        "initial": "nonzero",
        "appliesTo": "Applies to SVG graphics elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "nonzero",
            "prose": "See description of fill-rule property [SVG11].",
            "type": "value",
            "value": "nonzero"
          },
          {
            "name": "evenodd",
            "prose": "See description of fill-rule property [SVG11].",
            "type": "value",
            "value": "evenodd"
          }
        ],
        "styleDeclaration": [
          "clip-rule",
          "clipRule"
        ]
      },
      {
        "name": "mask-image",
        "value": "<mask-reference>#",
        "initial": "none",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none, a computed <image>, or a computed <url>",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "<url>",
            "prose": "A URL reference to a mask element (for example url(commonmasks.svg#mask)) or to a CSS image.",
            "type": "value",
            "value": "<url>"
          }
        ],
        "styleDeclaration": [
          "mask-image",
          "maskImage"
        ]
      },
      {
        "name": "mask-mode",
        "value": "<masking-mode>#",
        "initial": "match-source",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "alpha",
            "prose": "A value of alpha indicates that the alpha values of the mask layer image should be used as the mask values. See Calculating mask values.",
            "type": "value",
            "value": "alpha"
          },
          {
            "name": "luminance",
            "prose": "A value of luminance indicates that the luminance values of the mask layer image should be used as the mask values. See Calculating mask values.",
            "type": "value",
            "value": "luminance"
          },
          {
            "name": "match-source",
            "prose": "If the <mask-reference> of the mask-image property is of type <mask-source> the value specified by the referenced mask element’s mask-type property must be used. If the <mask-reference> of the mask-image property is of type <image> the alpha values of the mask layer image should be used as the mask values.",
            "type": "value",
            "value": "match-source"
          }
        ],
        "styleDeclaration": [
          "mask-mode",
          "maskMode"
        ]
      },
      {
        "name": "mask-repeat",
        "value": "<repeat-style>#",
        "initial": "repeat",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "Consists of: two keywords, one per dimension",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "styleDeclaration": [
          "mask-repeat",
          "maskRepeat"
        ]
      },
      {
        "name": "mask-position",
        "value": "<position>#",
        "initial": "0% 0%",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "refer to size of mask painting area minus size of mask layer image; see text background-position [CSS3BG]",
        "computedValue": "Consisting of: two keywords representing the origin and two offsets from that origin, each given as an absolute length (if given a <length>), otherwise as a percentage.",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "media": "visual",
        "styleDeclaration": [
          "mask-position",
          "maskPosition"
        ]
      },
      {
        "name": "mask-clip",
        "value": "[ <geometry-box> | no-clip ]#",
        "initial": "border-box",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "content-box",
            "prose": "The painted content is restricted to (clipped to) the content box.",
            "type": "value",
            "value": "content-box"
          },
          {
            "name": "padding-box",
            "prose": "The painted content is restricted to (clipped to) the padding box.",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "border-box",
            "prose": "The painted content is restricted to (clipped to) the border box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "fill-box",
            "prose": "The painted content is restricted to (clipped to) the object bounding box.",
            "type": "value",
            "value": "fill-box"
          },
          {
            "name": "stroke-box",
            "prose": "The painted content is restricted to (clipped to) the stroke bounding box.",
            "type": "value",
            "value": "stroke-box"
          },
          {
            "name": "view-box",
            "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
            "type": "value",
            "value": "view-box"
          },
          {
            "name": "no-clip",
            "prose": "The painted content is not restricted (not clipped).",
            "type": "value",
            "value": "no-clip"
          }
        ],
        "styleDeclaration": [
          "mask-clip",
          "maskClip"
        ]
      },
      {
        "name": "mask-origin",
        "value": "<geometry-box>#",
        "initial": "border-box",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "content-box",
            "prose": "The position is relative to the content box.",
            "type": "value",
            "value": "content-box"
          },
          {
            "name": "padding-box",
            "prose": "The position is relative to the padding box. (For single boxes 0 0 is the upper left corner of the padding edge, 100% 100% is the lower right corner.)",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "border-box",
            "prose": "The position is relative to the border box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "fill-box",
            "prose": "The position is relative to the object bounding box.",
            "type": "value",
            "value": "fill-box"
          },
          {
            "name": "stroke-box",
            "prose": "The position is relative to the stroke bounding box.",
            "type": "value",
            "value": "stroke-box"
          },
          {
            "name": "view-box",
            "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
            "type": "value",
            "value": "view-box"
          }
        ],
        "styleDeclaration": [
          "mask-origin",
          "maskOrigin"
        ]
      },
      {
        "name": "mask-size",
        "value": "<bg-size>#",
        "initial": "auto",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified, but with lengths made absolute",
        "canonicalOrder": "per grammar",
        "animationType": "repeatable list",
        "media": "visual",
        "styleDeclaration": [
          "mask-size",
          "maskSize"
        ]
      },
      {
        "name": "mask-composite",
        "value": "<compositing-operator>#",
        "initial": "add",
        "appliesTo": "All elements. In SVG, it applies to container elements without the defs element and all graphics elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "add",
            "prose": "The source is placed over the destination. (See Porter-Duff compositing operator source over for more details.)",
            "type": "value",
            "value": "add"
          },
          {
            "name": "subtract",
            "prose": "The source is placed, where it falls outside of the destination. (See Porter-Duff compositing operator source out for more details.)",
            "type": "value",
            "value": "subtract"
          },
          {
            "name": "intersect",
            "prose": "The parts of source that overlap the destination, replace the destination. (See Porter-Duff compositing operator source in .)",
            "type": "value",
            "value": "intersect"
          },
          {
            "name": "exclude",
            "prose": "The non-overlapping regions of source and destination are combined. (See Porter-Duff compositing operator XOR.)",
            "type": "value",
            "value": "exclude"
          }
        ],
        "styleDeclaration": [
          "mask-composite",
          "maskComposite"
        ]
      },
      {
        "name": "mask",
        "value": "<mask-layer>#",
        "initial": "see individual properties",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "see individual properties",
        "media": "visual",
        "styleDeclaration": [
          "mask"
        ]
      },
      {
        "name": "mask-border-source",
        "value": "none | <image>",
        "initial": "none",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "they keyword none or the computed <image>",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "styleDeclaration": [
          "mask-border-source",
          "maskBorderSource"
        ]
      },
      {
        "name": "mask-border-mode",
        "value": "luminance | alpha",
        "initial": "alpha",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "alpha",
            "prose": "A value of alpha indicates that the alpha values of the mask border image should be used as the mask values. See Calculating mask values.",
            "type": "value",
            "value": "alpha"
          },
          {
            "name": "luminance",
            "prose": "A value of luminance indicates that the luminance values of the mask border image should be used as the mask values. See Calculating mask values.",
            "type": "value",
            "value": "luminance"
          }
        ],
        "styleDeclaration": [
          "mask-border-mode",
          "maskBorderMode"
        ]
      },
      {
        "name": "mask-border-slice",
        "value": "[ <number> | <percentage> ]{1,4} fill?",
        "initial": "0",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "refer to size of the mask border image",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "fill",
            "prose": "This property specifies inward offsets from the top, right, bottom, and left edges of the mask border image, dividing it into nine regions: four corners, four edges and a middle. The middle image part is discarded and treated as fully opaque white (the content covered by the middle part is not masked and shines through) unless the fill keyword is present.",
            "type": "value",
            "value": "fill"
          }
        ],
        "styleDeclaration": [
          "mask-border-slice",
          "maskBorderSlice"
        ]
      },
      {
        "name": "mask-border-width",
        "value": "[ <length-percentage> | <number> | auto ]{1,4}",
        "initial": "auto",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "relative to width/height of the mask border image area",
        "computedValue": "all <length>s made absolute, otherwise as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "styleDeclaration": [
          "mask-border-width",
          "maskBorderWidth"
        ]
      },
      {
        "name": "mask-border-outset",
        "value": "[ <length> | <number> ]{1,4}",
        "initial": "0",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "all <length>s made absolute, otherwise as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "styleDeclaration": [
          "mask-border-outset",
          "maskBorderOutset"
        ]
      },
      {
        "name": "mask-border-repeat",
        "value": "[ stretch | repeat | round | space ]{1,2}",
        "initial": "stretch",
        "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "styleDeclaration": [
          "mask-border-repeat",
          "maskBorderRepeat"
        ]
      },
      {
        "name": "mask-border",
        "value": "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
        "initial": "See individual properties",
        "appliesTo": "See individual properties",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "See individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "See individual properties",
        "media": "visual",
        "styleDeclaration": [
          "mask-border",
          "maskBorder"
        ]
      },
      {
        "name": "mask-type",
        "value": "luminance | alpha",
        "initial": "luminance",
        "appliesTo": "mask elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "luminance",
            "prose": "Indicates that the luminance values of the mask should be used.",
            "type": "value",
            "value": "luminance"
          },
          {
            "name": "alpha",
            "prose": "Indicates that the alpha values of the mask should be used.",
            "type": "value",
            "value": "alpha"
          }
        ],
        "styleDeclaration": [
          "mask-type",
          "maskType"
        ]
      },
      {
        "name": "clip",
        "value": "<rect()> | auto",
        "initial": "auto",
        "appliesTo": "Absolutely positioned elements. In SVG, it applies to elements which establish a new viewport, pattern elements and mask elements.",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "values": [
          {
            "name": "rect()",
            "value": "rect( <top>, <right>, <bottom>, <left> )",
            "type": "function"
          },
          {
            "name": "<top>",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "type"
          },
          {
            "name": "<right>",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "type"
          },
          {
            "name": "<bottom>",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "type"
          },
          {
            "name": "<left>",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "type"
          }
        ],
        "styleDeclaration": [
          "clip"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<clip-source>",
        "type": "type",
        "value": "<url>"
      },
      {
        "name": "<geometry-box>",
        "type": "type",
        "value": "<shape-box> | fill-box | stroke-box | view-box"
      },
      {
        "name": "<mask-reference>",
        "type": "type",
        "value": "none | <image> | <mask-source>"
      },
      {
        "name": "<mask-source>",
        "type": "type",
        "value": "<url>"
      },
      {
        "name": "<masking-mode>",
        "type": "type",
        "value": "alpha | luminance | match-source"
      },
      {
        "name": "<compositing-operator>",
        "type": "type",
        "value": "add | subtract | intersect | exclude"
      },
      {
        "name": "<mask-layer>",
        "type": "type",
        "value": "<mask-reference> || <position> [ / <bg-size> ]? ||<repeat-style> || <geometry-box> || [ <geometry-box> | no-clip ] || <compositing-operator> || <masking-mode>"
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "userSpaceOnUse",
        "prose": "The contents of the clipPath represent values in the current user coordinate system in place at the time when the clipPath element is referenced (i.e., the user coordinate system for the element referencing the clipPath element via the clip-path property).",
        "type": "value",
        "value": "userSpaceOnUse",
        "for": "clipPathUnits"
      },
      {
        "msg": "Dangling value",
        "name": "objectBoundingBox",
        "prose": "The coordinate system has its origin at the top left corner of the bounding box of the element to which the clipping path applies to and the same width and height of this bounding box. User coordinates are sized equivalently to the CSS px unit.",
        "type": "value",
        "value": "objectBoundingBox",
        "for": "clipPathUnits"
      },
      {
        "msg": "Dangling value",
        "name": "userSpaceOnUse",
        "prose": "x, y, width and height represent values in the current user coordinate system [CSS3-TRANSFORMS] in place at the time when the mask element is referenced (i.e., the user coordinate system for the element referencing the mask element via the mask property).",
        "type": "value",
        "value": "userSpaceOnUse",
        "for": "maskUnits"
      },
      {
        "msg": "Dangling value",
        "name": "objectBoundingBox",
        "prose": "x, y, width and height represent fractions or percentages of the object bounding box of the element to which the mask is applied. User coordinates are sized equivalently to the CSS px unit.",
        "type": "value",
        "value": "objectBoundingBox",
        "for": "maskUnits"
      },
      {
        "msg": "Dangling value",
        "name": "userSpaceOnUse",
        "prose": "The user coordinate system for the contents of the mask element is the current user coordinate system in place at the time when the mask element is referenced (i.e., the user coordinate system for the element referencing the mask element via the mask property).",
        "type": "value",
        "value": "userSpaceOnUse",
        "for": "maskContentUnits"
      },
      {
        "msg": "Dangling value",
        "name": "objectBoundingBox",
        "prose": "The coordinate system has its origin at the top left corner of the bounding box of the element to which the clipping path applies to and the same width and height of this bounding box. User coordinates are sized equivalently to the CSS px unit.",
        "type": "value",
        "value": "objectBoundingBox",
        "for": "maskContentUnits"
      }
    ]
  },
  "css-multicol-2": {
    "spec": {
      "title": "CSS Multi-column Layout Module Level 2",
      "url": "https://drafts.csswg.org/css-multicol-2/"
    },
    "properties": [
      {
        "name": "column-span",
        "value": "none | <integer [1,∞]> | all | auto",
        "initial": "none",
        "appliesTo": "in-flow block-level elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Add final content from previous level",
            "type": "value",
            "value": "none"
          },
          {
            "name": "all",
            "prose": "Add final content from previous level",
            "type": "value",
            "value": "all"
          },
          {
            "name": "<integer [1,∞]>",
            "prose": "The element spans the specified number of columns. Values must be greater than 0. If the specified integer value is equal to, or larger than the number of columns in the multicol element, the number of columns spanned will be the same as if column-span: all had been specified. This definition is insufficient. Does column-span: 1 count as column-span: none, or does it create a spanner (which is a BFC)? Which columns does it span? How does that affect height calculations, and interact with column-fill",
            "type": "value",
            "value": "<integer [1,∞]>"
          },
          {
            "name": "auto",
            "prose": "The number of columns spanned by the element depends on its min-content outer size in the inline direction of the multi-column container. If it is smaller than the used value of column-width, this is the same as if column-span: none had been specified. Otherwise, the number of columns spanned is the smallest positive integer n for which n × column-width + (n - 1) × column-gap is larger than the min-content outer size. If this would be larger than the number of columns, the number of columns spanned will be the same as if column-span: all had been specified. If column-span: 1 does not do the same as column-span: none, should this behave as column-span: 1 or as column-span: none when the element is small enough?",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "column-span",
          "columnSpan"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-multicol": {
    "spec": {
      "title": "CSS Multi-column Layout Module Level 1",
      "url": "https://drafts.csswg.org/css-multicol-1/"
    },
    "properties": [
      {
        "name": "column-width",
        "value": "auto | <length [0,∞]>",
        "initial": "auto",
        "appliesTo": "block containers except table wrapper boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword auto or an absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "means that the column width will be determined by other properties (e.g., column-count, if it has a non-auto value).",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length [0,∞]>",
            "prose": "describes the optimal column width. The actual column width may be wider (to fill the available space), or narrower (only if the available space is smaller than the specified column width). Negative values are not allowed. Used values will be clamped to a minimum of 1px.",
            "type": "value",
            "value": "<length [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "column-width",
          "columnWidth"
        ]
      },
      {
        "name": "column-count",
        "value": "auto | <integer [1,∞]>",
        "initial": "auto",
        "appliesTo": "block containers except table wrapper boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "means that the number of columns will be determined by other properties (e.g., column-width, if it has a non-auto value).",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<integer [1,∞]>",
            "prose": "describes the optimal number of columns into which the content of the element will be flowed. Values must be greater than 0. If both column-width and column-count have non-auto values, the integer value describes the maximum number of columns.",
            "type": "value",
            "value": "<integer [1,∞]>"
          }
        ],
        "styleDeclaration": [
          "column-count",
          "columnCount"
        ]
      },
      {
        "name": "columns",
        "value": "<'column-width'> || <'column-count'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "columns"
        ]
      },
      {
        "name": "column-rule-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "multicol containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<color>",
            "prose": "Specifies the color of the column rule.",
            "type": "value",
            "value": "<color>"
          }
        ],
        "styleDeclaration": [
          "column-rule-color",
          "columnRuleColor"
        ]
      },
      {
        "name": "column-rule-style",
        "value": "<line-style>",
        "initial": "none",
        "appliesTo": "multicol containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "column-rule-style",
          "columnRuleStyle"
        ]
      },
      {
        "name": "column-rule-width",
        "value": "<line-width>",
        "initial": "medium",
        "appliesTo": "multicol containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length; 0 if the column rule style is none or hidden",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "column-rule-width",
          "columnRuleWidth"
        ]
      },
      {
        "name": "column-rule",
        "value": "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "column-rule",
          "columnRule"
        ]
      },
      {
        "name": "column-span",
        "value": "none | all",
        "initial": "none",
        "appliesTo": "in-flow block-level elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The element does not span multiple columns.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "all",
            "prose": "The element forces a column break and is taken out of flow to span across all columns of the nearest multicol ancestor in the same block formatting context. Content in the normal flow that appears before the element is automatically balanced across all columns in the immediately preceding multi-column line before the element appears, and any subsequent content flows into a new multi-column line after the element. The element establishes an independent formatting context.",
            "type": "value",
            "value": "all"
          }
        ],
        "styleDeclaration": [
          "column-span",
          "columnSpan"
        ]
      },
      {
        "name": "column-fill",
        "value": "auto | balance | balance-all",
        "initial": "balance",
        "appliesTo": "multicol containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "balance",
            "prose": "Balance content equally between columns, as far as possible. In fragmented contexts, only the last fragment is balanced.",
            "type": "value",
            "value": "balance"
          },
          {
            "name": "balance-all",
            "prose": "Balance content equally between columns, as far as possible. In fragmented contexts, all fragments are balanced.",
            "type": "value",
            "value": "balance-all"
          },
          {
            "name": "auto",
            "prose": "fill columns sequentially",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "column-fill",
          "columnFill"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-namespaces": {
    "spec": {
      "title": "CSS Namespaces Module Level 3",
      "url": "https://drafts.csswg.org/css-namespaces-3/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<namespace-prefix>",
        "type": "type",
        "value": "<ident>"
      }
    ],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "@namespace",
        "value": "@namespace <namespace-prefix>? [ <string> | <url> ] ;"
      }
    ]
  },
  "css-nav": {
    "spec": {
      "title": "CSS Spatial Navigation Level 1",
      "url": "https://drafts.csswg.org/css-nav-1/"
    },
    "properties": [
      {
        "name": "spatial-navigation-contain",
        "value": "auto | contain",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "If the element is a scroll container then it establishes a spatial navigation container, otherwise it does not.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "contain",
            "prose": "The element establishes a spatial navigation container",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "spatial-navigation-contain",
          "spatialNavigationContain"
        ]
      },
      {
        "name": "spatial-navigation-action",
        "value": "auto | focus | scroll",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "If there are visible focusable elements within the scroll container in the direction requested, the closest one becomes focused. Otherwise, the scroll container is scrolled in the direction requested.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "focus",
            "prose": "The focus is moved to the nearest focusable element within the scroll container, regardless of whether it is visible. If there are none, the scroll container is not scrolled, and the search continues up the ancestry chain instead.",
            "type": "value",
            "value": "focus"
          },
          {
            "name": "scroll",
            "prose": "If the currently focused element is not itself a scroll container, this value on an ancestor scroll container has the same effect as auto. If the currently focused element is a scroll container, it is scrolled in the direction requested without changing which element is in focus, regardless of the presence of focusable descendants.",
            "type": "value",
            "value": "scroll"
          }
        ],
        "styleDeclaration": [
          "spatial-navigation-action",
          "spatialNavigationAction"
        ]
      },
      {
        "name": "spatial-navigation-function",
        "value": "normal | grid",
        "initial": "normal",
        "appliesTo": "spatial navigation containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "normal",
            "prose": "Moves the focus with the default focus navigation algorithm defined by UA. In general, the focus moves to the element with the closest distance calculated by finding the shortest distance.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "grid",
            "prose": "Moves the focus to the element which is aligned most in the navigation direction. If there are more than one aligned candidates in the navigation direction, select the element with the closest distance along the axis which corresponds to the navigation direction. In case of multiple elements with the same distance, select the element with the minimum amount of alignment. Else if there isn’t any aligned candidate in a given direction, select the element with the closest distance along the axis which corresponds to the navigation direction. In case of multiple elements with the same distance, select the element with the minimum distance along the axis which is orthogonal to the navigation direction.",
            "type": "value",
            "value": "grid"
          }
        ],
        "styleDeclaration": [
          "spatial-navigation-function",
          "spatialNavigationFunction"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "distance",
        "value": "euclidean + displacement - alignment - sqrt(Overlap)"
      }
    ]
  },
  "css-nesting": {
    "spec": {
      "title": "CSS Nesting Module",
      "url": "https://drafts.csswg.org/css-nesting-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": "&",
        "prose": "When using a nested style rule, one must be able to refer to the elements matched by the parent rule; that is, after all, the entire point of nesting. To accomplish that, this specification defines a new selector, the nesting selector, written as & (U+0026 AMPERSAND)."
      }
    ],
    "values": []
  },
  "css-overflow-4": {
    "spec": {
      "title": "CSS Overflow Module Level 4",
      "url": "https://drafts.csswg.org/css-overflow-4/"
    },
    "properties": [
      {
        "name": "overflow-clip-margin-top",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-top",
          "overflowClipMarginTop"
        ]
      },
      {
        "name": "overflow-clip-margin-right",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-right",
          "overflowClipMarginRight"
        ]
      },
      {
        "name": "overflow-clip-margin-bottom",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-bottom",
          "overflowClipMarginBottom"
        ]
      },
      {
        "name": "overflow-clip-margin-left",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-left",
          "overflowClipMarginLeft"
        ]
      },
      {
        "name": "overflow-clip-margin-block-start",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-block-start",
          "overflowClipMarginBlockStart"
        ]
      },
      {
        "name": "overflow-clip-margin-inline-start",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-inline-start",
          "overflowClipMarginInlineStart"
        ]
      },
      {
        "name": "overflow-clip-margin-block-end",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-block-end",
          "overflowClipMarginBlockEnd"
        ]
      },
      {
        "name": "overflow-clip-margin-inline-end",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-inline-end",
          "overflowClipMarginInlineEnd"
        ]
      },
      {
        "name": "overflow-clip-margin",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<visual-box>",
            "prose": "Specifies the box edge to use as the overflow clip edge origin, i.e. when the specified offset is zero. If omitted, defaults to padding-box on non-replaced elements, or content-box on replaced elements. Application of overflow-clip-margin to replaced elements is still being worked out. [Issue #7144]",
            "type": "value",
            "value": "<visual-box>"
          },
          {
            "name": "<length [0,∞]>",
            "prose": "The specified offset dictates how much the overflow clip edge is expanded from the specified box edge Negative values are invalid. Defaults to zero if omitted.",
            "type": "value",
            "value": "<length [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "overflow-clip-margin",
          "overflowClipMargin"
        ]
      },
      {
        "name": "overflow-clip-margin-inline",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-inline",
          "overflowClipMarginInline"
        ]
      },
      {
        "name": "overflow-clip-margin-block",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "overflow-clip-margin-block",
          "overflowClipMarginBlock"
        ]
      },
      {
        "name": "text-overflow",
        "value": "[ clip | ellipsis | <string> | fade | <fade()> ]{1,2}",
        "initial": "clip",
        "appliesTo": "block containers",
        "inherited": "no",
        "percentages": "refer to the width of the line box",
        "computedValue": "as specified, with lengths made absolute",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "clip",
            "prose": "Clip inline content that overflows its block container element. Characters may be only partially rendered.",
            "type": "value",
            "value": "clip"
          },
          {
            "name": "ellipsis",
            "prose": "Render an ellipsis character (U+2026) to represent clipped inline content. Implementations may substitute a more language, script, or writing-mode appropriate ellipsis character, or three dots \"...\" if the ellipsis character is unavailable.",
            "type": "value",
            "value": "ellipsis"
          },
          {
            "name": "fade()",
            "value": "fade( [ <length> | <percentage> ] )",
            "type": "function"
          },
          {
            "name": "fade",
            "prose": "Same as fade(), but the distance over which the fading effect is applied is determined by the UA. 1em is suggested as a reasonable value.",
            "type": "value",
            "value": "fade"
          }
        ],
        "styleDeclaration": [
          "text-overflow",
          "textOverflow"
        ]
      },
      {
        "name": "block-ellipsis",
        "value": "none | auto | <string>",
        "initial": "none",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The rendering is unaffected.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "Render an ellipsis character (U+2026)—or a more typographically-appropriate equivalent—as the block overflow ellipsis at the end of the affected line box. UAs should use the conventions of the content language, writing system, and writing mode to determine the most appropriate ellipsis string.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<string>",
            "prose": "Render the specified string as the block overflow ellipsis at the end of the affected line box. The UA may truncate this string if it is absurdly long.",
            "type": "value",
            "value": "<string>"
          }
        ],
        "styleDeclaration": [
          "block-ellipsis",
          "blockEllipsis"
        ]
      },
      {
        "name": "line-clamp",
        "value": "none | <integer> <'block-ellipsis'>?",
        "initial": "none",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "none",
            "prose": "Sets max-lines to none, continue to auto, and block-ellipsis to none.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<integer>",
            "prose": "Sets max-lines to the specified <integer>, continue to discard, and the block-ellipsis property to second component of the value or to auto if omitted.",
            "type": "value",
            "value": "<integer>"
          }
        ],
        "styleDeclaration": [
          "line-clamp",
          "lineClamp"
        ]
      },
      {
        "name": "-webkit-line-clamp",
        "value": "none | <integer>",
        "initial": "none",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "-webkit-line-clamp",
          "WebkitLineClamp",
          "webkitLineClamp"
        ]
      },
      {
        "name": "continue",
        "value": "auto | discard | -webkit-discard | overflow | paginate | fragments",
        "initial": "auto",
        "appliesTo": "block containers and multicol containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "-webkit-discard",
            "prose": "The -webkit-discard value behaves identically to discard, except that it only takes effect if the computed value of the display property on the parent is -webkit-box or -webkit-inline-box and the computed value of the -webkit-box-orient property on the parent is vertical.",
            "type": "value",
            "value": "-webkit-discard"
          },
          {
            "name": "auto",
            "prose": "If the box has more content than can fit, the excess content is handled according to the usual rules.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "discard",
            "prose": "The box becomes a fragmentation container that captures region breaks, if it is not already. [CSS-BREAK-3] Content after the first region break is not rendered (see below). (If the box is a multi-column container, any overflow columns are also not rendered.)",
            "type": "value",
            "value": "discard"
          },
          {
            "name": "overflow",
            "prose": "Content that doesn’t fit overflows, according to the overflow property",
            "type": "value",
            "value": "overflow"
          },
          {
            "name": "paginate",
            "prose": "Content that doesn’t fit paginates. This creates a paginated view inside the element similar to the way that 'overflow: scroll' creates a scrollable view. See paginated overflow",
            "type": "value",
            "value": "paginate"
          },
          {
            "name": "fragments",
            "prose": "content that doesn’t fit causes the element to copy itself and continue laying out. See fragment overflow.",
            "type": "value",
            "value": "fragments"
          }
        ],
        "styleDeclaration": [
          "continue"
        ]
      },
      {
        "name": "max-lines",
        "value": "none | <integer [1,∞]>",
        "initial": "none",
        "appliesTo": "block containers which are also fragmentation containers that capture region breaks",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword none or an integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "Otherwise, if the value of max-lines is not none, a region break is forced after its Nth descendant in-flow line box, where N is the specified value of max-lines. Only lines boxes in the same Block Formatting Context are counted: the contents of descendants that establish independent formatting contexts are skipped over while counting line boxes.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "max-lines",
          "maxLines"
        ]
      }
    ],
    "atrules": [],
    "selectors": [
      {
        "name": "::nth-fragment()",
        "prose": "The ::nth-fragment() pseudo-element is a pseudo-element that describes some of the fragment boxes generated by an element. The argument to the pseudo-element takes the same syntax as the argument to the :nth-child() pseudo-class defined in [SELECT], and has the same meaning except that the number is relative to fragment boxes generated by the element instead of siblings of the element."
      }
    ],
    "values": []
  },
  "css-overflow": {
    "spec": {
      "title": "CSS Overflow Module Level 3",
      "url": "https://drafts.csswg.org/css-overflow-3/"
    },
    "properties": [
      {
        "name": "overflow-x",
        "value": "visible | hidden | clip | scroll | auto",
        "initial": "visible",
        "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "usually specified value, but see text",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "visible",
            "prose": "There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.",
            "type": "value",
            "value": "visible"
          },
          {
            "name": "hidden",
            "prose": "This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programmatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "clip",
            "prose": "This value indicates that the box’s content is clipped to its overflow clip edge and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container. Unlike hidden, this value does not cause the element to establish a new formatting context.",
            "type": "value",
            "value": "clip"
          },
          {
            "name": "scroll",
            "prose": "This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.",
            "type": "value",
            "value": "scroll"
          },
          {
            "name": "auto",
            "prose": "Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overflow-x",
          "overflowX"
        ]
      },
      {
        "name": "overflow-y",
        "value": "visible | hidden | clip | scroll | auto",
        "initial": "visible",
        "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "usually specified value, but see text",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "visible",
            "prose": "There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.",
            "type": "value",
            "value": "visible"
          },
          {
            "name": "hidden",
            "prose": "This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programmatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "clip",
            "prose": "This value indicates that the box’s content is clipped to its overflow clip edge and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container. Unlike hidden, this value does not cause the element to establish a new formatting context.",
            "type": "value",
            "value": "clip"
          },
          {
            "name": "scroll",
            "prose": "This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.",
            "type": "value",
            "value": "scroll"
          },
          {
            "name": "auto",
            "prose": "Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overflow-y",
          "overflowY"
        ]
      },
      {
        "name": "overflow-block",
        "value": "visible | hidden | clip | scroll | auto",
        "initial": "visible",
        "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "usually specified value, but see text",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "overflow-block",
          "overflowBlock"
        ]
      },
      {
        "name": "overflow-inline",
        "value": "visible | hidden | clip | scroll | auto",
        "initial": "visible",
        "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "usually specified value, but see text",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "overflow-inline",
          "overflowInline"
        ]
      },
      {
        "name": "overflow",
        "value": "[ visible | hidden | clip | scroll | auto ]{1,2}",
        "initial": "visible",
        "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], and grid containers [CSS3-GRID-LAYOUT]",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "visible",
            "prose": "There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.",
            "type": "value",
            "value": "visible"
          },
          {
            "name": "hidden",
            "prose": "This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programmatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "clip",
            "prose": "This value indicates that the box’s content is clipped to its overflow clip edge and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container. Unlike hidden, this value does not cause the element to establish a new formatting context.",
            "type": "value",
            "value": "clip"
          },
          {
            "name": "scroll",
            "prose": "This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.",
            "type": "value",
            "value": "scroll"
          },
          {
            "name": "auto",
            "prose": "Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overflow"
        ]
      },
      {
        "name": "overflow-clip-margin",
        "value": "<visual-box> || <length [0,∞]>",
        "initial": "0px",
        "appliesTo": "boxes to which overflow applies",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the computed <length> and a <visual-box> keyword",
        "canonicalOrder": "per grammar",
        "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
        "values": [
          {
            "name": "<visual-box>",
            "prose": "Specifies the box edge to use as the overflow clip edge origin, i.e. when the specified offset is zero. If omitted, defaults to padding-box.",
            "type": "value",
            "value": "<visual-box>"
          },
          {
            "name": "<length [0,∞]>",
            "prose": "The specified offset dictates how much the overflow clip edge is expanded from the specified box edge Negative values are invalid. Defaults to zero if omitted.",
            "type": "value",
            "value": "<length [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "overflow-clip-margin",
          "overflowClipMargin"
        ]
      },
      {
        "name": "scroll-behavior",
        "value": "auto | smooth",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "values": [
          {
            "name": "auto",
            "prose": "The scroll container is scrolled in an instant fashion.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "smooth",
            "prose": "The scroll container is scrolled in a smooth fashion using a user-agent-defined timing function over a user-agent-defined period of time. User agents should follow platform conventions, if any.",
            "type": "value",
            "value": "smooth"
          }
        ],
        "styleDeclaration": [
          "scroll-behavior",
          "scrollBehavior"
        ]
      },
      {
        "name": "scrollbar-gutter",
        "value": "auto | stable && both-edges?",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Classic scrollbars consume space by creating a scrollbar gutter when overflow is scroll, or when overflow is auto and the box is overflowing. Overlay scrollbars do not consume space.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "stable",
            "prose": "The scrollbar gutter is present for classic scrollbars when overflow is hidden, scroll, or auto, regardless of whether the box is actually overflowing. Overlay scrollbars do not consume space.",
            "type": "value",
            "value": "stable"
          },
          {
            "name": "both-edges",
            "prose": "If a scrollbar gutter would be present on one of the inline start edge or the inline end edge of the box, another scrollbar gutter must be present on the opposite edge as well.",
            "type": "value",
            "value": "both-edges"
          }
        ],
        "styleDeclaration": [
          "scrollbar-gutter",
          "scrollbarGutter"
        ]
      },
      {
        "name": "text-overflow",
        "value": "clip | ellipsis",
        "initial": "clip",
        "appliesTo": "block containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "clip",
            "prose": "Clip inline content that overflows its block container element. Characters may be only partially rendered.",
            "type": "value",
            "value": "clip"
          },
          {
            "name": "ellipsis",
            "prose": "Render an ellipsis character (U+2026) to represent clipped inline content. Implementations may substitute a more language, script, or writing-mode appropriate ellipsis character, or three dots \"...\" if the ellipsis character is unavailable.",
            "type": "value",
            "value": "ellipsis"
          }
        ],
        "styleDeclaration": [
          "text-overflow",
          "textOverflow"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-overscroll": {
    "spec": {
      "title": "CSS Overscroll Behavior Module Level 1",
      "url": "https://drafts.csswg.org/css-overscroll-1/"
    },
    "properties": [
      {
        "name": "overscroll-behavior",
        "value": "[ contain | none | auto ]{1,2}",
        "initial": "auto auto",
        "appliesTo": "scroll container elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "contain",
            "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "none",
            "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overscroll-behavior",
          "overscrollBehavior"
        ]
      },
      {
        "name": "overscroll-behavior-x",
        "value": "contain | none | auto",
        "initial": "auto",
        "appliesTo": "scroll container elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "contain",
            "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "none",
            "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overscroll-behavior-x",
          "overscrollBehaviorX"
        ]
      },
      {
        "name": "overscroll-behavior-y",
        "value": "contain | none | auto",
        "initial": "auto",
        "appliesTo": "scroll container elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "contain",
            "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "none",
            "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overscroll-behavior-y",
          "overscrollBehaviorY"
        ]
      },
      {
        "name": "overscroll-behavior-inline",
        "value": "contain | none | auto",
        "initial": "auto",
        "appliesTo": "scroll container elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "contain",
            "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "none",
            "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overscroll-behavior-inline",
          "overscrollBehaviorInline"
        ]
      },
      {
        "name": "overscroll-behavior-block",
        "value": "contain | none | auto",
        "initial": "auto",
        "appliesTo": "scroll container elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "contain",
            "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "none",
            "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "overscroll-behavior-block",
          "overscrollBehaviorBlock"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-page-floats": {
    "spec": {
      "title": "CSS Page Floats",
      "url": "https://drafts.csswg.org/css-page-floats-3/"
    },
    "properties": [
      {
        "name": "float-reference",
        "value": "inline | column | region | page",
        "initial": "inline",
        "appliesTo": "all elements.",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "inline",
            "prose": "The float reference is the line box of the float anchor. The float containing block formatting context is the same as that of the float anchor. The float is an inline float.",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "column",
            "prose": "The float reference is the column in a multi column environment in which the float anchor is placed. If the float anchor is not inside a column, the float reference is the line box of the float anchor. The float containing block formatting context is a new block formatting context with the same dimensions and placement as the float reference. The float is a page float.",
            "type": "value",
            "value": "column"
          },
          {
            "name": "region",
            "prose": "The float reference is the region in a region-chain within which the float anchor is placed. If the float anchor is not inside a region, the float reference is the line box of the float anchor. The float containing block formatting context is a new block formatting context with the same dimensions and placement as the float reference. The float is a page float.",
            "type": "value",
            "value": "region"
          },
          {
            "name": "page",
            "prose": "The float reference of the float is the page within which the float anchor is placed. If the float anchor is not inside a page, the float reference is the line box of the float anchor. The float containing block formatting context is a new block formatting context with the same dimensions and placement as the float reference. The float is a page float.",
            "type": "value",
            "value": "page"
          }
        ],
        "styleDeclaration": [
          "float-reference",
          "floatReference"
        ]
      },
      {
        "name": "float",
        "value": "block-start | block-end | inline-start | inline-end | snap-block | <snap-block()> | snap-inline | <snap-inline()> | left | right | top | bottom | none",
        "initial": "none",
        "appliesTo": "all elements.",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "inline-start",
            "prose": "If the float reference is a line box, the element generates a box that is floated to the line-start outer edge of the float reference and content flows on the line-end side of the box. If the float reference is not a line box, the element generates a box that is floated to the line-start and block-start outer edges of the float reference.",
            "type": "value",
            "value": "inline-start"
          },
          {
            "name": "inline-end",
            "prose": "If the float reference is a line box, the element generates a box that is floated to the line-ebd outer edge of the float reference and content flows on the line-start side of the box. If the float reference is not a line box, the element generates a box that is floated to the line-end and block-end outer edges of the float reference.",
            "type": "value",
            "value": "inline-end"
          },
          {
            "name": "block-start",
            "prose": "If the float reference is a line box, block-start behaves like inline-start. If the float reference is not a line box, the element generates a box that is floated to the block-start and line-start outer edges of the float reference. The initial value of the max-width or max-height property that refers to the inline size of the float is '100%'. Content flows on the block-end side of the box.",
            "type": "value",
            "value": "block-start"
          },
          {
            "name": "block-end",
            "prose": "If the float reference is a line box, block-end behaves like inline-end. If the float reference is not a line box, the element generates a box that is floated to the block-end and line-end outer edges of the float reference. The initial value of the max-width or max-height property that refers to the inline size of the float is '100%'. Content flows on the block-start side of the box.",
            "type": "value",
            "value": "block-end"
          },
          {
            "name": "left",
            "prose": "If the float reference is a line box, behaves like inline-start or inline-end, whichever corresponds to line-left for the float reference. Otherwise, behaves like block-end, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "If the float reference is a line box, behaves like inline-start or inline-end, whichever corresponds to line-right for the float reference. Otherwise, behaves like block-start, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "top",
            "prose": "Behave like block-start or inline-start depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "bottom",
            "prose": "Behave like block-end or inline-end depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "snap-block()",
            "value": "snap-block( <length> , [ start | end | near ]? )",
            "type": "function"
          },
          {
            "name": "snap-block",
            "prose": "Behaves as snap-block(2em, near)",
            "type": "value",
            "value": "snap-block"
          },
          {
            "name": "snap-inline()",
            "value": "snap-inline( <length> , [ left | right | near ]? )",
            "type": "function"
          },
          {
            "name": "snap-inline",
            "prose": "same as snap-inline(2em, near)",
            "type": "value",
            "value": "snap-inline"
          },
          {
            "name": "none",
            "prose": "The box is not floated.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "float"
        ]
      },
      {
        "name": "clear",
        "value": "inline-start | inline-end | block-start | block-end | left | right | top | bottom | none",
        "initial": "none",
        "appliesTo": "block-level elements, floats, regions, pages",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "inline-start",
            "prose": "If applied to an inline float, requires that the block-start outer edge of the box comes after the block-end outer edge of any inline-start-floats with an inline-start-float-reference that resulted from elements earlier in the source document. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the inline-start direction.",
            "type": "value",
            "value": "inline-start"
          },
          {
            "name": "inline-end",
            "prose": "If applied to a block-level element or an inline float, requires that the block-start outer edge of the box comes after the block-end outer edge of any inline-end-floats with an inline-end-float-reference that resulted from elements earlier in the source document. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the inline-end direction.",
            "type": "value",
            "value": "inline-end"
          },
          {
            "name": "block-start",
            "prose": "If applied to a block-level element or an inline float, behaves like inline-start. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the block-start direction.",
            "type": "value",
            "value": "block-start"
          },
          {
            "name": "block-end",
            "prose": "If applied to a block-level element or an inline float, behaves like inline-end. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the block-end direction.",
            "type": "value",
            "value": "block-end"
          },
          {
            "name": "left",
            "prose": "Behave like block-end, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Behave like block-start, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "top",
            "prose": "Behave like block-start or inline-start depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "bottom",
            "prose": "Behave like block-end or inline-end depending on the float containing block’s direction and writing-mode.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "both-inline",
            "prose": "Behave like inline-start and inline-end.",
            "type": "value",
            "value": "both-inline"
          },
          {
            "name": "both-block",
            "prose": "Behave like block-start and block-end.",
            "type": "value",
            "value": "both-block"
          },
          {
            "name": "both",
            "prose": "Behave like both-inline.",
            "type": "value",
            "value": "both"
          },
          {
            "name": "all",
            "prose": "Behave like both-block and both-inline.",
            "type": "value",
            "value": "all"
          }
        ],
        "styleDeclaration": [
          "clear"
        ]
      },
      {
        "name": "float-defer",
        "value": "<integer> | last | none",
        "initial": "none",
        "appliesTo": "floats",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword or integer",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "float-defer",
          "floatDefer"
        ]
      },
      {
        "name": "float-offset",
        "value": "<length> | <percentage>",
        "initial": "0",
        "appliesTo": "floats",
        "inherited": "no",
        "percentages": "see prose",
        "computedValue": "computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "float-offset",
          "floatOffset"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-page": {
    "spec": {
      "title": "CSS Paged Media Module Level 3",
      "url": "https://drafts.csswg.org/css-page-3/"
    },
    "properties": [
      {
        "name": "page",
        "value": "auto | <custom-ident>",
        "initial": "auto",
        "appliesTo": "boxes that create class A break points",
        "inherited": "no (but see prose)",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "page"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@page",
        "prose": "Authors can specify various aspects of a page box, such as its dimensions, orientation, and margins, within an @page rule. @page rules are allowed wherever rule-sets are allowed. An @page rule consists of the keyword @page, an optional comma-separated list of page selectors and a block of declarations (said to be in the page context). An @page rule can also contain other at-rules, interleaved between declarations. The current level of this specification only allows margin at-rules inside @page.",
        "descriptors": [
          {
            "name": "size",
            "for": "@page",
            "value": "<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]",
            "initial": "auto",
            "computedValue": "specified value, with <length>s made absolute.",
            "values": [
              {
                "name": "auto",
                "prose": "The page box will be set to a size and orientation chosen by the UA. In the usual case, the page box size and orientation is chosen to match the target media sheet.",
                "type": "value",
                "value": "auto"
              },
              {
                "name": "landscape",
                "prose": "Specifies that the page’s content be printed in landscape orientation. The longer sides of the page box are horizontal. If a <page-size> is not specified, the size of the page sheet is chosen by the UA.",
                "type": "value",
                "value": "landscape"
              },
              {
                "name": "portrait",
                "prose": "Specifies that the page’s content be printed in portrait orientation. The shorter sides of the page box are horizontal. If a <page-size> is not specified, the size of the page sheet is chosen by the UA.",
                "type": "value",
                "value": "portrait"
              },
              {
                "name": "<length>",
                "prose": "The page box will be set to the given absolute dimension(s). If only one length value is specified, it sets both the width and height of the page box (i.e., the box is a square). If two length values are specified, the first establishes the page box width, and the second the page box height. Values in units of em and ex refer to the page context’s font. Negative lengths are illegal.",
                "type": "value",
                "value": "<length>"
              },
              {
                "name": "<page-size>",
                "prose": "A page size can be specified using one of the following media names. This is the equivalent of specifying size using length values. The definition of the media names comes from Media Standardized Names [PWGMSN].",
                "type": "type",
                "values": [
                  {
                    "name": "A5",
                    "prose": "Equivalent to the size of ISO A5 media: 148mm wide and 210 mm high.",
                    "type": "value",
                    "value": "A5"
                  },
                  {
                    "name": "A4",
                    "prose": "Equivalent to the size of ISO A4 media: 210 mm wide and 297 mm high.",
                    "type": "value",
                    "value": "A4"
                  },
                  {
                    "name": "A3",
                    "prose": "Equivalent to the size of ISO A3 media: 297mm wide and 420mm high.",
                    "type": "value",
                    "value": "A3"
                  },
                  {
                    "name": "B5",
                    "prose": "Equivalent to the size of ISO B5 media: 176mm wide by 250mm high.",
                    "type": "value",
                    "value": "B5"
                  },
                  {
                    "name": "B4",
                    "prose": "Equivalent to the size of ISO B4 media: 250mm wide by 353mm high.",
                    "type": "value",
                    "value": "B4"
                  },
                  {
                    "name": "JIS-B5",
                    "prose": "Equivalent to the size of JIS B5 media: 182mm wide by 257mm high.",
                    "type": "value",
                    "value": "JIS-B5"
                  },
                  {
                    "name": "JIS-B4",
                    "prose": "Equivalent to the size of JIS B4 media: 257mm wide by 364mm high.",
                    "type": "value",
                    "value": "JIS-B4"
                  },
                  {
                    "name": "letter",
                    "prose": "Equivalent to the size of North American letter media: 8.5 inches wide and 11 inches high",
                    "type": "value",
                    "value": "letter"
                  },
                  {
                    "name": "legal",
                    "prose": "Equivalent to the size of North American legal: 8.5 inches wide by 14 inches high.",
                    "type": "value",
                    "value": "legal"
                  },
                  {
                    "name": "ledger",
                    "prose": "Equivalent to the size of North American ledger: 11 inches wide by 17 inches high.",
                    "type": "value",
                    "value": "ledger"
                  }
                ]
              }
            ]
          },
          {
            "name": "page-orientation",
            "for": "@page",
            "value": "upright | rotate-left | rotate-right",
            "initial": "upright",
            "computedValue": "as specified",
            "values": [
              {
                "name": "upright",
                "prose": "No special orientation is applied; the page is laid out and formatted as normal.",
                "type": "value",
                "value": "upright"
              },
              {
                "name": "rotate-left",
                "prose": "After the page has been laid out, if the output medium supports rotation, this value indicates that the page must be displayed rotated a quarter turn to the left (counter-clockwise) of how it was laid out.",
                "type": "value",
                "value": "rotate-left"
              },
              {
                "name": "rotate-right",
                "prose": "Same as rotate-left, except the page must be displayed rotated a quarter turn to the right (clockwise) of how it was laid out.",
                "type": "value",
                "value": "rotate-right"
              }
            ]
          },
          {
            "name": "marks",
            "for": "@page",
            "value": "none | [ crop || cross ]",
            "initial": "none",
            "computedValue": "as specified",
            "values": [
              {
                "name": "none",
                "prose": "Specifies that neither crop marks nor registration marks should be printed: the area outside the bleed area will be completely blank.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "crop",
                "prose": "Specifies that crop marks should be printed. These are typically short lines outside the page box that are effectively extensions of the page box’s four edges, thereby indicating the precise location of those edges without placing any ink near or within the page box itself.",
                "type": "value",
                "value": "crop"
              },
              {
                "name": "cross",
                "prose": "Specifies that registration marks should be printed. These are typically cross-shaped marks outside each edge of the page box used to align sheets of paper during the printing process.",
                "type": "value",
                "value": "cross"
              }
            ]
          },
          {
            "name": "bleed",
            "for": "@page",
            "value": "auto | <length>",
            "initial": "auto",
            "computedValue": "as specified",
            "values": [
              {
                "name": "auto",
                "prose": "Computes to 6pt if marks has crop and to zero otherwise.",
                "type": "value",
                "value": "auto"
              },
              {
                "name": "<length>",
                "prose": "Specifies by how far outward, in each direction, the bleed area extends past the page box. Values may be negative, but there may be implementation-specific limits.",
                "type": "value",
                "value": "<length>"
              }
            ]
          }
        ],
        "value": "@page <page-selector-list>? { <declaration-list> }",
        "values": [
          {
            "name": ":left",
            "prose": "All pages are automatically classified by user agents as either left pages or right pages, based on page progression. The :left and :right pseudo-classes only match left or right pages, respectively.",
            "type": "value",
            "value": ":left"
          },
          {
            "name": ":right",
            "prose": "All pages are automatically classified by user agents as either left pages or right pages, based on page progression. The :left and :right pseudo-classes only match left or right pages, respectively.",
            "type": "value",
            "value": ":right"
          },
          {
            "name": ":first",
            "prose": "The :first pseudo-class matches the first printed page of a document.",
            "type": "value",
            "value": ":first"
          },
          {
            "name": ":blank",
            "prose": "The :blank pseudo-class matches content-empty pages that appear as a result of forced page breaks.",
            "type": "value",
            "value": ":blank"
          }
        ]
      },
      {
        "name": "@top-left-corner",
        "descriptors": [],
        "value": "@top-left-corner { <declaration-list> };"
      },
      {
        "name": "@top-left",
        "descriptors": [],
        "value": "@top-left { <declaration-list> };"
      },
      {
        "name": "@top-center",
        "descriptors": [],
        "value": "@top-center { <declaration-list> };"
      },
      {
        "name": "@top-right",
        "descriptors": [],
        "value": "@top-right { <declaration-list> };"
      },
      {
        "name": "@top-right-corner",
        "descriptors": [],
        "value": "@top-right-corner { <declaration-list> };"
      },
      {
        "name": "@bottom-left-corner",
        "descriptors": [],
        "value": "@bottom-left-corner { <declaration-list> };"
      },
      {
        "name": "@bottom-left",
        "descriptors": [],
        "value": "@bottom-left { <declaration-list> };"
      },
      {
        "name": "@bottom-center",
        "descriptors": [],
        "value": "@bottom-center { <declaration-list> };"
      },
      {
        "name": "@bottom-right",
        "descriptors": [],
        "value": "@bottom-right { <declaration-list> };"
      },
      {
        "name": "@bottom-right-corner",
        "descriptors": [],
        "value": "@bottom-right-corner { <declaration-list> };"
      },
      {
        "name": "@left-top",
        "descriptors": [],
        "value": "@left-top { <declaration-list> };"
      },
      {
        "name": "@left-middle",
        "descriptors": [],
        "value": "@left-middle { <declaration-list> };"
      },
      {
        "name": "@left-bottom",
        "descriptors": [],
        "value": "@left-bottom { <declaration-list> };"
      },
      {
        "name": "@right-top",
        "descriptors": [],
        "value": "@right-top { <declaration-list> };"
      },
      {
        "name": "@right-middle",
        "descriptors": [],
        "value": "@right-middle { <declaration-list> };"
      },
      {
        "name": "@right-bottom",
        "descriptors": [],
        "value": "@right-bottom { <declaration-list> };"
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<page-selector-list>",
        "type": "type",
        "value": "<page-selector>#"
      },
      {
        "name": "<page-selector>",
        "type": "type",
        "value": "[ <ident-token>? <pseudo-page>* ]!"
      },
      {
        "name": "<pseudo-page>",
        "type": "type",
        "value": "':' [ left | right | first | blank ]"
      }
    ]
  },
  "css-paint-api": {
    "spec": {
      "title": "CSS Painting API Level 1",
      "url": "https://drafts.css-houdini.org/css-paint-api-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "paint()",
        "type": "function",
        "value": "paint( <ident>, <declaration-value>? )"
      }
    ]
  },
  "css-position": {
    "spec": {
      "title": "CSS Positioned Layout Module Level 3",
      "url": "https://drafts.csswg.org/css-position-3/"
    },
    "properties": [
      {
        "name": "position",
        "value": "static | relative | absolute | sticky | fixed",
        "initial": "static",
        "appliesTo": "all elements except table-column-group and table-column",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "static",
            "prose": "The box is not a positioned box, and is laid out according to the rules of its parent formatting context. The inset properties do not apply.",
            "type": "value",
            "value": "static"
          },
          {
            "name": "relative",
            "prose": "The box is laid out as for static, then offset from the resulting position. This offsetting is a purely visual effect, and does not affect the size or position of any other box, except insofar as it increases the scrollable overflow area of its ancestors. This positioning scheme is called relative positioning.",
            "type": "value",
            "value": "relative"
          },
          {
            "name": "sticky",
            "prose": "Identical to relative, except that its offsets are automatically adjusted in reference to the nearest ancestor scroll container’s scrollport (as modified by the inset properties) in whichever axes the inset properties are not both auto, to try to keep the box in view within its containing block as the user scrolls. This positioning scheme is called sticky positioning.",
            "type": "value",
            "value": "sticky"
          },
          {
            "name": "absolute",
            "prose": "The box is taken out of flow such that it has no impact on the size or position of its siblings and ancestors, and does not participate in its parent’s formatting context. Instead, the box is positioned and sized solely in reference to its absolute positioning containing block, as modified by the box’s inset properties, see § 4 Absolute Positioning Layout Model. It can overlap in-flow content or other absolutely positioned elements, and is included in the scrollable overflow area of the box that generates is containing block. This positioning scheme is called absolute positioning.",
            "type": "value",
            "value": "absolute"
          },
          {
            "name": "fixed",
            "prose": "Same as absolute, except the box is positioned and sized relative to a fixed positioning containing block (usually the viewport in continuous media, or the page area in paged media). The box’s position is fixed with respect to this reference rectangle: when attached to the viewport it does not move when the document is scrolled, and when attached to the page area is replicated on every page when the document is paginated. This positioning scheme is called fixed positioning and is considered a subset of absolute positioning. Authors may wish to specify fixed in a media-dependent way. For instance, an author may want a box to remain at the top of the viewport on the screen, but not at the top of each printed page. The two specifications may be separated by using an '@media' rule, as in: @media screen { h1#first { position: fixed } } @media print { h1#first { position: static } }",
            "type": "value",
            "value": "fixed"
          }
        ],
        "styleDeclaration": [
          "position"
        ]
      },
      {
        "name": "top",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "top"
        ]
      },
      {
        "name": "right",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "right"
        ]
      },
      {
        "name": "bottom",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "bottom"
        ]
      },
      {
        "name": "left",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "left"
        ]
      },
      {
        "name": "inset-block-start",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset-block-start",
          "insetBlockStart"
        ]
      },
      {
        "name": "inset-inline-start",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset-inline-start",
          "insetInlineStart"
        ]
      },
      {
        "name": "inset-block-end",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset-block-end",
          "insetBlockEnd"
        ]
      },
      {
        "name": "inset-inline-end",
        "value": "auto | <length-percentage>",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "refer to size of containing block; see prose",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset-inline-end",
          "insetInlineEnd"
        ]
      },
      {
        "name": "inset-block",
        "value": "<top>{1,2}",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset-block",
          "insetBlock"
        ]
      },
      {
        "name": "inset-inline",
        "value": "<top>{1,2}",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset-inline",
          "insetInline"
        ]
      },
      {
        "name": "inset",
        "value": "<top>{1,4}",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "auto",
            "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "inset"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-properties-values-api": {
    "spec": {
      "title": "CSS Properties and Values API Level 1",
      "url": "https://drafts.css-houdini.org/css-properties-values-api-1/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@property",
        "descriptors": [
          {
            "name": "syntax",
            "for": "@property",
            "value": "<string>",
            "initial": "n/a (see prose)"
          },
          {
            "name": "inherits",
            "for": "@property",
            "value": "true | false",
            "initial": "n/a (see prose)"
          },
          {
            "name": "initial-value",
            "for": "@property",
            "value": "<declaration-value>",
            "initial": "the guaranteed-invalid value (but see prose)"
          }
        ],
        "value": "@property <custom-property-name> { <declaration-list> }"
      }
    ],
    "selectors": [],
    "values": []
  },
  "css-pseudo": {
    "spec": {
      "title": "CSS Pseudo-Elements Module Level 4",
      "url": "https://drafts.csswg.org/css-pseudo-4/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": "::first-line",
        "prose": "The ::first-line pseudo-element represents the contents of the first formatted line of its originating element."
      },
      {
        "name": "::first-letter",
        "prose": "The ::first-letter pseudo-element represents the first Letter, Number, or Symbol (Unicode category L*, N*, or S*) typographic character unit on the first formatted line of its originating element (the first letter) as well as its associated punctuation. Collectively, this text is the first-letter text. The ::first-letter pseudo-element can be used to create “initial caps” and “drop caps”, which are common typographic effects.",
        "values": [
          {
            "name": "::prefix",
            "prose": "To allow independent styling of the first letter itself and its adjacent punctuation, associated preceding punctuation is represented by the ::prefix sub-pseudo-element of the ::first-letter pseudo-element (::first-letter::prefix); and associated following punctuation is represented by the ::postfix sub-pseudo-element of the ::first-letter pseudo-element (::first-letter::postfix). See § 2.2.1 First Letters and Associated Punctuation, below.",
            "type": "selector"
          },
          {
            "name": "::postfix",
            "prose": "To allow independent styling of the first letter itself and its adjacent punctuation, associated preceding punctuation is represented by the ::prefix sub-pseudo-element of the ::first-letter pseudo-element (::first-letter::prefix); and associated following punctuation is represented by the ::postfix sub-pseudo-element of the ::first-letter pseudo-element (::first-letter::postfix). See § 2.2.1 First Letters and Associated Punctuation, below.",
            "type": "selector"
          }
        ]
      },
      {
        "name": "::selection",
        "prose": "The ::selection pseudo-element represents the portion of a document that has been selected as the target or object of some possible future user-agent operation(s). It applies, for example, to selected text within an editable text field, which would be copied by a copy operation or replaced by a paste operation."
      },
      {
        "name": "::target-text",
        "prose": "The ::target-text pseudo-element represents text directly targeted by the document URL’s fragment, if any."
      },
      {
        "name": "::spelling-error",
        "prose": "The ::spelling-error pseudo-element represents a portion of text that has been flagged by the user agent as misspelled."
      },
      {
        "name": "::grammar-error",
        "prose": "The ::grammar-error pseudo-element represents a portion of text that has been flagged by the user agent as grammatically incorrect."
      },
      {
        "name": "::before",
        "prose": "Represents a styleable child pseudo-element immediately before the originating element’s actual content."
      },
      {
        "name": "::after",
        "prose": "Represents a styleable child pseudo-element immediately after the originating element’s actual content."
      },
      {
        "name": "::marker",
        "prose": "The ::marker pseudo-element represents the automatically generated marker box of a list item. (See [CSS-DISPLAY-3] and [CSS-LISTS-3].)"
      },
      {
        "name": "::placeholder",
        "prose": "The ::placeholder pseudo-element represents placeholder text in an input field: text that represents the input and provides a hint to the user on how to fill out the form. For example, a date-input field might have the placeholder text “YYYY/MM/DD” to clarify that numeric dates are to be entered in year-month-day order."
      },
      {
        "name": "::file-selector-button",
        "prose": "The ::file-selector-button pseudo-element targets the <button> inside an <input> element with type=file, if the UA renders such a button."
      }
    ],
    "values": []
  },
  "css-regions": {
    "spec": {
      "title": "CSS Regions Module Level 1",
      "url": "https://drafts.csswg.org/css-regions-1/"
    },
    "properties": [
      {
        "name": "flow-into",
        "value": "none | <ident> [element|content]?",
        "initial": "none",
        "appliesTo": "All elements, but not pseudo-elements such as ::first-line, ::first-letter, ::before or ::after.",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "flow-into",
          "flowInto"
        ]
      },
      {
        "name": "flow-from",
        "value": "<ident> | none",
        "initial": "none",
        "appliesTo": "Non-replaced block containers. This might be expanded in future versions of the specification to allow other types of containers to receive flow content.",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "flow-from",
          "flowFrom"
        ]
      },
      {
        "name": "region-fragment",
        "value": "auto | break",
        "initial": "auto",
        "appliesTo": "CSS Regions",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "region-fragment",
          "regionFragment"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-rhythm": {
    "spec": {
      "title": "CSS Rhythmic Sizing",
      "url": "https://drafts.csswg.org/css-rhythm-1/"
    },
    "properties": [
      {
        "name": "block-step-size",
        "value": "none | <length [0,∞]>",
        "initial": "none",
        "appliesTo": "block-level boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword or absolute length",
        "canonicalOrder": "per grammar",
        "animatable": "???",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "block-step-size",
          "blockStepSize"
        ]
      },
      {
        "name": "block-step-insert",
        "value": "margin | padding",
        "initial": "margin",
        "appliesTo": "block-level boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "animationType": "discrete",
        "values": [
          {
            "name": "margin",
            "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted outside the box’s border, as extra margin.",
            "type": "value",
            "value": "margin"
          },
          {
            "name": "padding",
            "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted inside the box’s border, as extra padding.",
            "type": "value",
            "value": "padding"
          }
        ],
        "styleDeclaration": [
          "block-step-insert",
          "blockStepInsert"
        ]
      },
      {
        "name": "block-step-align",
        "value": "auto | center | start | end",
        "initial": "auto",
        "appliesTo": "block-level boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "If block-step-insert is margin: if align-self is start, end, or center, treat as that value, otherwise treat as center.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "center",
            "prose": "Any extra space resulting from a block-step-size-induced adjustment is split, and applied half on either side of the box.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "start",
            "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted on the end side of the box.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted on the start side of the box.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "up",
            "prose": "The outer size of the box is increased (positive space is inserted) to fulfill the block-step-size constraint.",
            "type": "value",
            "value": "up"
          },
          {
            "name": "down",
            "prose": "The outer size of the box is decreased (negative space is inserted) to fulfill the block-step-size constraint.",
            "type": "value",
            "value": "down"
          },
          {
            "name": "nearest",
            "prose": "The outer size of the box is either increased (as for up) or decreased (as for down—whichever results in the smallest absolute change—to fulfill the block-step-size constraint. If both options would result in the same amount of change, the size is increased.",
            "type": "value",
            "value": "nearest"
          }
        ],
        "styleDeclaration": [
          "block-step-align",
          "blockStepAlign"
        ]
      },
      {
        "name": "block-step-round",
        "value": "up | down | nearest",
        "initial": "up",
        "appliesTo": "block-level boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "animationType": "discrete",
        "styleDeclaration": [
          "block-step-round",
          "blockStepRound"
        ]
      },
      {
        "name": "block-step",
        "value": "<'block-step-size'> || <'block-step-insert'> || <'block-step-align'> || <'block-step-round'>",
        "initial": "see individual properties",
        "appliesTo": "block-level boxes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "block-step",
          "blockStep"
        ]
      },
      {
        "name": "line-height-step",
        "value": "<length [0,∞]>",
        "initial": "0px",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "line-height-step",
          "lineHeightStep"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-round-display": {
    "spec": {
      "title": "CSS Round Display Level 1",
      "url": "https://drafts.csswg.org/css-round-display-1/"
    },
    "properties": [
      {
        "name": "border-boundary",
        "value": "none | parent | display",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-boundary",
          "borderBoundary"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@media",
        "descriptors": [
          {
            "name": "shape",
            "for": "@media",
            "value": "rect | round",
            "type": "discrete",
            "values": [
              {
                "name": "rect",
                "prose": "The shape is an axis aligned rectangle or square, or a similar shape such as rounded rectangle for which the traditional designs are appropriate.",
                "type": "value",
                "value": "rect"
              },
              {
                "name": "round",
                "prose": "The shape is rounded or a similar shape to the circle such as an oval, an ellipse for which distinctively rounded designs are appropriate.",
                "type": "value",
                "value": "round"
              }
            ]
          }
        ]
      },
      {
        "name": "@viewport",
        "descriptors": [
          {
            "name": "viewport-fit",
            "for": "@viewport",
            "value": "auto | contain | cover",
            "initial": "auto",
            "percentages": "N/A",
            "computedValue": "as specified",
            "values": [
              {
                "name": "auto",
                "prose": "This value doesn’t affect the initial layout viewport, and the whole web page is viewable. What the UA paints outside of the viewport is undefined. It may be the background color of the canvas, or anything else that the UA deems appropriate.",
                "type": "value",
                "value": "auto"
              },
              {
                "name": "contain",
                "prose": "The initial layout viewport and the visual viewport are set to the largest rectangle which is inscribed in the display of the device. What the UA paints outside of the viewport is undefined. It may be the background color of the canvas, or anything else that the UA deems appropriate.",
                "type": "value",
                "value": "contain"
              },
              {
                "name": "cover",
                "prose": "The initial layout viewport and the visual viewport are set to the circumscribed rectangle of the physical screen of the device.",
                "type": "value",
                "value": "cover"
              }
            ]
          }
        ]
      }
    ],
    "selectors": [],
    "values": []
  },
  "css-ruby": {
    "spec": {
      "title": "CSS Ruby Annotation Layout Module Level 1",
      "url": "https://drafts.csswg.org/css-ruby-1/"
    },
    "properties": [
      {
        "name": "ruby-position",
        "value": "[ alternate || [ over | under ] ] | inter-character",
        "initial": "alternate",
        "appliesTo": "ruby annotation containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "alternate",
            "prose": "Different levels of annotations alternate between over and under. If the annotation container is the first level of annotation in its ruby segment, or if all prior levels are inter-character, then alternate, either on its own or in combination with over, behaves the same as over, while alternate in combination with under behaves the same as under. Otherwise, if the previous level of interlinear annotation is over, alternate behaves like under, and vice versa. (In this case, whether alternate is specified alone or in combination with over or under makes no difference.)",
            "type": "value",
            "value": "alternate"
          },
          {
            "name": "over",
            "prose": "The ruby annotation appears line-over the base. Ruby over Japanese base text in horizontal layout Ruby to the right of Japanese base text in vertical layout",
            "type": "value",
            "value": "over"
          },
          {
            "name": "under",
            "prose": "The ruby annotation appears line-under the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text. Ruby under Japanese base text in horizontal layout Ruby to the left of Japanese base text in vertical layout",
            "type": "value",
            "value": "under"
          },
          {
            "name": "inter-character",
            "prose": "If the writing mode of the enclosing ruby container is vertical, this value has the same effect as over. Otherwise, the ruby annotation becomes an inter-character annotation. The annotation appears on the right of the base in horizontal text. This forces the computed value of writing-mode of the ruby annotation children of this ruby annotation container to be vertical-rl. This value is provided for the special case of traditional Chinese as used especially in Taiwan: ruby (made of bopomofo glyphs) in that context appears vertically along the right side of the base glyph, even when the layout of the base characters is horizontal: “Bopomofo” ruby in traditional Chinese (ruby annotation shown in blue for clarity) in horizontal layout",
            "type": "value",
            "value": "inter-character"
          }
        ],
        "styleDeclaration": [
          "ruby-position",
          "rubyPosition"
        ]
      },
      {
        "name": "ruby-merge",
        "value": "separate | merge | auto",
        "initial": "separate",
        "appliesTo": "interlinear ruby annotation containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "separate",
            "prose": "Each ruby annotation box is rendered within the same column(s) as its corresponding base box(es), i.e. without overlapping adjacent bases on either side. This style is called “mono ruby” in [JLREQ]. ruby-merge: separate with center alignment For example, the following two lines render the same: <p><ruby>無<rt>む</ruby><ruby>常<rt>じょう</ruby> <p><ruby style=\"ruby-merge:separate\"><rb>無<rb>常<rt>む<rt>じょう</ruby>",
            "type": "value",
            "value": "separate"
          },
          {
            "name": "merge",
            "prose": "All ruby annotation boxes within the same ruby segment on the same line are concatenated as inline boxes within their annotation container, and laid out in a single anonymous ruby annotation box spanning all their associated ruby base boxes. When laid out on a single line, this style renders similar to “group ruby” in [JLREQ]. However, when it breaks across lines, ruby annotations are kept together with their respective ruby bases. ruby-merge: merge with center alignment The following two lines render the same if both characters fit on one line: <p><ruby>無常<rt>むじょう</ruby> <p><ruby style=\"ruby-merge:merge\"><rb>無<rb>常<rt>む<rt>じょう</ruby> However, the second one renders the same as ruby-position: separate when the two bases are split across lines.",
            "type": "value",
            "value": "merge"
          },
          {
            "name": "auto",
            "prose": "The user agent may use any algorithm to determine how each ruby annotation box is rendered to its corresponding base box, with the intention that if all annotations fit over their respective bases, the result is identical to separate, but if some annotations are wider than their bases the space is shared in some way to avoid imposing space between bases. ruby-merge: auto with center alignment",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "ruby-merge",
          "rubyMerge"
        ]
      },
      {
        "name": "ruby-align",
        "value": "start | center | space-between | space-around",
        "initial": "space-around",
        "appliesTo": "ruby bases, ruby annotations, ruby base containers, ruby annotation containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "start",
            "prose": "The ruby content is aligned with the start edge of its box. start ruby distribution \"Katatsuki ruby\" (肩付きルビ) is close to, but not quite the same as, this start value. In particular, its behavior when overhanging its base can differ from start alignment depending on surrounding context, see JLREQ. Also, it’s only ever used in vertical writing, and the JLTF considers it not particularly important, so it may not be worth the effort to make this value smart enough to deal with katatsuki ruby. If start is needed for some other purpose, we should keep it. Otherwise, maybe just drop it?",
            "type": "value",
            "value": "start"
          },
          {
            "name": "center",
            "prose": "The ruby content is centered within its box. center ruby distribution",
            "type": "value",
            "value": "center"
          },
          {
            "name": "space-between",
            "prose": "The ruby content expands as defined for normal text justification (as defined by text-justify), except that if there are no justification opportunities the content is centered. space-between ruby distribution",
            "type": "value",
            "value": "space-between"
          },
          {
            "name": "space-around",
            "prose": "As for space-between except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content. space-around ruby distribution",
            "type": "value",
            "value": "space-around"
          }
        ],
        "styleDeclaration": [
          "ruby-align",
          "rubyAlign"
        ]
      },
      {
        "name": "ruby-overhang",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "ruby annotation containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "When a ruby annotation container is longer than its corresponding ruby base container, the ruby annotation container may partially overlap adjacent boxes. Whether, how much, and under which conditions to overhang are determined by the UA.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "A ruby annotation container is never allowed to extend past the ruby annotation container.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "ruby-overhang",
          "rubyOverhang"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "ruby",
        "prose": "Specifies that an element generates a ruby container box. (Corresponds to HTML/XHTML <ruby> elements.)",
        "type": "value",
        "value": "ruby",
        "for": "display"
      },
      {
        "msg": "Dangling value",
        "name": "ruby-base",
        "prose": "Specifies that an element generates a ruby base box. (Corresponds to HTML/XHTML <rb> elements.)",
        "type": "value",
        "value": "ruby-base",
        "for": "display"
      },
      {
        "msg": "Dangling value",
        "name": "ruby-text",
        "prose": "Specifies that an element generates a ruby annotation box. (Corresponds to HTML/XHTML <rt> elements.)",
        "type": "value",
        "value": "ruby-text",
        "for": "display"
      },
      {
        "msg": "Dangling value",
        "name": "ruby-base-container",
        "prose": "Specifies that an element generates a ruby base container box. (Corresponds to XHTML <rbc> elements; generated as an anonymous box in HTML.)",
        "type": "value",
        "value": "ruby-base-container",
        "for": "display"
      },
      {
        "msg": "Dangling value",
        "name": "ruby-text-container",
        "prose": "Specifies that an element generates a ruby annotation container box. (Corresponds to HTML/XHTML <rtc> elements.)",
        "type": "value",
        "value": "ruby-text-container",
        "for": "display"
      }
    ]
  },
  "css-scoping": {
    "spec": {
      "title": "CSS Scoping Module Level 1",
      "url": "https://drafts.csswg.org/css-scoping-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": ":host",
        "prose": "The :host pseudo-class, when evaluated in the context of a shadow tree, matches the shadow tree’s shadow host. In any other context, it matches nothing."
      },
      {
        "name": ":host()",
        "prose": "The :host() function pseudo-class has the syntax:"
      },
      {
        "name": ":host-context()",
        "prose": "The :host-context() functional pseudo-class tests whether there is an ancestor, outside the shadow tree, which matches a particular selector. Its syntax is:"
      },
      {
        "name": "::slotted()",
        "prose": "The ::slotted() pseudo-element represents the elements assigned, after flattening, to a slot. This pseudo-element only exists on slots."
      }
    ],
    "values": []
  },
  "css-scroll-anchoring": {
    "spec": {
      "title": "CSS Scroll Anchoring Module Level 1",
      "url": "https://drafts.csswg.org/css-scroll-anchoring-1/"
    },
    "properties": [
      {
        "name": "overflow-anchor",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Declares that the element is potentially eligible to participate in the anchor node selection algorithm for any scrolling box created by the element or an ancestor.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Declares that the element and its descendants (that aren’t nested inside of another scrolling element) are not eligible to participate in the anchor node selection algorithm for any scrolling box created by the element or an ancestor.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "overflow-anchor",
          "overflowAnchor"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-scroll-snap-2": {
    "spec": {
      "title": "CSS Scroll Snap Module Level 2",
      "url": "https://drafts.csswg.org/css-scroll-snap-2/"
    },
    "properties": [
      {
        "name": "scroll-start",
        "value": "[ auto | start | end | center | left | right | top | bottom | <length-percentage [0,∞]> ]{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "...",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "start",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "center",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "end",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "end"
          }
        ],
        "styleDeclaration": [
          "scroll-start",
          "scrollStart"
        ]
      },
      {
        "name": "scroll-start-target",
        "value": "[ none | auto ]",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "none",
            "prose": "Element is not a scroll-start-target.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "Element is used to calculate the scroll-start position, taking into account scroll-padding or scroll-margin , same as a scroll-snap target.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-start-target",
          "scrollStartTarget"
        ]
      },
      {
        "name": "scroll-start-x",
        "value": "auto | start | end | center | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "...",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "start",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "center",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "end",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "end"
          }
        ],
        "styleDeclaration": [
          "scroll-start-x",
          "scrollStartX"
        ]
      },
      {
        "name": "scroll-start-y",
        "value": "auto | start | end | center | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "...",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "start",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "center",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "end",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "end"
          }
        ],
        "styleDeclaration": [
          "scroll-start-y",
          "scrollStartY"
        ]
      },
      {
        "name": "scroll-start-inline",
        "value": "auto | start | end | center | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "...",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "start",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "center",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "end",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "end"
          }
        ],
        "styleDeclaration": [
          "scroll-start-inline",
          "scrollStartInline"
        ]
      },
      {
        "name": "scroll-start-block",
        "value": "auto | start | end | center | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "...",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "start",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "center",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "end",
            "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
            "type": "value",
            "value": "end"
          }
        ],
        "styleDeclaration": [
          "scroll-start-block",
          "scrollStartBlock"
        ]
      }
    ],
    "atrules": [],
    "selectors": [
      {
        "name": ":snapped",
        "prose": "The :snapped pseudo-class matches any scroll snap targets, regardless of axis. The longform physical and logical pseudo-class selectors allow for more finite snapped children styling as they can target an individual axis."
      },
      {
        "name": ":snapped-x",
        "prose": "Matches the child snapped on the horizontal axis."
      },
      {
        "name": ":snapped-y",
        "prose": "Matches the child snapped on the vertical axis."
      },
      {
        "name": ":snapped-inline",
        "prose": "Matches the child snapped on the inline axis."
      },
      {
        "name": ":snapped-block",
        "prose": "Matches the child snapped on the block axis."
      }
    ],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "none",
        "prose": "Element is not a scroll-start-target.",
        "type": "value",
        "value": "none",
        "for": "scroll-start-target-x"
      },
      {
        "msg": "Dangling value",
        "name": "none",
        "prose": "Element is not a scroll-start-target.",
        "type": "value",
        "value": "none",
        "for": "scroll-start-target-y"
      },
      {
        "msg": "Dangling value",
        "name": "none",
        "prose": "Element is not a scroll-start-target.",
        "type": "value",
        "value": "none",
        "for": "scroll-start-target-block"
      },
      {
        "msg": "Dangling value",
        "name": "none",
        "prose": "Element is not a scroll-start-target.",
        "type": "value",
        "value": "none",
        "for": "scroll-start-target-inline"
      },
      {
        "msg": "Dangling value",
        "name": "auto",
        "prose": "Element is used to calculate the scroll-start position, taking into account scroll-padding or scroll-margin , same as a scroll-snap target.",
        "type": "value",
        "value": "auto",
        "for": "scroll-start-target-x"
      },
      {
        "msg": "Dangling value",
        "name": "auto",
        "prose": "Element is used to calculate the scroll-start position, taking into account scroll-padding or scroll-margin , same as a scroll-snap target.",
        "type": "value",
        "value": "auto",
        "for": "scroll-start-target-y"
      },
      {
        "msg": "Dangling value",
        "name": "auto",
        "prose": "Element is used to calculate the scroll-start position, taking into account scroll-padding or scroll-margin , same as a scroll-snap target.",
        "type": "value",
        "value": "auto",
        "for": "scroll-start-target-block"
      },
      {
        "msg": "Dangling value",
        "name": "auto",
        "prose": "Element is used to calculate the scroll-start position, taking into account scroll-padding or scroll-margin , same as a scroll-snap target.",
        "type": "value",
        "value": "auto",
        "for": "scroll-start-target-inline"
      }
    ]
  },
  "css-scroll-snap": {
    "spec": {
      "title": "CSS Scroll Snap Module Level 1",
      "url": "https://drafts.csswg.org/css-scroll-snap-1/"
    },
    "properties": [
      {
        "name": "scroll-snap-type",
        "value": "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "x",
            "prose": "The scroll container snaps to snap positions in its horizontal axis only.",
            "type": "value",
            "value": "x"
          },
          {
            "name": "y",
            "prose": "The scroll container snaps to snap positions in its vertical axis only.",
            "type": "value",
            "value": "y"
          },
          {
            "name": "block",
            "prose": "The scroll container snaps to snap positions in its block axis only.",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "The scroll container snaps to snap positions in its inline axis only.",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "both",
            "prose": "The scroll container snaps to snap positions in both of its axes independently (potentially snapping to different elements in each axis).",
            "type": "value",
            "value": "both"
          },
          {
            "name": "none",
            "prose": "If specified on a scroll container, the scroll container must not snap.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "mandatory",
            "prose": "If specified on a scroll container, the scroll container is required to be snapped to a snap position when there are no active scrolling operations. If a valid snap position exists then the scroll container must snap at the termination of a scroll (if none exist then no snapping occurs).",
            "type": "value",
            "value": "mandatory"
          },
          {
            "name": "proximity",
            "prose": "If specified on a scroll container, the scroll container may snap to a snap position at the termination of a scroll, at the discretion of the UA given the parameters of the scroll.",
            "type": "value",
            "value": "proximity"
          }
        ],
        "styleDeclaration": [
          "scroll-snap-type",
          "scrollSnapType"
        ]
      },
      {
        "name": "scroll-padding",
        "value": "[ auto | <length-percentage [0,∞]> ]{1,4}",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the corresponding dimension of the scroll container’s scrollport",
        "computedValue": "per side, either the keyword auto or a computed <length-percentage> value",
        "animationType": "by computed value type",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding",
          "scrollPadding"
        ]
      },
      {
        "name": "scroll-margin",
        "value": "<length>{1,4}",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "per side, an absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin",
          "scrollMargin"
        ]
      },
      {
        "name": "scroll-snap-align",
        "value": "[ none | start | end | center ]{1,2}",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "two keywords",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "This box does not define a snap position in the specified axis.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "start",
            "prose": "Start alignment of this box’s scroll snap area within the scroll container’s snapport is a snap position in the specified axis.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "End alignment of this box’s scroll snap area within the scroll container’s snapport is a snap position in the specified axis.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "center",
            "prose": "Center alignment of this box’s scroll snap area within the scroll container’s snapport is a snap position in the specified axis.",
            "type": "value",
            "value": "center"
          }
        ],
        "styleDeclaration": [
          "scroll-snap-align",
          "scrollSnapAlign"
        ]
      },
      {
        "name": "scroll-snap-stop",
        "value": "normal | always",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "The scroll container may pass over a snap position defined by this element during the execution of a scrolling operation.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "always",
            "prose": "The scroll container must not pass over a snap position defined by this element during the execution of a scrolling operation; it must instead snap to the first of this element’s snap positions.",
            "type": "value",
            "value": "always"
          }
        ],
        "styleDeclaration": [
          "scroll-snap-stop",
          "scrollSnapStop"
        ]
      },
      {
        "name": "scroll-padding-top",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-padding-top",
          "scrollPaddingTop"
        ]
      },
      {
        "name": "scroll-padding-right",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-padding-right",
          "scrollPaddingRight"
        ]
      },
      {
        "name": "scroll-padding-bottom",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-padding-bottom",
          "scrollPaddingBottom"
        ]
      },
      {
        "name": "scroll-padding-left",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-padding-left",
          "scrollPaddingLeft"
        ]
      },
      {
        "name": "scroll-padding-inline-start",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding-inline-start",
          "scrollPaddingInlineStart"
        ]
      },
      {
        "name": "scroll-padding-block-start",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding-block-start",
          "scrollPaddingBlockStart"
        ]
      },
      {
        "name": "scroll-padding-inline-end",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding-inline-end",
          "scrollPaddingInlineEnd"
        ]
      },
      {
        "name": "scroll-padding-block-end",
        "value": "auto | <length-percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding-block-end",
          "scrollPaddingBlockEnd"
        ]
      },
      {
        "name": "scroll-padding-block",
        "value": "[ auto | <length-percentage [0,∞]> ]{1,2}",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "see individual properties",
        "animationType": "by computed value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding-block",
          "scrollPaddingBlock"
        ]
      },
      {
        "name": "scroll-padding-inline",
        "value": "[ auto | <length-percentage [0,∞]> ]{1,2}",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "relative to the scroll container’s scrollport",
        "computedValue": "see individual properties",
        "animationType": "by computed value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "scroll-padding-inline",
          "scrollPaddingInline"
        ]
      },
      {
        "name": "scroll-margin-top",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-top",
          "scrollMarginTop"
        ]
      },
      {
        "name": "scroll-margin-right",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-right",
          "scrollMarginRight"
        ]
      },
      {
        "name": "scroll-margin-bottom",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-bottom",
          "scrollMarginBottom"
        ]
      },
      {
        "name": "scroll-margin-left",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-left",
          "scrollMarginLeft"
        ]
      },
      {
        "name": "scroll-margin-block-start",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-block-start",
          "scrollMarginBlockStart"
        ]
      },
      {
        "name": "scroll-margin-inline-start",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-inline-start",
          "scrollMarginInlineStart"
        ]
      },
      {
        "name": "scroll-margin-block-end",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-block-end",
          "scrollMarginBlockEnd"
        ]
      },
      {
        "name": "scroll-margin-inline-end",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "scroll-margin-inline-end",
          "scrollMarginInlineEnd"
        ]
      },
      {
        "name": "scroll-margin-block",
        "value": "<length>{1,2}",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "see individual properties",
        "animationType": "by computed value type",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "scroll-margin-block",
          "scrollMarginBlock"
        ]
      },
      {
        "name": "scroll-margin-inline",
        "value": "<length>{1,2}",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "see individual properties",
        "animationType": "by computed value type",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "scroll-margin-inline",
          "scrollMarginInline"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-scrollbars": {
    "spec": {
      "title": "CSS Scrollbars Styling Module Level 1",
      "url": "https://drafts.csswg.org/css-scrollbars-1/"
    },
    "properties": [
      {
        "name": "scrollbar-color",
        "value": "auto | <color>{2}",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword or two computed colors",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "The user agent determines the colors of the scrollbar. It should follow platform conventions, but may adjust the colors in accordance with color-scheme or other contextual information to better suit the page.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<color>",
            "prose": "apply the first color to the thumb of the scrollbar, and the second color to the track of the scrollbar.",
            "type": "value",
            "value": "<color>"
          }
        ],
        "styleDeclaration": [
          "scrollbar-color",
          "scrollbarColor"
        ]
      },
      {
        "name": "scrollbar-width",
        "value": "auto | thin | none",
        "initial": "auto",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "Implementations must use the default scrollbar width.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "thin",
            "prose": "Implementations should use thinner scrollbars than auto. This may mean a thin variant of scrollbar provided by the platform, or a custom scrollbar thinner than the default platform scrollbar. The scrollbar must nonetheless remain wide enough to be usable. (Implementers may wish to consult WCAG 2.1 SC 2.5.5 Target Size. [WCAG21]) User agents may disregard this value and treat it as auto, for instance when the user has indicated discomfort for thin scrollbars through some UA or OS setting. (User agents are encouraged to provide such a setting.)",
            "type": "value",
            "value": "thin"
          },
          {
            "name": "none",
            "prose": "Implementations must not display any scrollbar, however the element’s scrollability by other means is not affected. Using this value can prevent mouse-only users from being able to scroll. Authors should ensure that mouse-only users can still reach hidden content, even if they have no scrollwheel. Authors that use none should provide an alternative/equivalent visual hint that scrolling is possible and there is more content.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "scrollbar-width",
          "scrollbarWidth"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-shadow-parts": {
    "spec": {
      "title": "CSS Shadow Parts",
      "url": "https://drafts.csswg.org/css-shadow-parts-1/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": "::part()",
        "prose": "The ::part() pseudo-element allows you to select elements that have been exposed via a part attribute. The syntax is:",
        "value": "::part( <ident>+ )"
      }
    ],
    "values": []
  },
  "css-shapes-2": {
    "spec": {
      "title": "CSS Shapes Module Level 2",
      "url": "https://drafts.csswg.org/css-shapes-2/"
    },
    "properties": [
      {
        "name": "shape-inside",
        "value": "auto | outside-shape | [ <basic-shape> || shape-box ] | <image> | display",
        "initial": "auto",
        "appliesTo": "block-level elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "computed lengths for <basic-shape>, the absolute URL for <url>, otherwise as specified",
        "canonicalOrder": "per grammar",
        "animationType": "as defined for <basic-shape>, otherwise discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The shape is computed based on the content box of the element.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "outside-shape",
            "prose": "The shape is computed based on the shape defined by the shape-outside and shape-margin properties.",
            "type": "value",
            "value": "outside-shape"
          },
          {
            "name": "<basic-shape>",
            "prose": "The shape is computed based on the values of one of inset(), circle(), ellipse() or polygon().",
            "type": "value",
            "value": "<basic-shape>"
          },
          {
            "name": "<url>",
            "prose": "If the <uri> references an SVG shape element, that element defines the shape. Otherwise, if the <uri> references an image, the shape is extracted and computed based on the alpha channel of the specified image. If the <uri> does not reference an SVG shape element or an image, the effect is as if the value auto had been specified.",
            "type": "value",
            "value": "<url>"
          },
          {
            "name": "display",
            "prose": "The shape is computed based on the shape of the display as described in css-round-display.",
            "type": "value",
            "value": "display"
          }
        ],
        "styleDeclaration": [
          "shape-inside",
          "shapeInside"
        ]
      },
      {
        "name": "shape-padding",
        "value": "<length>",
        "initial": "none",
        "appliesTo": "block-level elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "shape-padding",
          "shapePadding"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "shape()",
        "type": "function",
        "value": "shape( <'fill-rule'>? from <coordinate-pair>, <shape-command>#)",
        "values": [
          {
            "name": "<coordinate-pair>",
            "value": "<length-percentage>{2}",
            "type": "type"
          },
          {
            "name": "<by-to>",
            "value": "by | to",
            "type": "type",
            "values": [
              {
                "name": "by",
                "prose": "<by-to> = by | to",
                "type": "value",
                "value": "by"
              },
              {
                "name": "to",
                "prose": "<by-to> = by | to",
                "type": "value",
                "value": "to"
              }
            ]
          },
          {
            "name": "<move-command>",
            "value": "move <by-to> <coordinate-pair>",
            "type": "type"
          },
          {
            "name": "move",
            "prose": "<move-command> = move <by-to> <coordinate-pair>",
            "type": "value",
            "value": "move"
          },
          {
            "name": "<line-command>",
            "value": "line <by-to> <coordinate-pair>",
            "type": "type"
          },
          {
            "name": "line",
            "prose": "<line-command> = line <by-to> <coordinate-pair>",
            "type": "value",
            "value": "line"
          },
          {
            "name": "<hv-line-command>",
            "value": "[hline | vline] <by-to> <length-percentage>",
            "type": "type"
          },
          {
            "name": "hline",
            "prose": "<hv-line-command> = [hline | vline] <by-to> <length-percentage>",
            "type": "value",
            "value": "hline"
          },
          {
            "name": "vline",
            "prose": "<hv-line-command> = [hline | vline] <by-to> <length-percentage>",
            "type": "value",
            "value": "vline"
          },
          {
            "name": "<curve-command>",
            "value": "curve <by-to> <coordinate-pair> via <coordinate-pair>{1,2}",
            "type": "type"
          },
          {
            "name": "curve",
            "prose": "<curve-command> = curve <by-to> <coordinate-pair> via <coordinate-pair>{1,2}",
            "type": "value",
            "value": "curve"
          },
          {
            "name": "<smooth-command>",
            "value": "smooth <by-to> <coordinate-pair> [via <coordinate-pair>]?",
            "type": "type"
          },
          {
            "name": "smooth",
            "prose": "<smooth-command> = smooth <by-to> <coordinate-pair> [via <coordinate-pair>]?",
            "type": "value",
            "value": "smooth"
          },
          {
            "name": "<arc-command>",
            "value": "arc <by-to> <coordinate-pair> of <length-percentage>{1,2} [ <arc-sweep> || <arc-size> || rotate <angle> ]?",
            "type": "type"
          },
          {
            "name": "arc",
            "prose": "<arc-command> = arc <by-to> <coordinate-pair> of <length-percentage>{1,2} [ <arc-sweep> || <arc-size> || rotate <angle> ]",
            "type": "value",
            "value": "arc",
            "values": [
              {
                "name": "cw",
                "prose": "<arc-sweep> can be cw or ccw, indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively, must be chosen. If omitted, this defaults to ccw.",
                "type": "value",
                "value": "cw"
              },
              {
                "name": "ccw",
                "prose": "<arc-sweep> can be cw or ccw, indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively, must be chosen. If omitted, this defaults to ccw.",
                "type": "value",
                "value": "ccw"
              },
              {
                "name": "large",
                "prose": "<arc-size> can be large or small, indicating that the larger or smaller, respectively, of the two possible arcs must be chosen. If omitted, this defaults to small.",
                "type": "value",
                "value": "large"
              },
              {
                "name": "small",
                "prose": "<arc-size> can be large or small, indicating that the larger or smaller, respectively, of the two possible arcs must be chosen. If omitted, this defaults to small.",
                "type": "value",
                "value": "small"
              }
            ]
          },
          {
            "name": "<arc-sweep>",
            "prose": "<arc-sweep> can be cw or ccw, indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively, must be chosen. If omitted, this defaults to ccw.",
            "type": "type",
            "value": "cw | ccw"
          },
          {
            "name": "<arc-size>",
            "prose": "<arc-size> can be large or small, indicating that the larger or smaller, respectively, of the two possible arcs must be chosen. If omitted, this defaults to small.",
            "type": "type",
            "value": "large | small"
          },
          {
            "name": "close",
            "prose": "Adds a closepath command to the list of path data commands.",
            "type": "value",
            "value": "close"
          }
        ]
      },
      {
        "name": "<shape-command>",
        "prose": "The sequence of <shape-command>s represent further path data commands. Each command’s starting point is the previous command’s ending point.",
        "type": "type",
        "value": "<move-command> | <line-command> | <hv-line-command> | <curve-command> | <smooth-command> | <arc-command> | close"
      }
    ]
  },
  "css-shapes": {
    "spec": {
      "title": "CSS Shapes Module Level 1",
      "url": "https://drafts.csswg.org/css-shapes-1/"
    },
    "properties": [
      {
        "name": "shape-outside",
        "value": "none | [ <basic-shape> || <shape-box> ] | <image>",
        "initial": "none",
        "appliesTo": "floats",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as defined for <basic-shape> (with <shape-box> following, if supplied); else the computed <image>; else the keyword as specified",
        "canonicalOrder": "per grammar",
        "animationType": "as defined for <basic-shape>, otherwise discrete",
        "values": [
          {
            "name": "none",
            "prose": "The float area is unaffected.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<basic-shape>",
            "prose": "The shape is computed based on the values of one of inset(), circle(), ellipse() or polygon(). If a <shape-box> is also supplied, this defines the reference box for the <basic-shape> function. If <shape-box> is not supplied, then the reference box defaults to margin-box.",
            "type": "value",
            "value": "<basic-shape>"
          },
          {
            "name": "<image>",
            "prose": "The shape is extracted and computed based on the alpha channel of the specified <image> as defined by shape-image-threshold. User agents must use the CORS protocol defined by the [FETCH] specification for all URLs in a shape-outside value. When fetching, user agents must use \"Anonymous\" mode, set the referrer source to the stylesheet’s URL and set the origin to the URL of the containing document. If this results in network errors such that there is no valid fallback image, the effect is as if the value none had been specified.",
            "type": "value",
            "value": "<image>"
          }
        ],
        "styleDeclaration": [
          "shape-outside",
          "shapeOutside"
        ]
      },
      {
        "name": "shape-image-threshold",
        "value": "<alpha-value>",
        "initial": "0",
        "appliesTo": "floats",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified number, clamped to the range [0,1]",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "<number>",
            "prose": "Sets the threshold used for extracting a shape from an image. The shape is defined by the pixels whose alpha value is greater than the threshold. A threshold value outside the range 0.0 (fully transparent) to 1.0 (fully opaque) will be clamped to this range.",
            "type": "value",
            "value": "<number>"
          }
        ],
        "styleDeclaration": [
          "shape-image-threshold",
          "shapeImageThreshold"
        ]
      },
      {
        "name": "shape-margin",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "floats",
        "inherited": "no",
        "percentages": "refer to the inline size of the containing block",
        "computedValue": "computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "<length-percentage>",
            "prose": "Sets the margin of the shape to the specified value.",
            "type": "value",
            "value": "<length-percentage>"
          }
        ],
        "styleDeclaration": [
          "shape-margin",
          "shapeMargin"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<basic-shape>",
        "prose": "The <basic-shape> type can be specified using basic shape functions. When using this syntax to define shapes, the reference box is defined by each property that uses <basic-shape> values. The coordinate system for the shape has its origin on the top-left corner of the reference box with the x-axis running to the right and the y-axis running downwards. All the lengths expressed in percentages are resolved from the used dimensions of the reference box.",
        "type": "type",
        "values": [
          {
            "name": "inset()",
            "value": "inset( <length-percentage>{1,4} [ round <'border-radius'> ]? )",
            "type": "function"
          },
          {
            "name": "xywh()",
            "value": "xywh( <length-percentage>{2} <length-percentage [0,∞]>{2} [ round <'border-radius'> ]? )",
            "type": "function"
          },
          {
            "name": "rect()",
            "value": "rect( [ <length-percentage> | auto ]{4} [ round <'border-radius'> ]? )",
            "type": "function"
          },
          {
            "name": "circle()",
            "value": "circle( <shape-radius>? [ at <position> ]? )",
            "type": "function"
          },
          {
            "name": "ellipse()",
            "value": "ellipse( [ <shape-radius>{2} ]? [ at <position> ]? )",
            "type": "function"
          },
          {
            "name": "polygon()",
            "value": "polygon( <'fill-rule'>? , [<length-percentage> <length-percentage>]# )",
            "type": "function"
          },
          {
            "name": "path()",
            "value": "path( [<'fill-rule'>,]? <string> )",
            "type": "function",
            "values": [
              {
                "name": "<string>",
                "type": "value",
                "value": "<string>"
              }
            ]
          }
        ]
      },
      {
        "name": "<shape-radius>",
        "value": "<length-percentage [0,∞]> | closest-side | farthest-side",
        "type": "type"
      },
      {
        "name": "<basic-shape-rect>",
        "type": "type",
        "value": "<inset()> | <rect()> | <xywh()>"
      },
      {
        "name": "<shape-box>",
        "type": "type",
        "value": "<box> | margin-box",
        "values": [
          {
            "name": "margin-box",
            "prose": "The margin-box value defines the shape enclosed by the outside margin edge. The corner radii of this shape are determined by the corresponding border-radius and margin values. If the ratio of border-radius/margin is 1 or more, or margin is negative or zero, then the margin box corner radius is max(border-radius + margin, 0). If the ratio of border-radius/margin is less than 1, and margin is positive, then the margin box corner radius is border-radius + margin * (1 + (ratio-1)^3).",
            "type": "value",
            "value": "margin-box"
          },
          {
            "name": "border-box",
            "prose": "The border-box value defines the shape enclosed by the outside border edge. This shape follows all of the normal border radius shaping rules for the outside of the border.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "padding-box",
            "prose": "The padding-box value defines the shape enclosed by the outside padding edge. This shape follows all of the normal border radius shaping rules for the inside of the border.",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "content-box",
            "prose": "The content-box value defines the shape enclosed by the outside content edge. Each corner radius of this box is the larger of 0 or border-radius - border-width - padding.",
            "type": "value",
            "value": "content-box"
          }
        ]
      }
    ]
  },
  "css-size-adjust": {
    "spec": {
      "title": "CSS Mobile Text Size Adjustment Module Level 1",
      "url": "https://drafts.csswg.org/css-size-adjust-1/"
    },
    "properties": [
      {
        "name": "text-size-adjust",
        "value": "auto | none | <percentage [0,∞]>",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "see below",
        "computedValue": "specified keyword or percentage",
        "canonicalOrder": "N/A",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "Renderers must use the default size adjustment when displaying on a small device.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Renderers must not do size adjustment when displaying on a small device.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<percentage [0,∞]>",
            "prose": "When displaying on a small device, renderers must not do size adjustment but instead the computed value of font-size must be multiplied by this percentage. Negative values are invalid.",
            "type": "value",
            "value": "<percentage [0,∞]>"
          }
        ],
        "styleDeclaration": [
          "text-size-adjust",
          "textSizeAdjust"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-sizing-4": {
    "spec": {
      "title": "CSS Box Sizing Module Level 4",
      "url": "https://drafts.csswg.org/css-sizing-4/"
    },
    "properties": [
      {
        "name": "width",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "width"
        ]
      },
      {
        "name": "height",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "height"
        ]
      },
      {
        "name": "inline-size",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "inline-size",
          "inlineSize"
        ]
      },
      {
        "name": "block-size",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "block-size",
          "blockSize"
        ]
      },
      {
        "name": "min-width",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "min-width",
          "minWidth"
        ]
      },
      {
        "name": "min-height",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "min-height",
          "minHeight"
        ]
      },
      {
        "name": "min-inline-size",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "min-inline-size",
          "minInlineSize"
        ]
      },
      {
        "name": "min-block-size",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "min-block-size",
          "minBlockSize"
        ]
      },
      {
        "name": "max-width",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "max-width",
          "maxWidth"
        ]
      },
      {
        "name": "max-height",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "max-height",
          "maxHeight"
        ]
      },
      {
        "name": "max-inline-size",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "max-inline-size",
          "maxInlineSize"
        ]
      },
      {
        "name": "max-block-size",
        "newValues": "stretch | fit-content | contain",
        "values": [
          {
            "name": "stretch",
            "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "fit-content",
            "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
            "type": "value",
            "value": "fit-content"
          },
          {
            "name": "contain",
            "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
            "type": "value",
            "value": "contain"
          }
        ],
        "styleDeclaration": [
          "max-block-size",
          "maxBlockSize"
        ]
      },
      {
        "name": "aspect-ratio",
        "value": "auto || <ratio>",
        "initial": "auto",
        "appliesTo": "all elements except inline boxes and internal ruby or table boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword or a pair of numbers",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "Replaced elements with a natural aspect ratio use that aspect ratio; otherwise the box has no preferred aspect ratio. Size calculations involving the aspect ratio work with the content box dimensions always.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<ratio>",
            "prose": "The box’s preferred aspect ratio is the specified ratio of width / height. Size calculations involving the aspect ratio work with the dimensions of the box specified by box-sizing. If the <ratio> is degenerate, the property instead behaves as auto.",
            "type": "value",
            "value": "<ratio>"
          },
          {
            "name": "auto && <ratio>",
            "prose": "If both auto and a <ratio> are specified together, the preferred aspect ratio is the specified ratio of width / height unless it is a replaced element with a natural aspect ratio, in which case that aspect ratio is used instead. In all cases, size calculations involving the aspect ratio work with the content box dimensions always. If the <ratio> is degenerate, the property instead behaves as auto.",
            "type": "value",
            "value": "auto && <ratio>"
          }
        ],
        "styleDeclaration": [
          "aspect-ratio",
          "aspectRatio"
        ]
      },
      {
        "name": "contain-intrinsic-width",
        "value": "none | <length> | auto <length>",
        "initial": "none",
        "appliesTo": "elements with size containment",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified, with <length> values computed",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<length>",
            "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "auto <length>",
            "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
            "type": "value",
            "value": "auto <length>"
          }
        ],
        "styleDeclaration": [
          "contain-intrinsic-width",
          "containIntrinsicWidth"
        ]
      },
      {
        "name": "contain-intrinsic-height",
        "value": "none | <length> | auto <length>",
        "initial": "none",
        "appliesTo": "elements with size containment",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified, with <length> values computed",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<length>",
            "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "auto <length>",
            "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
            "type": "value",
            "value": "auto <length>"
          }
        ],
        "styleDeclaration": [
          "contain-intrinsic-height",
          "containIntrinsicHeight"
        ]
      },
      {
        "name": "contain-intrinsic-block-size",
        "value": "none | <length> | auto <length>",
        "initial": "none",
        "appliesTo": "elements with size containment",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified, with <length> values computed",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<length>",
            "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "auto <length>",
            "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
            "type": "value",
            "value": "auto <length>"
          }
        ],
        "styleDeclaration": [
          "contain-intrinsic-block-size",
          "containIntrinsicBlockSize"
        ]
      },
      {
        "name": "contain-intrinsic-inline-size",
        "value": "none | <length> | auto <length>",
        "initial": "none",
        "appliesTo": "elements with size containment",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified, with <length> values computed",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<length>",
            "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "auto <length>",
            "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
            "type": "value",
            "value": "auto <length>"
          }
        ],
        "styleDeclaration": [
          "contain-intrinsic-inline-size",
          "containIntrinsicInlineSize"
        ]
      },
      {
        "name": "contain-intrinsic-size",
        "value": "[ none | <length> | auto <length> ]{1,2}",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "none",
            "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<length>",
            "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "auto <length>",
            "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
            "type": "value",
            "value": "auto <length>"
          }
        ],
        "styleDeclaration": [
          "contain-intrinsic-size",
          "containIntrinsicSize"
        ]
      },
      {
        "name": "min-intrinsic-sizing",
        "value": "legacy | zero-if-scroll || zero-if-extrinsic",
        "initial": "legacy",
        "appliesTo": "all elements except inline boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "legacy",
            "prose": "The box’s min-content contribution is handled as normal.",
            "type": "value",
            "value": "legacy"
          },
          {
            "name": "zero-if-scroll",
            "prose": "The box’s min-content contribution is “compressed” if it is a scroll container.",
            "type": "value",
            "value": "zero-if-scroll"
          },
          {
            "name": "zero-if-extrinsic",
            "prose": "The box’s min-content contribution is “compressed” if has an extrinsic preferred or maximum size.",
            "type": "value",
            "value": "zero-if-extrinsic"
          }
        ],
        "styleDeclaration": [
          "min-intrinsic-sizing",
          "minIntrinsicSizing"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-sizing": {
    "spec": {
      "title": "CSS Box Sizing Module Level 3",
      "url": "https://drafts.csswg.org/css-sizing-3/"
    },
    "properties": [
      {
        "name": "width",
        "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
        "initial": "auto",
        "appliesTo": "all elements except non-replaced inlines",
        "inherited": "no",
        "percentages": "relative to width/height of containing block",
        "computedValue": "as specified, with <length-percentage> values computed",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type, recursing into fit-content()",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "min-content",
            "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "width"
        ]
      },
      {
        "name": "height",
        "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
        "initial": "auto",
        "appliesTo": "all elements except non-replaced inlines",
        "inherited": "no",
        "percentages": "relative to width/height of containing block",
        "computedValue": "as specified, with <length-percentage> values computed",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type, recursing into fit-content()",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "min-content",
            "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "height"
        ]
      },
      {
        "name": "min-width",
        "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
        "initial": "auto",
        "appliesTo": "all elements that accept width or height",
        "inherited": "no",
        "percentages": "relative to width/height of containing block",
        "computedValue": "as specified, with <length-percentage> values computed",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value, recursing into fit-content()",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "min-content",
            "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "min-width",
          "minWidth"
        ]
      },
      {
        "name": "min-height",
        "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
        "initial": "auto",
        "appliesTo": "all elements that accept width or height",
        "inherited": "no",
        "percentages": "relative to width/height of containing block",
        "computedValue": "as specified, with <length-percentage> values computed",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value, recursing into fit-content()",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "auto",
            "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "min-content",
            "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "min-height",
          "minHeight"
        ]
      },
      {
        "name": "max-width",
        "value": "none | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
        "initial": "none",
        "appliesTo": "all elements that accept width or height",
        "inherited": "no",
        "percentages": "relative to width/height of containing block",
        "computedValue": "as specified, with <length-percentage> values computed",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value, recursing into fit-content()",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "none",
            "prose": "No limit on the size of the box.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "min-content",
            "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "max-width",
          "maxWidth"
        ]
      },
      {
        "name": "max-height",
        "value": "none | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
        "initial": "none",
        "appliesTo": "all elements that accept width or height",
        "inherited": "no",
        "percentages": "relative to width/height of containing block",
        "computedValue": "as specified, with <length-percentage> values computed",
        "canonicalOrder": "per grammar",
        "animatable": "by computed value, recursing into fit-content()",
        "values": [
          {
            "name": "<length-percentage [0,∞]>",
            "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
            "type": "value",
            "value": "<length-percentage [0,∞]>"
          },
          {
            "name": "none",
            "prose": "No limit on the size of the box.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "min-content",
            "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "max-height",
          "maxHeight"
        ]
      },
      {
        "name": "box-sizing",
        "value": "content-box | border-box",
        "initial": "content-box",
        "appliesTo": "all elements that accept width or height",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "content-box",
            "prose": "Sizes specified on sizing properties as <length-percentage> represent the box’s inner sizes, excluding the margins/border/padding: they are applied to the content box. The padding and border of the box are laid out and drawn outside the specified width and height.",
            "type": "value",
            "value": "content-box"
          },
          {
            "name": "border-box",
            "prose": "Sizes specified on sizing properties as <length-percentage> represent the box’s visually-apparent sizes, including the borders/padding (but not margin): they are applied to the border box. The padding and border of the box are laid out and drawn inside the specified width and height, with the content box sized to fill the remaining space, floored at zero. The content width and height are calculated by subtracting the border and padding widths of the respective sides from the specified <length-percentage>. As the content width and height cannot be negative, this computation is floored at zero. Used values, as exposed for instance through getComputedStyle(), also refer to the border box.",
            "type": "value",
            "value": "border-box"
          }
        ],
        "styleDeclaration": [
          "box-sizing",
          "boxSizing"
        ]
      },
      {
        "name": "column-width",
        "newValues": "min-content | max-content | fit-content(<length-percentage>)",
        "computedValue": "as specified, with <length-percentage> values computed",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "min-content",
            "prose": "Specifies the optimal column width as the min-content inline size of the multi-column container’s contents.",
            "type": "value",
            "value": "min-content"
          },
          {
            "name": "max-content",
            "prose": "Specifies the optimal column width as the max-content inline size of the multi-column container’s contents.",
            "type": "value",
            "value": "max-content"
          },
          {
            "name": "fit-content()",
            "value": "fit-content()",
            "type": "value"
          }
        ],
        "styleDeclaration": [
          "column-width",
          "columnWidth"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-speech": {
    "spec": {
      "title": "CSS Speech Module Level 1",
      "url": "https://drafts.csswg.org/css-speech-1/"
    },
    "properties": [
      {
        "name": "voice-volume",
        "value": "silent | [[x-soft | soft | medium | loud | x-loud] || <decibel>]",
        "initial": "medium",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "silent, or a keyword value and optionally also a decibel offset (if not zero)",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "silent",
            "prose": "Specifies that no sound is generated (the text is read \"silently\").",
            "type": "value",
            "value": "silent"
          },
          {
            "name": "x-soft",
            "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
            "type": "value",
            "value": "x-soft"
          },
          {
            "name": "soft",
            "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
            "type": "value",
            "value": "soft"
          },
          {
            "name": "medium",
            "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "loud",
            "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
            "type": "value",
            "value": "loud"
          },
          {
            "name": "x-loud",
            "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
            "type": "value",
            "value": "x-loud"
          },
          {
            "name": "<decibel>",
            "prose": "This represents a change (positive or negative) relative to the given keyword value (see enumeration above), or to the default value for the root element, or otherwise to the inherited volume level (which may itself be a combination of a keyword value and decibel offset, in which case the decibel values are combined additively). When the inherited volume level is silent, this voice-volume resolves to silent too, regardless of the specified <decibel> value. The <decibel> type denotes a dimension with a \"dB\" (decibel unit) unit identifier. Decibels represent the ratio of the squares of the new signal amplitude a1 and the current amplitude a0, as per the following logarithmic equation: volume(dB) = 20 × log10(a1 / a0).",
            "type": "value",
            "value": "<decibel>"
          },
          {
            "name": "<decibel>",
            "prose": "The <decibel> type denotes a dimension with a \"dB\" (decibel unit) unit identifier. Decibels represent the ratio of the squares of the new signal amplitude a1 and the current amplitude a0, as per the following logarithmic equation: volume(dB) = 20 × log10(a1 / a0).",
            "type": "type"
          }
        ],
        "styleDeclaration": [
          "voice-volume",
          "voiceVolume"
        ]
      },
      {
        "name": "voice-balance",
        "value": "<number> | left | center | right | leftwards | rightwards",
        "initial": "center",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the specified value resolved to a <number> between -100 and 100 (inclusive)",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<number>",
            "prose": "A number between -100 and 100 (inclusive). Values smaller than -100 are clamped to -100. Values greater than 100 are clamped to 100. The value -100 represents the left side, and the value 100 represents the right side. The value 0 represents the center point whereby there is no discernible audio separation between left and right sides. (In a stereo sound system, this corresponds to equal distribution of audio signals between left and right speakers).",
            "type": "value",
            "value": "<number>"
          },
          {
            "name": "left",
            "prose": "Same as -100.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "center",
            "prose": "Same as 0.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "right",
            "prose": "Same as 100.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "leftwards",
            "prose": "Moves the sound to the left by subtracting 20 from the inherited voice-balance value (and by clamping the resulting number to -100).",
            "type": "value",
            "value": "leftwards"
          },
          {
            "name": "rightwards",
            "prose": "Moves the sound to the right, by adding 20 to the inherited voice-balance value (and by clamping the resulting number to 100).",
            "type": "value",
            "value": "rightwards"
          }
        ],
        "styleDeclaration": [
          "voice-balance",
          "voiceBalance"
        ]
      },
      {
        "name": "speak",
        "value": "auto | never | always",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "Resolves to a computed value of never when display is none, otherwise resolves to a computed value of auto. The used value of a computed auto is equivalent to always if visibility is visible and to never otherwise.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "never",
            "prose": "This value causes an element (including pauses, cues, rests and actual content) to not be rendered (i.e., the element has no effect in the aural dimension).",
            "type": "value",
            "value": "never"
          },
          {
            "name": "always",
            "prose": "The element is rendered aurally (regardless of its display value, or the display or speak values of its ancestors).",
            "type": "value",
            "value": "always"
          }
        ],
        "styleDeclaration": [
          "speak"
        ]
      },
      {
        "name": "speak-as",
        "value": "normal | spell-out || digits || [ literal-punctuation | no-punctuation ]",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "normal",
            "prose": "Uses language-dependent pronunciation rules for rendering the element’s content. For example, punctuation is not spoken as-is, but instead rendered naturally as appropriate pauses.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "spell-out",
            "prose": "Spells the text one letter at a time (useful for acronyms and abbreviations). In languages where accented characters are rare, it is permitted to drop accents in favor of alternative unaccented spellings. As an example, in English, the word “rôle” can also be written as “role”. A conforming implementation would thus be able to spell-out “rôle” as “R O L E”.",
            "type": "value",
            "value": "spell-out"
          },
          {
            "name": "digits",
            "prose": "Speak numbers one digit at a time, for instance, “twelve” would be spoken as “one two”, and “31” as “three one”.",
            "type": "value",
            "value": "digits"
          },
          {
            "name": "literal-punctuation",
            "prose": "Punctuation such as semicolons, braces, and so on is named aloud (i.e. spoken literally) rather than rendered naturally as appropriate pauses.",
            "type": "value",
            "value": "literal-punctuation"
          },
          {
            "name": "no-punctuation",
            "prose": "Punctuation is not rendered: neither spoken nor rendered as pauses.",
            "type": "value",
            "value": "no-punctuation"
          }
        ],
        "styleDeclaration": [
          "speak-as",
          "speakAs"
        ]
      },
      {
        "name": "pause-before",
        "value": "<time> | none | x-weak | weak | medium | strong | x-strong",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<time>",
            "prose": "Expresses the pause in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
            "type": "value",
            "value": "<time>"
          },
          {
            "name": "none",
            "prose": "Equivalent to 0ms (no prosodic break is produced by the speech processor).",
            "type": "value",
            "value": "none"
          },
          {
            "name": "x-weak",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-weak"
          },
          {
            "name": "weak",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "weak"
          },
          {
            "name": "medium",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "strong",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "strong"
          },
          {
            "name": "x-strong",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-strong"
          }
        ],
        "styleDeclaration": [
          "pause-before",
          "pauseBefore"
        ]
      },
      {
        "name": "pause-after",
        "value": "<time> | none | x-weak | weak | medium | strong | x-strong",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<time>",
            "prose": "Expresses the pause in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
            "type": "value",
            "value": "<time>"
          },
          {
            "name": "none",
            "prose": "Equivalent to 0ms (no prosodic break is produced by the speech processor).",
            "type": "value",
            "value": "none"
          },
          {
            "name": "x-weak",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-weak"
          },
          {
            "name": "weak",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "weak"
          },
          {
            "name": "medium",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "strong",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "strong"
          },
          {
            "name": "x-strong",
            "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-strong"
          }
        ],
        "styleDeclaration": [
          "pause-after",
          "pauseAfter"
        ]
      },
      {
        "name": "pause",
        "value": "<'pause-before'> <'pause-after'>?",
        "initial": "N/A (see individual properties)",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "N/A (see individual properties)",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "pause"
        ]
      },
      {
        "name": "rest-before",
        "value": "<time> | none | x-weak | weak | medium | strong | x-strong",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<time>",
            "prose": "Expresses the rest in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
            "type": "value",
            "value": "<time>"
          },
          {
            "name": "none",
            "prose": "Equivalent to 0ms. (No prosodic break is produced by the speech processor.)",
            "type": "value",
            "value": "none"
          },
          {
            "name": "x-weak",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-weak"
          },
          {
            "name": "weak",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "weak"
          },
          {
            "name": "medium",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "strong",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "strong"
          },
          {
            "name": "x-strong",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-strong"
          }
        ],
        "styleDeclaration": [
          "rest-before",
          "restBefore"
        ]
      },
      {
        "name": "rest-after",
        "value": "<time> | none | x-weak | weak | medium | strong | x-strong",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<time>",
            "prose": "Expresses the rest in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
            "type": "value",
            "value": "<time>"
          },
          {
            "name": "none",
            "prose": "Equivalent to 0ms. (No prosodic break is produced by the speech processor.)",
            "type": "value",
            "value": "none"
          },
          {
            "name": "x-weak",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-weak"
          },
          {
            "name": "weak",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "weak"
          },
          {
            "name": "medium",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "strong",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "strong"
          },
          {
            "name": "x-strong",
            "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
            "type": "value",
            "value": "x-strong"
          }
        ],
        "styleDeclaration": [
          "rest-after",
          "restAfter"
        ]
      },
      {
        "name": "rest",
        "value": "<'rest-before'> <'rest-after'>?",
        "initial": "N/A (see individual properties)",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "N/A (see individual properties)",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "rest"
        ]
      },
      {
        "name": "cue-before",
        "value": "<uri> <decibel>? | none",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<uri>",
            "prose": "The URI designates an auditory icon resource. When a user agent is not able to render the specified auditory icon (e.g. missing file resource, or unsupported audio codec), it is recommended to produce an alternative cue, such as a bell sound.",
            "type": "value",
            "value": "<uri>"
          }
        ],
        "styleDeclaration": [
          "cue-before",
          "cueBefore"
        ]
      },
      {
        "name": "cue-after",
        "value": "<uri> <decibel>? | none",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<uri>",
            "prose": "The URI designates an auditory icon resource. When a user agent is not able to render the specified auditory icon (e.g. missing file resource, or unsupported audio codec), it is recommended to produce an alternative cue, such as a bell sound.",
            "type": "value",
            "value": "<uri>"
          }
        ],
        "styleDeclaration": [
          "cue-after",
          "cueAfter"
        ]
      },
      {
        "name": "cue",
        "value": "<'cue-before'> <'cue-after'>?",
        "initial": "N/A (see individual properties)",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "N/A (see individual properties)",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "cue"
        ]
      },
      {
        "name": "voice-family",
        "value": "[[<family-name> | <generic-voice>],]* [<family-name> | <generic-voice>] | preserve",
        "initial": "implementation-dependent",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<family-name>",
            "prose": "Values are specific voice instances (e.g., Mike, comedian, mary, carlos2, \"valley girl\"). Like font-family names, voice names must either be given quoted as strings, or unquoted as a sequence of one or more identifiers. If a sequence of identifiers is given as a voice name, the computed value is the name converted to a string by joining all the identifiers in the sequence by single spaces. Voice names that happen to be the same as the gender keywords (male, female and neutral) or that happen to match the CSS-wide keywords or preserve must be quoted to disambiguate with these keywords. The keyword default is reserved for future use and must also be quoted when used as voice names. It is recommended to quote voice names that contain white space, digits, or punctuation characters other than hyphens—even if these voice names are valid in unquoted form—in order to improve code clarity. For example: voice-family: \"john doe\", \"Henry the-8th\";",
            "type": "value",
            "value": "<family-name>"
          },
          {
            "name": "<age>",
            "prose": "Possible values are child, young and old, indicating the preferred age category to match during voice selection.",
            "type": "type"
          },
          {
            "name": "child",
            "value": "child",
            "type": "value"
          },
          {
            "name": "young",
            "value": "young",
            "type": "value"
          },
          {
            "name": "old",
            "value": "old",
            "type": "value"
          },
          {
            "name": "<gender>",
            "prose": "One of the keywords male, female, or neutral, specifying a male, female, or neutral voice, respectively.",
            "type": "type"
          },
          {
            "name": "male",
            "type": "value",
            "value": "male"
          },
          {
            "name": "female",
            "type": "value",
            "value": "female"
          },
          {
            "name": "neutral",
            "type": "value",
            "value": "neutral"
          },
          {
            "name": "<integer>",
            "prose": "An integer indicating the preferred variant (e.g. \"the second male child voice\"). Only positive integers (i.e. excluding zero) are allowed. The value 1 refers to the first of all matching voices.",
            "type": "value",
            "value": "<integer>"
          },
          {
            "name": "preserve",
            "prose": "Indicates that the voice-family value gets inherited and used regardless of any potential language change within the content markup (see the section below about voice selection and language handling). This value behaves as inherit when applied to the root element. Note: Descendants of the element automatically inherit the preserve value, unless it is explicitly overridden by other voice-family values (e.g. name, gender, age).",
            "type": "value",
            "value": "preserve"
          }
        ],
        "styleDeclaration": [
          "voice-family",
          "voiceFamily"
        ]
      },
      {
        "name": "voice-rate",
        "value": "[normal | x-slow | slow | medium | fast | x-fast] || <percentage>",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "refer to default value",
        "computedValue": "a keyword value, and optionally also a percentage relative to the keyword (if not 100%)",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "normal",
            "prose": "Represents the default rate produced by the speech synthesizer for the currently active voice. This is processor-specific and depends on the language and dialect, and on the \"personality\" of the voice.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "x-slow",
            "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
            "type": "value",
            "value": "x-slow"
          },
          {
            "name": "slow",
            "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
            "type": "value",
            "value": "slow"
          },
          {
            "name": "medium",
            "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "fast",
            "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
            "type": "value",
            "value": "fast"
          },
          {
            "name": "x-fast",
            "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
            "type": "value",
            "value": "x-fast"
          },
          {
            "name": "<percentage>",
            "prose": "Only non-negative percentage values are allowed. This represents a change relative to the given keyword value (see enumeration above), or to the default value for the root element, or otherwise to the inherited speaking rate (which may itself be a combination of a keyword value and of a percentage, in which case percentages are combined multiplicatively). For example, 50% means that the speaking rate gets multiplied by 0.5 (half the value). Percentages above 100% result in faster speaking rates (relative to the base keyword), whereas percentages below 100% result in slower speaking rates.",
            "type": "value",
            "value": "<percentage>"
          }
        ],
        "styleDeclaration": [
          "voice-rate",
          "voiceRate"
        ]
      },
      {
        "name": "voice-pitch",
        "value": "<frequency> && absolute | [[x-low | low | medium | high | x-high] || [<frequency> | <semitones> | <percentage>]]",
        "initial": "medium",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "refer to inherited value",
        "computedValue": "one of the predefined pitch keywords if only the keyword is specified by itself, otherwise an absolute frequency calculated by converting the keyword value (if any) to a fixed frequency based on the current voice-family and by applying the specified relative offset (if any)",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "<frequency>",
            "prose": "A value in frequency units (Hertz or kiloHertz, e.g. 100Hz, +2kHz). Values are restricted to positive numbers when the absolute keyword is specified. Otherwise (when the absolute keyword is not specified), a negative value represents a decrement, and a positive value represents an increment, relative to the inherited value. For example, 2kHz is a positive offset (strictly equivalent to +2kHz), and +2kHz absolute is an absolute frequency (strictly equivalent to 2kHz absolute).",
            "type": "value",
            "value": "<frequency>"
          },
          {
            "name": "absolute",
            "prose": "If specified, this keyword indicates that the specified frequency represents an absolute value. If a negative frequency is specified, the computed frequency will be zero.",
            "type": "value",
            "value": "absolute"
          },
          {
            "name": "<semitones>",
            "prose": "Specifies a relative change (decrement or increment) to the inherited value. The syntax of <semitones> allowed values is a dimension with the unit identifier st (semitones). A semitone interval corresponds to the step between each note on an equal temperament chromatic scale. A semitone can therefore be quantified as the difference between two consecutive pitch frequencies on such scale. The ratio between two consecutive frequencies separated by exactly one semitone is the twelfth root of two (approximately 11011/10393, which equals exactly 1.0594631). As a result, the value in Hertz corresponding to a semitone offset is relative to the initial frequency the offset is applied to. (In other words, a semitone doesn’t correspond to a fixed numerical value in Hertz.)",
            "type": "value",
            "value": "<semitones>"
          },
          {
            "name": "<semitones>",
            "type": "type"
          },
          {
            "name": "<percentage>",
            "prose": "Positive and negative percentage values are allowed, to represent an increment or decrement (respectively) relative to the inherited value. Computed values are calculated by adding (or subtracting) the specified fraction of the inherited value, to (from) the inherited value. For example, 50% (which is equivalent to +50%) with a inherited value of 200Hz results in 200 + (200*0.5) = 300Hz. Conversely, -50% results in 200-(200*0.5) = 100Hz.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "x-low",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "x-low"
          },
          {
            "name": "low",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "low"
          },
          {
            "name": "medium",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "high",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "high"
          },
          {
            "name": "x-high",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "x-high"
          }
        ],
        "styleDeclaration": [
          "voice-pitch",
          "voicePitch"
        ]
      },
      {
        "name": "voice-range",
        "value": "<frequency> && absolute | [[x-low | low | medium | high | x-high] || [<frequency> | <semitones> | <percentage>]]",
        "initial": "medium",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "refer to inherited value",
        "computedValue": "one of the predefined pitch keywords if only the keyword is specified by itself, otherwise an absolute frequency calculated by converting the keyword value (if any) to a fixed frequency based on the current voice-family and by applying the specified relative offset (if any)",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "absolute",
            "prose": "If specified, this keyword indicates that the specified frequency represents an absolute value. If a negative frequency is specified, the computed frequency will be zero.",
            "type": "value",
            "value": "absolute"
          },
          {
            "name": "<semitones>",
            "prose": "Specifies a relative change (decrement or increment) to the inherited value as a semitone.",
            "type": "value",
            "value": "<semitones>"
          },
          {
            "name": "<percentage>",
            "prose": "Positive and negative percentage values represent an increment or decrement (respectively) relative to the inherited value. Computed values are calculated by adding (or subtracting) the specified fraction of the inherited value, to (from) the inherited value. For example, 50% (which is equivalent to +50%) with a inherited value of 200Hz results in 200 + (200*0.5) = 300Hz. Conversely, -50% results in 200-(200*0.5) = 100Hz.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "x-low",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "x-low"
          },
          {
            "name": "low",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "low"
          },
          {
            "name": "medium",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "high",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "high"
          },
          {
            "name": "x-high",
            "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
            "type": "value",
            "value": "x-high"
          }
        ],
        "styleDeclaration": [
          "voice-range",
          "voiceRange"
        ]
      },
      {
        "name": "voice-stress",
        "value": "normal | strong | moderate | none | reduced",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "normal",
            "prose": "Represents the default emphasis produced by the speech synthesizer.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "none",
            "prose": "Prevents the synthesizer from emphasizing text it would normally emphasize.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "moderate",
            "prose": "These values are monotonically non-decreasing in strength. Their application results in more emphasis than what the speech synthesizer would normally produce (i.e. more than the value corresponding to normal).",
            "type": "value",
            "value": "moderate"
          },
          {
            "name": "strong",
            "prose": "These values are monotonically non-decreasing in strength. Their application results in more emphasis than what the speech synthesizer would normally produce (i.e. more than the value corresponding to normal).",
            "type": "value",
            "value": "strong"
          },
          {
            "name": "reduced",
            "prose": "Effectively the opposite of emphasizing a word.",
            "type": "value",
            "value": "reduced"
          }
        ],
        "styleDeclaration": [
          "voice-stress",
          "voiceStress"
        ]
      },
      {
        "name": "voice-duration",
        "value": "auto | <time>",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "values": [
          {
            "name": "auto",
            "prose": "Resolves to a used value corresponding to the duration of the speech synthesis when using the inherited voice-rate.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<time>",
            "prose": "Specifies a value in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
            "type": "value",
            "value": "<time>"
          }
        ],
        "styleDeclaration": [
          "voice-duration",
          "voiceDuration"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<generic-voice>",
        "value": "[<age>? <gender> <integer>?]",
        "type": "type"
      }
    ]
  },
  "css-syntax": {
    "spec": {
      "title": "CSS Syntax Module Level 3",
      "url": "https://drafts.csswg.org/css-syntax-3/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@charset",
        "prose": "However, there is no actual at-rule named @charset. When a stylesheet is actually parsed, any occurrences of an @charset rule must be treated as an unrecognized rule, and thus dropped as invalid when the stylesheet is grammar-checked.",
        "descriptors": []
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<ident-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<function-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<at-keyword-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<hash-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<string-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<bad-string-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<url-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<bad-url-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<delim-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<number-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<percentage-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<dimension-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<whitespace-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<CDO-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<CDC-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<colon-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<semicolon-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<comma-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<[-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<]-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<(-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<)-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<{-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<}-token>",
        "prose": "The output of tokenization step is a stream of zero or more of the following tokens: <ident-token>, <function-token>, <at-keyword-token>, <hash-token>, <string-token>, <bad-string-token>, <url-token>, <bad-url-token>, <delim-token>, <number-token>, <percentage-token>, <dimension-token>, <whitespace-token>, <CDO-token>, <CDC-token>, <colon-token>, <semicolon-token>, <comma-token>, <[-token>, <]-token>, <(-token>, <)-token>, <{-token>, and <}-token>.",
        "type": "type"
      },
      {
        "name": "<EOF-token>",
        "prose": "A conceptual token representing the end of the list of tokens. Whenever the list of tokens is empty, the next input token is always an <EOF-token>.",
        "type": "type"
      },
      {
        "name": "<an+b>",
        "type": "type",
        "value": "odd | even | <integer> | <n-dimension> | '+'? n | -n | <ndashdigit-dimension> | '+'? <ndashdigit-ident> | <dashndashdigit-ident> | <n-dimension> <signed-integer> | '+'? n <signed-integer> | -n <signed-integer> | <ndash-dimension> <signless-integer> | '+'? n- <signless-integer> | -n- <signless-integer> | <n-dimension> ['+' | '-'] <signless-integer> | '+'? n ['+' | '-'] <signless-integer> | -n ['+' | '-'] <signless-integer>"
      },
      {
        "name": "<n-dimension>",
        "type": "type"
      },
      {
        "name": "<ndash-dimension>",
        "type": "type"
      },
      {
        "name": "<ndashdigit-dimension>",
        "type": "type"
      },
      {
        "name": "<ndashdigit-ident>",
        "type": "type"
      },
      {
        "name": "<dashndashdigit-ident>",
        "type": "type"
      },
      {
        "name": "<signed-integer>",
        "type": "type"
      },
      {
        "name": "<signless-integer>",
        "type": "type"
      },
      {
        "name": "<urange>",
        "prose": "Some constructs, such as the unicode-range descriptor for the @font-face rule, need a way to describe one or more unicode code points. The <urange> production represents a range of one or more unicode code points.",
        "type": "type",
        "value": "u '+' <ident-token> '?'* | u <dimension-token> '?'* | u <number-token> '?'* | u <number-token> <dimension-token> | u <number-token> <number-token> | u '+' '?'+"
      },
      {
        "name": "<style-block>",
        "prose": "The <style-block> production represents the contents of a style rule’s block. It may only be used in grammars as the sole value in a block, and represents that the contents of the block must be parsed using the consume a style block’s contents algorithm.",
        "type": "type"
      },
      {
        "name": "<declaration-list>",
        "prose": "The <declaration-list> production represents a list of declarations. It may only be used in grammars as the sole value in a block, and represents that the contents of the block must be parsed using the consume a list of declarations algorithm.",
        "type": "type"
      },
      {
        "name": "<rule-list>",
        "prose": "Similarly, the <rule-list> production represents a list of rules, and may only be used in grammars as the sole value in a block. It represents that the contents of the block must be parsed using the consume a list of rules algorithm.",
        "type": "type"
      },
      {
        "name": "<stylesheet>",
        "prose": "Finally, the <stylesheet> production represents a list of rules. It is identical to <rule-list>, except that blocks using it default to accepting all rules that aren’t otherwise limited to a particular context.",
        "type": "type"
      },
      {
        "name": "<declaration-value>",
        "prose": "The <declaration-value> production matches any sequence of one or more tokens, so long as the sequence does not contain <bad-string-token>, <bad-url-token>, unmatched <)-token>, <]-token>, or <}-token>, or top-level <semicolon-token> tokens or <delim-token> tokens with a value of \"!\". It represents the entirety of what a valid declaration can have as its value.",
        "type": "type"
      },
      {
        "name": "<any-value>",
        "prose": "The <any-value> production is identical to <declaration-value>, but also allows top-level <semicolon-token> tokens and <delim-token> tokens with a value of \"!\". It represents the entirety of what valid CSS can be in any context.",
        "type": "type"
      }
    ]
  },
  "css-tables": {
    "spec": {
      "title": "CSS Table Module Level 3",
      "url": "https://drafts.csswg.org/css-tables-3/"
    },
    "properties": [
      {
        "name": "table-layout",
        "value": "auto | fixed",
        "initial": "auto",
        "appliesTo": "table grid boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "table-layout",
          "tableLayout"
        ]
      },
      {
        "name": "border-collapse",
        "value": "separate | collapse",
        "initial": "separate",
        "appliesTo": "table grid boxes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "border-collapse",
          "borderCollapse"
        ]
      },
      {
        "name": "border-spacing",
        "value": "<length>{1,2}",
        "initial": "0px 0px",
        "appliesTo": "table grid boxes when border-collapse is separate",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "two absolute lengths",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "border-spacing",
          "borderSpacing"
        ]
      },
      {
        "name": "caption-side",
        "value": "top | bottom",
        "initial": "top",
        "appliesTo": "table-caption boxes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "caption-side",
          "captionSide"
        ]
      },
      {
        "name": "empty-cells",
        "value": "show | hide",
        "initial": "show",
        "appliesTo": "table-cell boxes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "empty-cells",
          "emptyCells"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-text-4": {
    "spec": {
      "title": "CSS Text Module Level 4",
      "url": "https://drafts.csswg.org/css-text-4/"
    },
    "properties": [
      {
        "name": "text-transform",
        "value": "none | [capitalize | uppercase | lowercase ] || full-width || full-size-kana",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No effects.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "capitalize",
            "prose": "Puts the first typographic letter unit of each word, if lowercase, in titlecase; other characters are unaffected.",
            "type": "value",
            "value": "capitalize"
          },
          {
            "name": "uppercase",
            "prose": "Puts all letters in uppercase.",
            "type": "value",
            "value": "uppercase"
          },
          {
            "name": "lowercase",
            "prose": "Puts all letters in lowercase.",
            "type": "value",
            "value": "lowercase"
          },
          {
            "name": "full-width",
            "prose": "Puts all typographic character units in full-width form. If a character does not have a corresponding full-width form, it is left as is. This value is typically used to typeset Latin letters and digits as if they were ideographic characters.",
            "type": "value",
            "value": "full-width"
          },
          {
            "name": "full-size-kana",
            "prose": "Converts all small Kana characters to the equivalent full-size Kana. This value is typically used for ruby annotation text, where authors may want all small Kana to be drawn as large Kana to compensate for legibility issues at the small font sizes typically used in ruby.",
            "type": "value",
            "value": "full-size-kana"
          }
        ],
        "styleDeclaration": [
          "text-transform",
          "textTransform"
        ]
      },
      {
        "name": "word-boundary-detection",
        "value": "normal | manual | auto(<lang>)",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified (However, see special provision for unsupported <lang>)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "manual",
            "prose": "Linguistic analysis is not used in any language or writing system to determine line wrapping opportunities not indicated by the markup or characters of the element. The user agent must not insert virtual word boundaries. Typographic character units with class SA in [UAX14] must be treated as if they had class AL (i.e. assuming word-break: normal and a value of line-break other than anywhere, there is no soft wrap opportunity between pairs of such characters). Authors using this value for Southeast Asian languages are expected to manually indicate word boundaries, for instance using wbr or U+200B. Otherwise, there will be no soft wrap opportunity and the text may overflow.",
            "type": "value",
            "value": "manual"
          },
          {
            "name": "normal",
            "prose": "The user agent must not insert virtual word boundaries, except within runs of characters belonging to Southeast Asian languages, where content analysis must be performed to determine where to insert virtual word boundaries. As with manual, typographic character units with class SA in [UAX14] must be treated as if they had class AL; however, the user agent must additionally analyse the content of a run of such characters and insert virtual word boundaries where appropriate. Within the constraints set by this specification, the specific algorithm used is UA-dependent. As various languages can be written in scripts which use the characters with class SA, if the content language is known, the user agent should use this information to tailor its analysis. In order to avoid unexpected overflow, if the user agent is unable to perform this analysis for any subset of the characters with class SA—for example due to lacking a dictionary for certain languages—there must be a soft wrap opportunity between pairs of typographic letter units in that subset.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "auto()",
            "value": "auto()",
            "type": "value"
          },
          {
            "name": "<lang>",
            "prose": "<lang> must be a valid CSS <ident> or <string>. It represents an IETF BCP 47 language range (see [BCP47]). If the UA does not support word-boundary detection for all languages represented by the specified range, that specified value is invalid (and will cause the declaration to be ignored).",
            "type": "type"
          }
        ],
        "styleDeclaration": [
          "word-boundary-detection",
          "wordBoundaryDetection"
        ]
      },
      {
        "name": "word-boundary-expansion",
        "value": "none | space | ideographic-space",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "This property has no effect.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "space",
            "prose": "Instances of U+200B ZERO WIDTH SPACE within the text run children of this element are replaced by U+0020 SPACE.",
            "type": "value",
            "value": "space"
          },
          {
            "name": "ideographic-space",
            "prose": "Instances of U+200B ZERO WIDTH SPACE within the text run children of this element are replaced by U+3000 IDEOGRAPHIC SPACE.",
            "type": "value",
            "value": "ideographic-space"
          }
        ],
        "styleDeclaration": [
          "word-boundary-expansion",
          "wordBoundaryExpansion"
        ]
      },
      {
        "name": "white-space",
        "value": "normal | pre | nowrap | pre-wrap | break-spaces | pre-line",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "This value directs user agents to collapse sequences of white space into a single character (or in some cases, no character). Lines may wrap at allowed soft wrap opportunities, as determined by the line-breaking rules in effect, in order to minimize inline-axis overflow.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "pre",
            "prose": "This value prevents user agents from collapsing sequences of white space. Segment breaks such as line feeds are preserved as forced line breaks. Lines only break at forced line breaks; content that does not fit within the block container overflows it.",
            "type": "value",
            "value": "pre"
          },
          {
            "name": "nowrap",
            "prose": "Like normal, this value collapses white space; but like pre, it does not allow wrapping.",
            "type": "value",
            "value": "nowrap"
          },
          {
            "name": "pre-wrap",
            "prose": "Like pre, this value preserves white space; but like normal, it allows wrapping.",
            "type": "value",
            "value": "pre-wrap"
          },
          {
            "name": "break-spaces",
            "prose": "The behavior is identical to that of pre-wrap, except that: Any sequence of preserved white space or other space separators always takes up space, including at the end of the line. Tests white-space-intrinsic-size-001.html (live test) (source) white-space-intrinsic-size-002.html (live test) (source) A line breaking opportunity exists after every preserved white space character and after every other space separator (including between adjacent spaces). Tests overflow-wrap-break-word-002.html (live test) (source) overflow-wrap-anywhere-002.html (live test) (source) break-spaces-001.html (live test) (source) break-spaces-002.html (live test) (source) break-spaces-003.html (live test) (source) break-spaces-004.html (live test) (source) break-spaces-005.html (live test) (source) break-spaces-006.html (live test) (source) break-spaces-007.html (live test) (source) break-spaces-008.html (live test) (source) break-spaces-009.html (live test) (source) break-spaces-010.html (live test) (source) break-spaces-051.html (live test) (source) break-spaces-052.html (live test) (source) white-space-pre-034.html (live test) (source) textarea-break-spaces-001.html (live test) (source) textarea-break-spaces-002.html (live test) (source) break-spaces-before-first-char-001.html (live test) (source) break-spaces-before-first-char-002.html (live test) (source) break-spaces-before-first-char-003.html (live test) (source) break-spaces-before-first-char-004.html (live test) (source) break-spaces-before-first-char-005.html (live test) (source) break-spaces-before-first-char-006.html (live test) (source) break-spaces-before-first-char-007.html (live test) (source) break-spaces-before-first-char-008.html (live test) (source) break-spaces-before-first-char-009.html (live test) (source) break-spaces-before-first-char-010.html (live test) (source) break-spaces-before-first-char-011.html (live test) (source) break-spaces-before-first-char-012.html (live test) (source) break-spaces-before-first-char-013.html (live test) (source) break-spaces-before-first-char-014.html (live test) (source) break-spaces-before-first-char-015.html (live test) (source) break-spaces-before-first-char-016.html (live test) (source) break-spaces-before-first-char-017.html (live test) (source) break-spaces-before-first-char-018.html (live test) (source) break-spaces-before-first-ideographic-char-001.html (live test) (source) break-spaces-before-first-ideographic-char-002.html (live test) (source) break-spaces-before-first-ideographic-char-003.html (live test) (source) break-spaces-before-first-ideographic-char-004.html (live test) (source) break-spaces-before-first-ideographic-char-005.html (live test) (source) break-spaces-before-first-ideographic-char-006.html (live test) (source) break-spaces-before-first-ideographic-char-007.html (live test) (source) break-spaces-before-first-ideographic-char-008.html (live test) (source) break-spaces-before-first-ideographic-char-009.html (live test) (source) break-spaces-before-first-ideographic-char-010.html (live test) (source) break-spaces-before-first-ideographic-char-011.html (live test) (source) break-spaces-before-first-ideographic-char-012.html (live test) (source) break-spaces-before-first-ideographic-char-013.html (live test) (source) break-spaces-before-first-ideographic-char-014.html (live test) (source) break-spaces-before-first-ideographic-char-015.html (live test) (source) break-spaces-before-first-ideographic-char-016.html (live test) (source) break-spaces-before-first-ideographic-char-017.html (live test) (source) break-spaces-before-first-ideographic-char-018.html (live test) (source) tab-stop-threshold-005.html (live test) (source) tab-stop-threshold-006.html (live test) (source) word-break-break-all-017.html (live test) (source) break-spaces-tab-001.html (live test) (source) break-spaces-tab-002.html (live test) (source) break-spaces-tab-003.html (live test) (source) break-spaces-tab-004.html (live test) (source) break-spaces-tab-005.html (live test) (source) break-spaces-tab-006.html (live test) (source) break-spaces-with-overflow-wrap-001.html (live test) (source) break-spaces-with-overflow-wrap-002.html (live test) (source) break-spaces-with-overflow-wrap-003.html (live test) (source) break-spaces-with-overflow-wrap-004.html (live test) (source) break-spaces-with-overflow-wrap-005.html (live test) (source) break-spaces-with-overflow-wrap-006.html (live test) (source) break-spaces-with-overflow-wrap-007.html (live test) (source) break-spaces-with-overflow-wrap-008.html (live test) (source) break-spaces-with-overflow-wrap-009.html (live test) (source) break-spaces-with-overflow-wrap-010.html (live test) (source) break-spaces-with-ideographic-space-001.html (live test) (source) break-spaces-with-ideographic-space-002.html (live test) (source) break-spaces-with-ideographic-space-003.html (live test) (source) break-spaces-with-ideographic-space-004.html (live test) (source) break-spaces-with-ideographic-space-005.html (live test) (source) break-spaces-with-ideographic-space-006.html (live test) (source) break-spaces-with-ideographic-space-007.html (live test) (source) break-spaces-with-ideographic-space-008.html (live test) (source) break-spaces-with-ideographic-space-009.html (live test) (source) break-spaces-with-ideographic-space-010.html (live test) (source) line-break-anywhere-and-white-space-008.html (live test) (source) line-break-anywhere-and-white-space-009.html (live test) (source) ws-break-spaces-applies-to-001.html (live test) (source) ws-break-spaces-applies-to-002.html (live test) (source) ws-break-spaces-applies-to-003.html (live test) (source) ws-break-spaces-applies-to-005.html (live test) (source) ws-break-spaces-applies-to-006.html (live test) (source) ws-break-spaces-applies-to-007.html (live test) (source) ws-break-spaces-applies-to-008.html (live test) (source) ws-break-spaces-applies-to-009.html (live test) (source) ws-break-spaces-applies-to-010.html (live test) (source) ws-break-spaces-applies-to-011.html (live test) (source) ws-break-spaces-applies-to-012.html (live test) (source) ws-break-spaces-applies-to-013.html (live test) (source) ws-break-spaces-applies-to-014.html (live test) (source) ws-break-spaces-applies-to-015.html (live test) (source) break-spaces-newline-011.html (live test) (source) break-spaces-newline-012.html (live test) (source) break-spaces-newline-013.html (live test) (source) break-spaces-newline-014.html (live test) (source) break-spaces-newline-015.html (live test) (source) break-spaces-newline-016.html (live test) (source) trailing-ideographic-space-break-spaces-001.html (live test) (source) trailing-ideographic-space-break-spaces-002.html (live test) (source) trailing-ideographic-space-break-spaces-003.html (live test) (source) trailing-ideographic-space-break-spaces-004.html (live test) (source) trailing-ideographic-space-break-spaces-005.html (live test) (source) trailing-ideographic-space-break-spaces-006.html (live test) (source) trailing-ideographic-space-break-spaces-007.html (live test) (source) trailing-ideographic-space-break-spaces-008.html (live test) (source)",
            "type": "value",
            "value": "break-spaces"
          },
          {
            "name": "pre-line",
            "prose": "Like normal, this value collapses consecutive white space characters and allows wrapping, but it preserves segment breaks in the source as forced line breaks.",
            "type": "value",
            "value": "pre-line"
          }
        ],
        "styleDeclaration": [
          "white-space",
          "whiteSpace"
        ]
      },
      {
        "name": "text-space-collapse",
        "value": "collapse | discard | preserve | preserve-breaks | preserve-spaces",
        "initial": "collapse",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "collapse",
            "prose": "This value directs user agents to collapse sequences of white space into a single character (or in some cases, no character).",
            "type": "value",
            "value": "collapse"
          },
          {
            "name": "preserve",
            "prose": "This value prevents user agents from collapsing sequences of white space. Segment breaks are preserved as forced line breaks.",
            "type": "value",
            "value": "preserve"
          },
          {
            "name": "preserve-breaks",
            "prose": "This value collapses white space as for collapse, but preserves segment breaks as forced line breaks.",
            "type": "value",
            "value": "preserve-breaks"
          },
          {
            "name": "preserve-spaces",
            "prose": "This value prevents user agents from collapsing sequences of white space, and converts tabs and segment breaks to spaces. (This value is intended to match the behavior of xml:space=\"preserve\" in SVG.)",
            "type": "value",
            "value": "preserve-spaces"
          },
          {
            "name": "discard",
            "prose": "This value directs user agents to “discard” all white space in the element. Does this preserve line break opportunities or no? Do we need a \"hide\" value?",
            "type": "value",
            "value": "discard"
          }
        ],
        "styleDeclaration": [
          "text-space-collapse",
          "textSpaceCollapse"
        ]
      },
      {
        "name": "text-space-trim",
        "value": "none | discard-inner || discard-before || discard-after",
        "initial": "none",
        "appliesTo": "inline boxes and block containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "discard-inner",
            "prose": "For block containers this value directs UAs to discard all whitespace at the beginning of the element up to and including the last segment break before the first non-white-space character in the element as well as to discard all white space at the end of the element starting with the first segment break after the last non-white-space character in the element. For other elements this value directs UAs to discard all whitespace at the beginning and end of the element.",
            "type": "value",
            "value": "discard-inner"
          },
          {
            "name": "discard-before",
            "prose": "This value directs the UA to collapse all collapsible whitespace immediately before the start of the element.",
            "type": "value",
            "value": "discard-before"
          },
          {
            "name": "discard-after",
            "prose": "This value directs the UA to collapse all collapsible whitespace immediately after the end of the element.",
            "type": "value",
            "value": "discard-after"
          }
        ],
        "styleDeclaration": [
          "text-space-trim",
          "textSpaceTrim"
        ]
      },
      {
        "name": "tab-size",
        "value": "<number> | <length>",
        "initial": "8",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the specified number or absolute length",
        "canonicalOrder": "n/a",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "tab-size",
          "tabSize"
        ]
      },
      {
        "name": "word-break",
        "value": "normal | keep-all | break-all | break-word",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Words break according to their customary rules, as described above. Korean, which commonly exhibits two different behaviors, allows breaks between any two consecutive Hangul/Hanja. For Ethiopic, which also exhibits two different behaviors, such breaks within words are not allowed.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "break-all",
            "prose": "Breaking is allowed within “words”: specifically, in addition to soft wrap opportunities allowed for normal, any typographic letter units (and any typographic character units resolving to the NU (“numeric”), AL (“alphabetic”), or SA (“Southeast Asian”) line breaking classes [UAX14]) are instead treated as ID (“ideographic characters”) for the purpose of line-breaking. Hyphenation is not applied.",
            "type": "value",
            "value": "break-all"
          },
          {
            "name": "keep-all",
            "prose": "Breaking is forbidden within “words”: implicit soft wrap opportunities between typographic letter units (or other typographic character units belonging to the NU, AL, AI, or ID Unicode line breaking classes [UAX14]) are suppressed, i.e. breaks are prohibited between pairs of such characters (regardless of line-break settings other than anywhere) except where opportunities exist due to dictionary-based breaking. Otherwise this option is equivalent to normal. In this style, sequences of CJK characters do not break.",
            "type": "value",
            "value": "keep-all"
          },
          {
            "name": "break-word",
            "prose": "For compatibility with legacy content, the word-break property also supports a deprecated break-word keyword. When specified, this has the same effect as word-break: normal and overflow-wrap: anywhere, regardless of the actual value of the overflow-wrap property.",
            "type": "value",
            "value": "break-word"
          }
        ],
        "styleDeclaration": [
          "word-break",
          "wordBreak"
        ]
      },
      {
        "name": "line-break",
        "value": "auto | loose | normal | strict | anywhere",
        "initial": "auto",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The UA determines the set of line-breaking restrictions to use, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "loose",
            "prose": "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers.",
            "type": "value",
            "value": "loose"
          },
          {
            "name": "normal",
            "prose": "Breaks text using the most common set of line-breaking rules.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "strict",
            "prose": "Breaks text using the most stringent set of line-breaking rules.",
            "type": "value",
            "value": "strict"
          },
          {
            "name": "anywhere",
            "prose": "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property. [UAX14] The different wrapping opportunities must not be prioritized. Hyphenation is not applied.",
            "type": "value",
            "value": "anywhere"
          }
        ],
        "styleDeclaration": [
          "line-break",
          "lineBreak"
        ]
      },
      {
        "name": "hyphens",
        "value": "none | manual | auto",
        "initial": "manual",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Words are not hyphenated, even if characters inside the word explicitly define hyphenation opportunities.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "manual",
            "prose": "Words are only hyphenated where there are characters inside the word that explicitly suggest hyphenation opportunities. The UA must use the appropriate language-specific hyphenation character(s) and should apply any appropriate spelling changes just as for automatic hyphenation at the same point. In Unicode, U+00AD is a conditional \"soft hyphen\" and U+2010 is an unconditional hyphen. Unicode Standard Annex #14 describes the role of soft hyphens in Unicode line breaking. [UAX14] In HTML, &shy; represents the soft hyphen character, which suggests a hyphenation opportunity. ex&shy;ample",
            "type": "value",
            "value": "manual"
          },
          {
            "name": "auto",
            "prose": "Words may be broken at hyphenation opportunities determined automatically by a language-appropriate hyphenation resource in addition to those indicated explicitly by a conditional hyphen. Automatic hyphenation opportunities elsewhere within a word must be ignored if the word contains a conditional hyphen (&shy; or U+00AD SOFT HYPHEN), in favor of the conditional hyphen(s). However, if, even after breaking at such opportunities, a portion of that word is still too long to fit on one line, an automatic hyphenation opportunity may be used.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "hyphens"
        ]
      },
      {
        "name": "hyphenate-character",
        "value": "auto | <string>",
        "initial": "auto",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Specifies that the user agent should find an appropriate string based on the content language’s typographic conventions, possibly from the same source as the hyphenation dictionary.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<string>",
            "prose": "Specifies the string that appears at the hyphenation break when hyphenating. (The position of this string is not affected: the UA must insert the string according to the typographic conventions of the content language, defaulting to immediately before the hyphenation break.) The UA may truncate the used value to a limited number of typographic character units; it must not truncate only part of a typographic character unit.",
            "type": "value",
            "value": "<string>"
          }
        ],
        "styleDeclaration": [
          "hyphenate-character",
          "hyphenateCharacter"
        ]
      },
      {
        "name": "hyphenate-limit-zone",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "refers to length of the line box",
        "computedValue": "computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "hyphenate-limit-zone",
          "hyphenateLimitZone"
        ]
      },
      {
        "name": "hyphenate-limit-chars",
        "value": "[ auto | <integer> ]{1,3}",
        "initial": "auto",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "three values, each either the auto keyword or an integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "If three values are specified, the first value is the required minimum for the total characters in a word, the second value is the minimum for characters before the hyphenation point, and the third value is the minimum for characters after the hyphenation point. If the third value is missing, it is the same as the second. If the second value is missing, then it is auto. The auto value means that the UA chooses a value that adapts to the current layout.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "hyphenate-limit-chars",
          "hyphenateLimitChars"
        ]
      },
      {
        "name": "hyphenate-limit-lines",
        "value": "no-limit | <integer>",
        "initial": "no-limit",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword or integer",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "No restrictions imposed.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "always",
            "prose": "The last full line of the element, or the last line before any column, page, or spread break inside the element should not be hyphenated.",
            "type": "value",
            "value": "always"
          },
          {
            "name": "column",
            "prose": "The last line before any column, page, or spread break inside the element should not be hyphenated.",
            "type": "value",
            "value": "column"
          },
          {
            "name": "page",
            "prose": "The last line before page or spread break inside the element should not be hyphenated.",
            "type": "value",
            "value": "page"
          },
          {
            "name": "spread",
            "prose": "The last line before any spread break inside the element should not be hyphenated.",
            "type": "value",
            "value": "spread"
          }
        ],
        "styleDeclaration": [
          "hyphenate-limit-lines",
          "hyphenateLimitLines"
        ]
      },
      {
        "name": "hyphenate-limit-last",
        "value": "none | always | column | page | spread",
        "initial": "none",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "hyphenate-limit-last",
          "hyphenateLimitLast"
        ]
      },
      {
        "name": "overflow-wrap",
        "value": "normal | break-word | anywhere",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Lines may break only at allowed break points. However, the restrictions introduced by word-break: keep-all may be relaxed to match word-break: normal if there are no otherwise-acceptable break points in the line.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "anywhere",
            "prose": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line. Shaping characters are still shaped as if the word were not broken, and grapheme clusters must stay together as one unit. No hyphenation character is inserted at the break point. Soft wrap opportunities introduced by anywhere are considered when calculating min-content intrinsic sizes.",
            "type": "value",
            "value": "anywhere"
          },
          {
            "name": "break-word",
            "prose": "As for anywhere except that soft wrap opportunities introduced by break-word are not considered when calculating min-content intrinsic sizes.",
            "type": "value",
            "value": "break-word"
          }
        ],
        "styleDeclaration": [
          "overflow-wrap",
          "overflowWrap"
        ]
      },
      {
        "name": "word-wrap",
        "value": "normal | break-word | anywhere",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "styleDeclaration": [
          "word-wrap",
          "wordWrap"
        ]
      },
      {
        "name": "text-wrap",
        "value": "wrap | nowrap | balance | stable | pretty",
        "initial": "wrap",
        "appliesTo": "text and block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "wrap",
            "prose": "Inline-level content may break across lines at allowed soft wrap opportunities, as determined by the line-breaking rules in effect in order to minimize inline-axis overflow. The exact algorithm is UA-defined. The algorithm may consider multiple lines when making break decisions. The UA may bias for speed over best layout. The UA must not attempt to even out all lines (including the last) as for balance. This value selects the UA’s preferred (or most Web-compatible) wrapping algorithm.",
            "type": "value",
            "value": "wrap"
          },
          {
            "name": "nowrap",
            "prose": "Inline-level content does not break across lines; content that does not fit within the block container overflows it.",
            "type": "value",
            "value": "nowrap"
          },
          {
            "name": "balance",
            "prose": "Same as wrap for inline boxes. For block containers that establish an inline formatting context, line breaks are chosen to balance the remaining (empty) space in each line box, if better balance than wrap is possible. This must not change the number of line boxes the block would contain if text-wrap were set to wrap. The remaining space to consider is that which remains after placing floats and inline content, but before any adjustments due to text justification. Line boxes are balanced when the standard deviation from the average inline-size of the remaining space in each line box is reduced over the block (including lines that end in a forced break). The exact algorithm is UA-defined. UAs may treat this value as wrap if there are more than ten lines to balance.",
            "type": "value",
            "value": "balance"
          },
          {
            "name": "stable",
            "prose": "When applied to a block container that establishes an inline formatting context, specifies that content on subsequent lines should not be considered when making break decisions so that when editing text any content before the cursor remains stable; otherwise equivalent to wrap,",
            "type": "value",
            "value": "stable"
          },
          {
            "name": "pretty",
            "prose": "When applied to a block container that establishes an inline formatting context, specifies the UA should bias for better layout over speed, and is expected to consider multiple lines, when making break decisions. Otherwise equivalent to wrap,",
            "type": "value",
            "value": "pretty"
          }
        ],
        "styleDeclaration": [
          "text-wrap",
          "textWrap"
        ]
      },
      {
        "name": "wrap-before",
        "value": "auto | avoid | avoid-line | avoid-flex | line | flex",
        "initial": "auto",
        "appliesTo": "inline-level boxes and flex items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Lines may break at allowed break points before and after the box, as determined by the line-breaking rules in effect.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "avoid",
            "prose": "Line breaking is suppressed immediately before/after the box: the UA may only break there if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "avoid-line",
            "prose": "Same as avoid, but only for line breaks.",
            "type": "value",
            "value": "avoid-line"
          },
          {
            "name": "avoid-flex",
            "prose": "Same as avoid, but only for flex line breaks.",
            "type": "value",
            "value": "avoid-flex"
          },
          {
            "name": "line",
            "prose": "Force a line break immediately before/after the box if the box is an inline-level box.",
            "type": "value",
            "value": "line"
          },
          {
            "name": "flex",
            "prose": "Force a flex line break immediately before/after the box if the box is a flex item in a multi-line flex container.",
            "type": "value",
            "value": "flex"
          }
        ],
        "styleDeclaration": [
          "wrap-before",
          "wrapBefore"
        ]
      },
      {
        "name": "wrap-after",
        "value": "auto | avoid | avoid-line | avoid-flex | line | flex",
        "initial": "auto",
        "appliesTo": "inline-level boxes and flex items",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Lines may break at allowed break points before and after the box, as determined by the line-breaking rules in effect.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "avoid",
            "prose": "Line breaking is suppressed immediately before/after the box: the UA may only break there if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "avoid-line",
            "prose": "Same as avoid, but only for line breaks.",
            "type": "value",
            "value": "avoid-line"
          },
          {
            "name": "avoid-flex",
            "prose": "Same as avoid, but only for flex line breaks.",
            "type": "value",
            "value": "avoid-flex"
          },
          {
            "name": "line",
            "prose": "Force a line break immediately before/after the box if the box is an inline-level box.",
            "type": "value",
            "value": "line"
          },
          {
            "name": "flex",
            "prose": "Force a flex line break immediately before/after the box if the box is a flex item in a multi-line flex container.",
            "type": "value",
            "value": "flex"
          }
        ],
        "styleDeclaration": [
          "wrap-after",
          "wrapAfter"
        ]
      },
      {
        "name": "wrap-inside",
        "value": "auto | avoid",
        "initial": "auto",
        "appliesTo": "inline boxes",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Lines may break at allowed break points within the box, as determined by the line-breaking rules in effect.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "avoid",
            "prose": "Line breaking is suppressed within the box: the UA may only break within the box if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto. If boxes with avoid are nested and the UA must break within these boxes, a break in an outer box must be used before a break within an inner box may be used.",
            "type": "value",
            "value": "avoid"
          }
        ],
        "styleDeclaration": [
          "wrap-inside",
          "wrapInside"
        ]
      },
      {
        "name": "text-align",
        "value": "start | end | left | right | center | <string> | justify | match-parent | justify-all",
        "initial": "start",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "canonicalOrder": "n/a",
        "values": [
          {
            "name": "start",
            "prose": "Inline-level content is aligned to the start edge of the line box.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Inline-level content is aligned to the end edge of the line box.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "left",
            "prose": "Inline-level content is aligned to the line-left edge of the line box. (In vertical writing modes, this can be either the physical top or bottom, depending on writing-mode.) [CSS-WRITING-MODES-4]",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Inline-level content is aligned to the line-right edge of the line box. (In vertical writing modes, this can be either the physical top or bottom, depending on writing-mode.) [CSS-WRITING-MODES-4]",
            "type": "value",
            "value": "right"
          },
          {
            "name": "center",
            "prose": "Inline-level content is centered within the line box.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "<string>",
            "prose": "The string must be a single character; otherwise the declaration is invalid and must be ignored. When applied to a table cell, specifies the alignment character around which the cell’s contents will align. See below for further details and how this value combines with keywords.",
            "type": "value",
            "value": "<string>"
          },
          {
            "name": "alignment character",
            "type": "value",
            "value": "alignment character"
          },
          {
            "name": "justify",
            "prose": "Text is justified according to the method specified by the text-justify property, in order to exactly fill the line box. Unless otherwise specified by text-align-last, the last line before a forced break or the end of the block is start-aligned.",
            "type": "value",
            "value": "justify"
          },
          {
            "name": "justify-all",
            "prose": "Sets both text-align-all and text-align-last to justify, forcing the last line to justify as well.",
            "type": "value",
            "value": "justify-all"
          },
          {
            "name": "match-parent",
            "prose": "This value behaves the same as inherit (computes to its parent’s computed value) except that an inherited value of start or end is interpreted against the parent’s direction value and results in a computed value of either left or right. Computes to start when specified on the root element. When specified on the text-align shorthand, sets both text-align-all and text-align-last to match-parent.",
            "type": "value",
            "value": "match-parent"
          }
        ],
        "styleDeclaration": [
          "text-align",
          "textAlign"
        ]
      },
      {
        "name": "text-align-all",
        "value": "start | end | left | right | center | justify | match-parent",
        "initial": "start",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "keyword as specified, except for match-parent which computes as defined above",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "styleDeclaration": [
          "text-align-all",
          "textAlignAll"
        ]
      },
      {
        "name": "text-align-last",
        "value": "auto | start | end | left | right | center | justify | match-parent",
        "initial": "auto",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "If auto is specified, content on the affected line is aligned per text-align-all unless text-align-all is set to justify, in which case it is start-aligned. All other values are interpreted as described for text-align.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "text-align-last",
          "textAlignLast"
        ]
      },
      {
        "name": "text-justify",
        "value": "auto | none | inter-word | inter-character",
        "initial": "auto",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword (except for the distribute legacy value)",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality. Since justification rules vary by writing system and language, UAs should, where possible, use a justification algorithm appropriate to the text. For example, the UA could use by default a justification method that is a simple universal compromise for all writing systems—such as primarily expanding word separators and between CJK typographic letter units along with secondarily expanding between Southeast Asian typographic letter units. Then, in cases where the content language of the paragraph is known, it could choose a more language-tailored justification behavior e.g. following the Requirements for Japanese Text Layout for Japanese [JLREQ], using cursive elongation for Arabic, using inter-word for German, etc. An example of cursively-justified Arabic text, rendered by Tasmeem. Like English, Arabic can be justified by adjusting the spacing between words, but in most styles it can also be justified by calligraphically elongating or compressing the letterforms themselves. In this example, the upper text is extended to fill the line by the use of elongated (kashida) forms and swash forms, while the bottom line is compressed slightly by using a stacked combination for the characters between ت and م. By employing traditional calligraphic techniques, a typesetter can justify the line while preserving flow and color, providing a very high quality justification effect. However, this is by its nature a very script-specific effect. Mixed-script text with text-justify: auto: this interpretation uses a universal-compromise justification method, expanding at spaces as well as between CJK and Southeast Asian letters. This effectively uses inter-word + inter-ideograph spacing for lines that have word-separators and/or CJK characters and falls back to inter-cluster behavior for lines that don’t or for which the space stretches too far.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Justification is disabled: there are no justification opportunities within the text. Mixed-script text with text-justify: none",
            "type": "value",
            "value": "none"
          },
          {
            "name": "inter-word",
            "prose": "Justification adjusts spacing at word separators only (effectively varying the used word-spacing on the line). This behavior is typical for languages that separate words using spaces, like English or Korean. Mixed-script text with text-justify: inter-word",
            "type": "value",
            "value": "inter-word"
          },
          {
            "name": "inter-character",
            "prose": "Justification adjusts spacing between each pair of adjacent typographic character units (effectively varying the used letter-spacing on the line). This value is sometimes used in East Asian systems such as Japanese. Mixed-script text with text-justify: inter-character For legacy reasons, UAs must also support the alternate keyword distribute which must compute to inter-character, thus having the exact same meaning and behavior. UAs may treat this as a legacy value alias.",
            "type": "value",
            "value": "inter-character"
          },
          {
            "name": "distribute",
            "prose": "For legacy reasons, UAs must also support the alternate keyword distribute which must compute to inter-character, thus having the exact same meaning and behavior. UAs may treat this as a legacy value alias.",
            "type": "value",
            "value": "distribute"
          },
          {
            "name": "ruby",
            "prose": "Justification adjusts spacing as for auto except: Justification opportunities are disabled at word separators. Justification opportunities are disabled between Bopomofo characters",
            "type": "value",
            "value": "ruby"
          }
        ],
        "styleDeclaration": [
          "text-justify",
          "textJustify"
        ]
      },
      {
        "name": "text-group-align",
        "value": "none | start | end | left | right | center",
        "initial": "none",
        "appliesTo": "block containers",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Text alignment happens normally: group alignment is not performed.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "start",
            "prose": "Inline-level content is group-aligned to the inline start side, by padding the inline end side of each line box.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Inline-level content is group-aligned to the inline end side, by padding the inline start side of each line box.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "left",
            "prose": "Inline-level content is group-aligned to the line-left side, by padding the line-right side of each line box.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Inline-level content is group-aligned to the line-right side, by padding the line-left side of each line box.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "center",
            "prose": "Inline-level content is group-aligned to the center, by padding both sides of each line box, half the spacing to each side.",
            "type": "value",
            "value": "center"
          }
        ],
        "styleDeclaration": [
          "text-group-align",
          "textGroupAlign"
        ]
      },
      {
        "name": "word-spacing",
        "value": "normal | <length-percentage>",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "relative to computed font-size, i.e. 1em",
        "computedValue": "an absolute length and/or a percentage",
        "canonicalOrder": "n/a",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "No additional spacing is applied. Computes to zero.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<length-percentage>",
            "prose": "Specifies extra spacing in addition to the intrinsic inter-word spacing defined by the font.",
            "type": "value",
            "value": "<length-percentage>"
          }
        ],
        "styleDeclaration": [
          "word-spacing",
          "wordSpacing"
        ]
      },
      {
        "name": "letter-spacing",
        "value": "normal | <length-percentage>",
        "initial": "normal",
        "appliesTo": "inline boxes and text",
        "inherited": "yes",
        "percentages": "relative to computed font-size, i.e. 1em",
        "computedValue": "an absolute length and/or a percentage",
        "canonicalOrder": "n/a",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "No additional spacing is applied. Computes to zero.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<length>",
            "prose": "Specifies additional spacing between typographic character units. Values may be negative, but there may be implementation-dependent limits.",
            "type": "value",
            "value": "<length>"
          }
        ],
        "styleDeclaration": [
          "letter-spacing",
          "letterSpacing"
        ]
      },
      {
        "name": "line-padding",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "inline boxes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "line-padding",
          "linePadding"
        ]
      },
      {
        "name": "text-spacing",
        "value": "normal | none | auto | no-compress || [ trim-start | space-start | space-first ] || [ trim-end | space-end | allow-end ] || [ trim-adjacent | space-adjacent ] || ideograph-alpha || ideograph-numeric || punctuation",
        "initial": "normal",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Specifies the baseline behavior, equivalent to space-start trim-end trim-adjacent ideograph-alpha ideograph-numeric.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "none",
            "prose": "Turns off all text-spacing features. All fullwidth characters are set with full-width glyphs.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "The user agent chooses a set of typographically high quality spacing values. Different user agents running on different platforms may pick different values.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "no-compress",
            "prose": "Justification must not compress text-spacing. (If this value is not specified, the justification process may reduce autospacing except when the spacing is at the start or end of the line.)",
            "type": "value",
            "value": "no-compress"
          },
          {
            "name": "space-start",
            "prose": "Set fullwidth opening punctuation with full-width glyphs (spaced) at the start of each line.",
            "type": "value",
            "value": "space-start"
          },
          {
            "name": "trim-start",
            "prose": "Set fullwidth opening punctuation with half-width glyphs (flush) at the start of each line.",
            "type": "value",
            "value": "trim-start"
          },
          {
            "name": "space-first",
            "prose": "Behaves as space-start on the first line the block container and each line after a forced line break but as trim-start on all other lines.",
            "type": "value",
            "value": "space-first"
          },
          {
            "name": "allow-end",
            "prose": "Set fullwidth closing punctuation with half-width glyphs (flush) at the end of each line if it does not otherwise fit prior to justification; otherwise set the punctuation with full-width glyphs.",
            "type": "value",
            "value": "allow-end"
          },
          {
            "name": "space-end",
            "prose": "Set fullwidth closing punctuation with full-width glyphs (spaced) at the end of each line.",
            "type": "value",
            "value": "space-end"
          },
          {
            "name": "trim-end",
            "prose": "Set fullwidth closing punctuation with half-width glyphs (flush) at the end of each line.",
            "type": "value",
            "value": "trim-end"
          },
          {
            "name": "space-adjacent",
            "prose": "Set fullwidth opening punctuation with full-width glyphs (spaced) when not at the start of the line. Set fullwidth closing punctuation with full-width glyphs (spaced) when not at the end of the line.",
            "type": "value",
            "value": "space-adjacent"
          },
          {
            "name": "trim-adjacent",
            "prose": "Collapse spacing between punctuation glyphs as described below.",
            "type": "value",
            "value": "trim-adjacent"
          },
          {
            "name": "ideograph-alpha",
            "prose": "Creates extra spacing between runs of ideographs and non-ideographic letters, see § 8.4.1 Inter-script Spacing.",
            "type": "value",
            "value": "ideograph-alpha"
          },
          {
            "name": "ideograph-numeric",
            "prose": "Creates extra spacing between runs of ideographs and non-ideographic numerals, see § 8.4.1 Inter-script Spacing.",
            "type": "value",
            "value": "ideograph-numeric"
          },
          {
            "name": "punctuation",
            "prose": "Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions. In this level, if the element’s content language is French, narrow no-break space (U+202F) and no-break space (U+00A0) is inserted where required by French typographic guidelines. Otherwise this value has no effect. However future specifications may add automatic spacing behavior for other languages. Integrate rules for correcting incorrect spaces? Issue 318",
            "type": "value",
            "value": "punctuation"
          }
        ],
        "styleDeclaration": [
          "text-spacing",
          "textSpacing"
        ]
      },
      {
        "name": "text-indent",
        "value": "[ <length-percentage> ] && hanging? && each-line?",
        "initial": "0",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "refers to block container’s own inline-axis inner size",
        "computedValue": "computed <length-percentage> value, plus any specified keywords",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "Gives the amount of the indent as an absolute length.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "Gives the amount of the indent as a percentage of the block container’s own logical width. Percentages must be treated as 0 for the purpose of calculating intrinsic size contributions, but are always resolved normally when performing layout.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "each-line",
            "prose": "Indentation affects the first line of each block container and each line after a forced line break (but not lines after a soft wrap break).",
            "type": "value",
            "value": "each-line"
          },
          {
            "name": "hanging",
            "prose": "Inverts which lines are affected.",
            "type": "value",
            "value": "hanging"
          }
        ],
        "styleDeclaration": [
          "text-indent",
          "textIndent"
        ]
      },
      {
        "name": "hanging-punctuation",
        "value": "none | [ first || [ force-end | allow-end ] || last ]",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No punctuation character is made to hang.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "first",
            "prose": "An opening bracket or quote at the start of the first formatted line of an element hangs. This applies to all characters in the Unicode categories Ps, Pf, Pi plus the ASCII quote marks U+0027 ' APOSTROPHE and U+0022 \" QUOTATION MARK.",
            "type": "value",
            "value": "first"
          },
          {
            "name": "last",
            "prose": "A closing bracket or quote at the end of the last formatted line of an element hangs. This applies to all characters in the Unicode categories Pe, Pf, Pi plus the ASCII quote marks U+0027 ' APOSTROPHE and U+0022 \" QUOTATION MARK.",
            "type": "value",
            "value": "last"
          },
          {
            "name": "force-end",
            "prose": "A stop or comma at the end of a line hangs.",
            "type": "value",
            "value": "force-end"
          },
          {
            "name": "allow-end",
            "prose": "A stop or comma at the end of a line conditionally hangs.",
            "type": "value",
            "value": "allow-end"
          }
        ],
        "styleDeclaration": [
          "hanging-punctuation",
          "hangingPunctuation"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-text-decor-4": {
    "spec": {
      "title": "CSS Text Decoration Module Level 4",
      "url": "https://drafts.csswg.org/css-text-decor-4/"
    },
    "properties": [
      {
        "name": "text-decoration-line",
        "value": "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no (but see prose, above)",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Neither produces nor inhibits text decoration.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "underline",
            "prose": "Each line of text is underlined.",
            "type": "value",
            "value": "underline"
          },
          {
            "name": "overline",
            "prose": "Each line of text has a line over it (i.e. on the opposite side from an underline).",
            "type": "value",
            "value": "overline"
          },
          {
            "name": "line-through",
            "prose": "Each line of text has a line through the middle.",
            "type": "value",
            "value": "line-through"
          },
          {
            "name": "blink",
            "prose": "The text blinks (alternates between visible and invisible). Conforming user agents may simply not blink the text. Note that not blinking the text is one technique to satisfy checkpoint 3.3 of WAI-UAAG. This value is deprecated in favor of Animations [CSS3-ANIMATIONS].",
            "type": "value",
            "value": "blink"
          },
          {
            "name": "spelling-error",
            "prose": "This value indicates the type of text decoration used by the user agent to highlight spelling mistakes. Its appearance is UA-defined, and may be platform-dependent.",
            "type": "value",
            "value": "spelling-error"
          },
          {
            "name": "grammar-error",
            "prose": "This value indicates the type of text decoration used by the user agent to highlight grammar mistakes. Its appearance is UA defined, and may be platform-dependent.",
            "type": "value",
            "value": "grammar-error"
          }
        ],
        "styleDeclaration": [
          "text-decoration-line",
          "textDecorationLine"
        ]
      },
      {
        "name": "text-decoration-style",
        "value": "solid | double | dotted | dashed | wavy",
        "initial": "solid",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "wavy",
            "prose": "Values have the same meaning as for the border-style properties [CSS-BACKGROUNDS-3]. wavy indicates a wavy line.",
            "type": "value",
            "value": "wavy"
          }
        ],
        "styleDeclaration": [
          "text-decoration-style",
          "textDecorationStyle"
        ]
      },
      {
        "name": "text-decoration-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "text-decoration-color",
          "textDecorationColor"
        ]
      },
      {
        "name": "text-decoration-thickness",
        "value": "auto | from-font | <length> | <percentage>",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword or absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "The UA chooses an appropriate thickness for text decoration lines; see below.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "from-font",
            "prose": "If the first available font has metrics indicating a preferred underline width, use that width, otherwise behaves as auto.",
            "type": "value",
            "value": "from-font"
          },
          {
            "name": "<length>",
            "prose": "Specifies the thickness of text decoration lines as a fixed length. The UA should round the actual value to the nearest integer device pixel, and ensure it is at least one device pixel.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "Specifies the thickness of text decoration lines as a percentage of 1em. The UA should round the actual value to the nearest integer device pixel, and ensure it is at least one device pixel.",
            "type": "value",
            "value": "<percentage>"
          }
        ],
        "styleDeclaration": [
          "text-decoration-thickness",
          "textDecorationThickness"
        ]
      },
      {
        "name": "text-decoration",
        "value": "<'text-decoration-line'> || <'text-decoration-thickness'> || <'text-decoration-style'> || <'text-decoration-color'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "text-decoration",
          "textDecoration"
        ]
      },
      {
        "name": "text-underline-position",
        "value": "auto | [ from-font | under ] || [ left | right ]",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The user agent may use any algorithm to determine the underline’s position; however it must be placed at or under the alphabetic baseline. A typical “alphabetic” underline is positioned just below the alphabetic baseline",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "from-font",
            "prose": "If the first available font has metrics indicating a preferred underline offset, use that offset, otherwise behaves as auto.",
            "type": "value",
            "value": "from-font"
          },
          {
            "name": "under",
            "prose": "The underline is positioned under the element’s text content. In this case the underline usually does not cross the descenders. (This is sometimes called “accounting” underline.) This value can be combined with left or right if a particular side is preferred in vertical typographic modes. text-underline-position: under Because text-underline-position inherits, and is not reset by the text-decoration shorthand, the following example switches the document to use under underlining, which can be more appropriate for writing systems with long, complicated descenders. It is also often useful for mathematical or chemical texts that use many subscripts. :root { text-underline-position: under; }",
            "type": "value",
            "value": "under"
          },
          {
            "name": "left",
            "prose": "In vertical typographic modes, the underline is aligned as for under, except it is always aligned to the left edge of the text. If this causes the underline to be drawn on the \"over\" side of the text, then an overline also switches sides and is drawn on the \"under\" side.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "In vertical typographic modes, the underline is aligned as for under, except it is always aligned to the right edge of the text. If this causes the underline to be drawn on the \"over\" side of the text, then an overline also switches sides and is drawn on the \"under\" side.",
            "type": "value",
            "value": "right"
          }
        ],
        "styleDeclaration": [
          "text-underline-position",
          "textUnderlinePosition"
        ]
      },
      {
        "name": "text-underline-offset",
        "value": "auto | <length> | <percentage>",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword or absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "The UA chooses an appropriate offset for underlines. However, this offset must be zero if the computed value of text-underline-position is from-font and the UA was able to extract an appropriate metric to use from the font.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length>",
            "prose": "Specifies the offset of underlines as a fixed length.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "Specifies the offset of underlines as a percentage of 1em.",
            "type": "value",
            "value": "<percentage>"
          }
        ],
        "styleDeclaration": [
          "text-underline-offset",
          "textUnderlineOffset"
        ]
      },
      {
        "name": "text-decoration-trim",
        "value": "<length>{1,2} | auto",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword or absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "text-decoration-trim",
          "textDecorationTrim"
        ]
      },
      {
        "name": "text-decoration-skip",
        "value": "none | auto",
        "initial": "See individual properties",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "See individual properties",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The text-decoration-skip property and its sub-properties (text-decoration-skip-self, text-decoration-skip-box, text-decoration-skip-inset, text-decoration-skip-spaces, text-decoration-skip-ink) control interruptions in line decorations for which the element or an ancestor is the decorating box. The none value sets all sub-properties to none, and the auto value sets all sub-properties to their initial values.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "The text-decoration-skip property and its sub-properties (text-decoration-skip-self, text-decoration-skip-box, text-decoration-skip-inset, text-decoration-skip-spaces, text-decoration-skip-ink) control interruptions in line decorations for which the element or an ancestor is the decorating box. The none value sets all sub-properties to none, and the auto value sets all sub-properties to their initial values.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "text-decoration-skip",
          "textDecorationSkip"
        ]
      },
      {
        "name": "text-decoration-skip-self",
        "value": "auto | skip-all | [ skip-underline || skip-overline || skip-line-through ] | no-skip",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword(s) except for skip-all, see below",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "Skip this element (its entire margin box) if it is an atomic inline (such as an image or inline-block).",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "skip-all",
            "prose": "Skip this element (its entire margin box) unconditionally. Don’t draw across it, don’t propagate to it.",
            "type": "value",
            "value": "skip-all"
          },
          {
            "name": "skip-underline",
            "prose": "Skip this element (its entire margin box) unconditionally when drawing ancestor underlines.",
            "type": "value",
            "value": "skip-underline"
          },
          {
            "name": "skip-overline",
            "prose": "Skip this element (its entire margin box) unconditionally when drawing ancestor overlines.",
            "type": "value",
            "value": "skip-overline"
          },
          {
            "name": "skip-line-through",
            "prose": "Skip this element (its entire margin box) unconditionally when drawing ancestor line-throughs.",
            "type": "value",
            "value": "skip-line-through"
          },
          {
            "name": "no-skip",
            "prose": "Line decorations from ancestor decorating boxes are applied to this box unconditionally: drawn across it as if it were text if it is an atomic inline, or propagated to it according to the usual rules if it is not.",
            "type": "value",
            "value": "no-skip"
          }
        ],
        "styleDeclaration": [
          "text-decoration-skip-self",
          "textDecorationSkipSelf"
        ]
      },
      {
        "name": "text-decoration-skip-box",
        "value": "none | all",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Skip nothing: line decorations from ancestor decorating boxes are drawn from margin edge to margin edge.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "all",
            "prose": "When drawing text decoration lines applied to an ancestor decorating box, skip over the box’s own margin, border, and padding areas and only draw line decorations within its content area. This value only has an effect for decorations imposed by an ancestor; a decorating box never draws over its own box decoration.",
            "type": "value",
            "value": "all"
          }
        ],
        "styleDeclaration": [
          "text-decoration-skip-box",
          "textDecorationSkipBox"
        ]
      },
      {
        "name": "text-decoration-skip-spaces",
        "value": "none | all | [ start || end ]",
        "initial": "start end",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Spacers are not skipped. They are decorated just like any other character.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "all",
            "prose": "Skip all spacers and all word separators plus any adjacent letter-spacing or word-spacing.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "start",
            "prose": "Skip all spacers, plus any adjacent letter-spacing or word-spacing, when located at the start of the line.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Skip all spacers, plus any adjacent letter-spacing or word-spacing, when located at the end of the line.",
            "type": "value",
            "value": "end"
          }
        ],
        "styleDeclaration": [
          "text-decoration-skip-spaces",
          "textDecorationSkipSpaces"
        ]
      },
      {
        "name": "text-decoration-skip-ink",
        "value": "auto | none | all",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "UAs may interrupt underlines and overlines where the line would cross glyph ink and to some distance to either side of the glyph outline. UAs should consider the script of the text (see note below) when determining whether to apply ink-skipping behavior to a given range of content.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "all",
            "prose": "UAs must interrupt underlines and overlines where the line would cross glyph ink and to some distance to either side of the glyph outline.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "none",
            "prose": "UA must draw continuous underlines and overlines, without interruptions when they cross over a glyph.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "text-decoration-skip-ink",
          "textDecorationSkipInk"
        ]
      },
      {
        "name": "text-emphasis-style",
        "value": "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword none, a pair of keywords representing the shape and fill, or a string",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No emphasis marks.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "filled",
            "prose": "The shape is filled with solid color.",
            "type": "value",
            "value": "filled"
          },
          {
            "name": "dot",
            "prose": "Display small circles as marks. The filled dot is U+2022 '•', and the open dot is U+25E6 '◦'.",
            "type": "value",
            "value": "dot"
          },
          {
            "name": "circle",
            "prose": "Display large circles as marks. The filled circle is U+25CF '●', and the open circle is U+25CB '○'.",
            "type": "value",
            "value": "circle"
          },
          {
            "name": "double-circle",
            "prose": "Display double circles as marks. The filled double-circle is U+25C9 '◉', and the open double-circle is U+25CE '◎'.",
            "type": "value",
            "value": "double-circle"
          },
          {
            "name": "triangle",
            "prose": "Display triangles as marks. The filled triangle is U+25B2 '▲', and the open triangle is U+25B3 '△'.",
            "type": "value",
            "value": "triangle"
          },
          {
            "name": "sesame",
            "prose": "Display sesames as marks. The filled sesame is U+FE45 '﹅', and the open sesame is U+FE46 '﹆'.",
            "type": "value",
            "value": "sesame"
          },
          {
            "name": "<string>",
            "prose": "Display the given string as marks. Authors should not specify more than one character in <string>. The UA may truncate or ignore strings consisting of more than one grapheme cluster.",
            "type": "value",
            "value": "<string>"
          }
        ],
        "styleDeclaration": [
          "text-emphasis-style",
          "textEmphasisStyle"
        ]
      },
      {
        "name": "text-emphasis-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "text-emphasis-color",
          "textEmphasisColor"
        ]
      },
      {
        "name": "text-emphasis",
        "value": "<'text-emphasis-style'> || <'text-emphasis-color'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "text-emphasis",
          "textEmphasis"
        ]
      },
      {
        "name": "text-emphasis-position",
        "value": "[ over | under ] && [ right | left ]?",
        "initial": "over right",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "over",
            "prose": "Draw marks over the text in horizontal typographic modes.",
            "type": "value",
            "value": "over"
          },
          {
            "name": "under",
            "prose": "Draw marks under the text in horizontal typographic modes.",
            "type": "value",
            "value": "under"
          },
          {
            "name": "right",
            "prose": "Draw marks to the right of the text in vertical typographic modes.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "left",
            "prose": "Draw marks to the left of the text in vertical typographic modes.",
            "type": "value",
            "value": "left"
          }
        ],
        "styleDeclaration": [
          "text-emphasis-position",
          "textEmphasisPosition"
        ]
      },
      {
        "name": "text-emphasis-skip",
        "value": "spaces || punctuation || symbols || narrow",
        "initial": "spaces punctuation",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "spaces",
            "prose": "Skip word separators or other characters belonging to the Unicode separator category (Z*). (But note that emphasis marks are drawn for a space that combines with any combining characters.)",
            "type": "value",
            "value": "spaces"
          },
          {
            "name": "punctuation",
            "prose": "Skip punctuation. Punctuation in this definition includes characters belonging to the Unicode P* category that are not defined as symbols (see below).",
            "type": "value",
            "value": "punctuation"
          },
          {
            "name": "symbols",
            "prose": "Skip symbols. Symbols in this definition includes all typographic character units belonging to the Unicode S* general category as well as any which are NFKD-equivalent [UAX15] to the following characters from the Unicode Po category: # U+0023 NUMBER SIGN % U+0025 PERCENT SIGN ‰ U+2030 PER MILLE SIGN ‱ U+2031 PER TEN THOUSAND SIGN ٪ U+066A ARABIC PERCENT SIGN ؉ U+0609 ARABIC-INDIC PER MILLE SIGN ؊ U+060A ARABIC-INDIC PER TEN THOUSAND SIGN & U+0026 AMPERSAND ⁊ U+204A TIRONIAN SIGN E[[ @ U+0040 COMMERCIAL AT § U+00A7 SECTION SIGN ¶ U+00B6 PILCROW SIGN ⁋ U+204B REVERSED PILCROW SIGN ⁓ U+2053 SWUNG DASH 〽️ U+303D PART ALTERNATION MARK",
            "type": "value",
            "value": "symbols"
          },
          {
            "name": "narrow",
            "prose": "Skip characters where the East_Asian_Width property [UAX11] of the Unicode database [UAX44] is not F (Fullwidth) or W (Wide).",
            "type": "value",
            "value": "narrow"
          }
        ],
        "styleDeclaration": [
          "text-emphasis-skip",
          "textEmphasisSkip"
        ]
      },
      {
        "name": "text-shadow",
        "value": "none | <shadow>#",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "either the keyword none or a list, each item consisting of four absolute lengths plus a computed color and optionally also an inset keyword",
        "canonicalOrder": "per grammar",
        "animationType": "as shadow list",
        "styleDeclaration": [
          "text-shadow",
          "textShadow"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "<length>",
        "prose": "Inset (positive) or outset (negative) the start/end of the affected line decorations. The following example offsets an extra thick underline 1em endwards with respect to the text h1 { text-decoration: underline 0.3em rgba(36,148,187,0.25); text-decoration-trim: 1em -1em; }",
        "type": "value",
        "value": "<length>",
        "for": "text-decoration-skip-inset"
      },
      {
        "msg": "Dangling value",
        "name": "auto",
        "prose": "The UA chooses a trim amount that ensures that if two identical underlined elements appear side-by-side they do not appear to have a single underline. (This is important in Chinese, where underlining is a form of punctuation.) text-decoration-skip-inset: auto for <u>石井</u><u>艾俐俐</u>",
        "type": "value",
        "value": "auto",
        "for": "text-decoration-skip-inset"
      },
      {
        "msg": "Dangling value",
        "name": "open",
        "prose": "The shape is hollow.",
        "type": "value",
        "value": "open",
        "for": "text-text-emphasis"
      }
    ]
  },
  "css-text-decor": {
    "spec": {
      "title": "CSS Text Decoration Module Level 3",
      "url": "https://drafts.csswg.org/css-text-decor-3/"
    },
    "properties": [
      {
        "name": "text-decoration-line",
        "value": "none | [ underline || overline || line-through || blink ]",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no (but see prose, above)",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Neither produces nor inhibits text decoration.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "underline",
            "prose": "Each line of text is underlined.",
            "type": "value",
            "value": "underline"
          },
          {
            "name": "overline",
            "prose": "Each line of text has a line over it (i.e. on the opposite side from an underline).",
            "type": "value",
            "value": "overline"
          },
          {
            "name": "line-through",
            "prose": "Each line of text has a line through the middle.",
            "type": "value",
            "value": "line-through"
          },
          {
            "name": "blink",
            "prose": "The text blinks (alternates between visible and invisible). Conforming user agents may simply not blink the text. Note that not blinking the text is one technique to satisfy checkpoint 3.3 of WAI-UAAG. This value is deprecated in favor of Animations [CSS-ANIMATIONS-1].",
            "type": "value",
            "value": "blink"
          }
        ],
        "styleDeclaration": [
          "text-decoration-line",
          "textDecorationLine"
        ]
      },
      {
        "name": "text-decoration-style",
        "value": "solid | double | dotted | dashed | wavy",
        "initial": "solid",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "text-decoration-style",
          "textDecorationStyle"
        ]
      },
      {
        "name": "text-decoration-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "text-decoration-color",
          "textDecorationColor"
        ]
      },
      {
        "name": "text-decoration",
        "value": "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "text-decoration",
          "textDecoration"
        ]
      },
      {
        "name": "text-underline-position",
        "value": "auto | [ under || [ left | right ] ]",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The user agent may use any algorithm to determine the underline’s position; however it must be placed at or under the alphabetic baseline. A typical “alphabetic” underline is positioned just below the alphabetic baseline",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "under",
            "prose": "The underline is positioned under the element’s text content. In this case the underline usually does not cross the descenders. (This is sometimes called “accounting” underline.) This value can be combined with left or right if a particular side is preferred in vertical typographic modes. text-underline-position: under Because text-underline-position inherits, and is not reset by the text-decoration shorthand, the following example switches the document to use under underlining, which can be more appropriate for writing systems with long, complicated descenders. It is also often useful for mathematical or chemical texts that use many subscripts. :root { text-underline-position: under; }",
            "type": "value",
            "value": "under"
          },
          {
            "name": "left",
            "prose": "In vertical typographic modes, the underline is aligned as for under, except it is always aligned to the left edge of the text. If this causes the underline to be drawn on the \"over\" side of the text, then an overline also switches sides and is drawn on the \"under\" side.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "In vertical typographic modes, the underline is aligned as for under, except it is always aligned to the right edge of the text. If this causes the underline to be drawn on the \"over\" side of the text, then an overline also switches sides and is drawn on the \"under\" side.",
            "type": "value",
            "value": "right"
          }
        ],
        "styleDeclaration": [
          "text-underline-position",
          "textUnderlinePosition"
        ]
      },
      {
        "name": "text-emphasis-style",
        "value": "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the keyword none, a pair of keywords representing the shape and fill, or a string",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No emphasis marks.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "filled",
            "prose": "The shape is filled with solid color.",
            "type": "value",
            "value": "filled"
          },
          {
            "name": "dot",
            "prose": "Display small circles as marks. The filled dot is U+2022 '•', and the open dot is U+25E6 '◦'.",
            "type": "value",
            "value": "dot"
          },
          {
            "name": "circle",
            "prose": "Display large circles as marks. The filled circle is U+25CF '●', and the open circle is U+25CB '○'.",
            "type": "value",
            "value": "circle"
          },
          {
            "name": "double-circle",
            "prose": "Display double circles as marks. The filled double-circle is U+25C9 '◉', and the open double-circle is U+25CE '◎'.",
            "type": "value",
            "value": "double-circle"
          },
          {
            "name": "triangle",
            "prose": "Display triangles as marks. The filled triangle is U+25B2 '▲', and the open triangle is U+25B3 '△'.",
            "type": "value",
            "value": "triangle"
          },
          {
            "name": "sesame",
            "prose": "Display sesames as marks. The filled sesame is U+FE45 '﹅', and the open sesame is U+FE46 '﹆'.",
            "type": "value",
            "value": "sesame"
          },
          {
            "name": "<string>",
            "prose": "Display the given string as marks. Authors should not specify more than one character in <string>. The UA may truncate or ignore strings consisting of more than one grapheme cluster.",
            "type": "value",
            "value": "<string>"
          }
        ],
        "styleDeclaration": [
          "text-emphasis-style",
          "textEmphasisStyle"
        ]
      },
      {
        "name": "text-emphasis-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "text-emphasis-color",
          "textEmphasisColor"
        ]
      },
      {
        "name": "text-emphasis",
        "value": "<'text-emphasis-style'> || <'text-emphasis-color'>",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "text-emphasis",
          "textEmphasis"
        ]
      },
      {
        "name": "text-emphasis-position",
        "value": "[ over | under ] && [ right | left ]?",
        "initial": "over right",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "over",
            "prose": "Draw marks over the text in horizontal typographic modes.",
            "type": "value",
            "value": "over"
          },
          {
            "name": "under",
            "prose": "Draw marks under the text in horizontal typographic modes.",
            "type": "value",
            "value": "under"
          },
          {
            "name": "right",
            "prose": "Draw marks to the right of the text in vertical typographic modes.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "left",
            "prose": "Draw marks to the left of the text in vertical typographic modes.",
            "type": "value",
            "value": "left"
          }
        ],
        "styleDeclaration": [
          "text-emphasis-position",
          "textEmphasisPosition"
        ]
      },
      {
        "name": "text-shadow",
        "value": "none | [ <color>? && <length>{2,3} ]#",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "either the keyword none or a list, each item consisting of three absolute lengths plus a computed color",
        "canonicalOrder": "per grammar",
        "animationType": "as shadow list",
        "styleDeclaration": [
          "text-shadow",
          "textShadow"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "open",
        "prose": "The shape is hollow.",
        "type": "value",
        "value": "open",
        "for": "text-text-emphasis"
      }
    ]
  },
  "css-text": {
    "spec": {
      "title": "CSS Text Module Level 3",
      "url": "https://drafts.csswg.org/css-text-3/"
    },
    "properties": [
      {
        "name": "text-transform",
        "value": "none | [capitalize | uppercase | lowercase ] || full-width || full-size-kana",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No effects.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "capitalize",
            "prose": "Puts the first typographic letter unit of each word, if lowercase, in titlecase; other characters are unaffected.",
            "type": "value",
            "value": "capitalize"
          },
          {
            "name": "uppercase",
            "prose": "Puts all letters in uppercase.",
            "type": "value",
            "value": "uppercase"
          },
          {
            "name": "lowercase",
            "prose": "Puts all letters in lowercase.",
            "type": "value",
            "value": "lowercase"
          },
          {
            "name": "full-width",
            "prose": "Puts all typographic character units in full-width form. If a character does not have a corresponding full-width form, it is left as is. This value is typically used to typeset Latin letters and digits as if they were ideographic characters.",
            "type": "value",
            "value": "full-width"
          },
          {
            "name": "full-size-kana",
            "prose": "Converts all small Kana characters to the equivalent full-size Kana. This value is typically used for ruby annotation text, where authors may want all small Kana to be drawn as large Kana to compensate for legibility issues at the small font sizes typically used in ruby.",
            "type": "value",
            "value": "full-size-kana"
          }
        ],
        "styleDeclaration": [
          "text-transform",
          "textTransform"
        ]
      },
      {
        "name": "white-space",
        "value": "normal | pre | nowrap | pre-wrap | break-spaces | pre-line",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "This value directs user agents to collapse sequences of white space into a single character (or in some cases, no character). Lines may wrap at allowed soft wrap opportunities, as determined by the line-breaking rules in effect, in order to minimize inline-axis overflow.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "pre",
            "prose": "This value prevents user agents from collapsing sequences of white space. Segment breaks such as line feeds are preserved as forced line breaks. Lines only break at forced line breaks; content that does not fit within the block container overflows it.",
            "type": "value",
            "value": "pre"
          },
          {
            "name": "nowrap",
            "prose": "Like normal, this value collapses white space; but like pre, it does not allow wrapping.",
            "type": "value",
            "value": "nowrap"
          },
          {
            "name": "pre-wrap",
            "prose": "Like pre, this value preserves white space; but like normal, it allows wrapping.",
            "type": "value",
            "value": "pre-wrap"
          },
          {
            "name": "break-spaces",
            "prose": "The behavior is identical to that of pre-wrap, except that: Any sequence of preserved white space or other space separators always takes up space, including at the end of the line. Tests white-space-intrinsic-size-001.html (live test) (source) white-space-intrinsic-size-002.html (live test) (source) A line breaking opportunity exists after every preserved white space character and after every other space separator (including between adjacent spaces). Tests overflow-wrap-break-word-002.html (live test) (source) overflow-wrap-anywhere-002.html (live test) (source) break-spaces-001.html (live test) (source) break-spaces-002.html (live test) (source) break-spaces-003.html (live test) (source) break-spaces-004.html (live test) (source) break-spaces-005.html (live test) (source) break-spaces-006.html (live test) (source) break-spaces-007.html (live test) (source) break-spaces-008.html (live test) (source) break-spaces-009.html (live test) (source) break-spaces-010.html (live test) (source) break-spaces-051.html (live test) (source) break-spaces-052.html (live test) (source) white-space-pre-034.html (live test) (source) textarea-break-spaces-001.html (live test) (source) textarea-break-spaces-002.html (live test) (source) break-spaces-before-first-char-001.html (live test) (source) break-spaces-before-first-char-002.html (live test) (source) break-spaces-before-first-char-003.html (live test) (source) break-spaces-before-first-char-004.html (live test) (source) break-spaces-before-first-char-005.html (live test) (source) break-spaces-before-first-char-006.html (live test) (source) break-spaces-before-first-char-007.html (live test) (source) break-spaces-before-first-char-008.html (live test) (source) break-spaces-before-first-char-009.html (live test) (source) break-spaces-before-first-char-010.html (live test) (source) break-spaces-before-first-char-011.html (live test) (source) break-spaces-before-first-char-012.html (live test) (source) break-spaces-before-first-char-013.html (live test) (source) break-spaces-before-first-char-014.html (live test) (source) break-spaces-before-first-char-015.html (live test) (source) break-spaces-before-first-char-016.html (live test) (source) break-spaces-before-first-char-017.html (live test) (source) break-spaces-before-first-char-018.html (live test) (source) break-spaces-before-first-ideographic-char-001.html (live test) (source) break-spaces-before-first-ideographic-char-002.html (live test) (source) break-spaces-before-first-ideographic-char-003.html (live test) (source) break-spaces-before-first-ideographic-char-004.html (live test) (source) break-spaces-before-first-ideographic-char-005.html (live test) (source) break-spaces-before-first-ideographic-char-006.html (live test) (source) break-spaces-before-first-ideographic-char-007.html (live test) (source) break-spaces-before-first-ideographic-char-008.html (live test) (source) break-spaces-before-first-ideographic-char-009.html (live test) (source) break-spaces-before-first-ideographic-char-010.html (live test) (source) break-spaces-before-first-ideographic-char-011.html (live test) (source) break-spaces-before-first-ideographic-char-012.html (live test) (source) break-spaces-before-first-ideographic-char-013.html (live test) (source) break-spaces-before-first-ideographic-char-014.html (live test) (source) break-spaces-before-first-ideographic-char-015.html (live test) (source) break-spaces-before-first-ideographic-char-016.html (live test) (source) break-spaces-before-first-ideographic-char-017.html (live test) (source) break-spaces-before-first-ideographic-char-018.html (live test) (source) tab-stop-threshold-005.html (live test) (source) tab-stop-threshold-006.html (live test) (source) word-break-break-all-017.html (live test) (source) break-spaces-tab-001.html (live test) (source) break-spaces-tab-002.html (live test) (source) break-spaces-tab-003.html (live test) (source) break-spaces-tab-004.html (live test) (source) break-spaces-tab-005.html (live test) (source) break-spaces-tab-006.html (live test) (source) break-spaces-with-overflow-wrap-001.html (live test) (source) break-spaces-with-overflow-wrap-002.html (live test) (source) break-spaces-with-overflow-wrap-003.html (live test) (source) break-spaces-with-overflow-wrap-004.html (live test) (source) break-spaces-with-overflow-wrap-005.html (live test) (source) break-spaces-with-overflow-wrap-006.html (live test) (source) break-spaces-with-overflow-wrap-007.html (live test) (source) break-spaces-with-overflow-wrap-008.html (live test) (source) break-spaces-with-overflow-wrap-009.html (live test) (source) break-spaces-with-overflow-wrap-010.html (live test) (source) break-spaces-with-ideographic-space-001.html (live test) (source) break-spaces-with-ideographic-space-002.html (live test) (source) break-spaces-with-ideographic-space-003.html (live test) (source) break-spaces-with-ideographic-space-004.html (live test) (source) break-spaces-with-ideographic-space-005.html (live test) (source) break-spaces-with-ideographic-space-006.html (live test) (source) break-spaces-with-ideographic-space-007.html (live test) (source) break-spaces-with-ideographic-space-008.html (live test) (source) break-spaces-with-ideographic-space-009.html (live test) (source) break-spaces-with-ideographic-space-010.html (live test) (source) line-break-anywhere-and-white-space-008.html (live test) (source) line-break-anywhere-and-white-space-009.html (live test) (source) ws-break-spaces-applies-to-001.html (live test) (source) ws-break-spaces-applies-to-002.html (live test) (source) ws-break-spaces-applies-to-003.html (live test) (source) ws-break-spaces-applies-to-005.html (live test) (source) ws-break-spaces-applies-to-006.html (live test) (source) ws-break-spaces-applies-to-007.html (live test) (source) ws-break-spaces-applies-to-008.html (live test) (source) ws-break-spaces-applies-to-009.html (live test) (source) ws-break-spaces-applies-to-010.html (live test) (source) ws-break-spaces-applies-to-011.html (live test) (source) ws-break-spaces-applies-to-012.html (live test) (source) ws-break-spaces-applies-to-013.html (live test) (source) ws-break-spaces-applies-to-014.html (live test) (source) ws-break-spaces-applies-to-015.html (live test) (source) break-spaces-newline-011.html (live test) (source) break-spaces-newline-012.html (live test) (source) break-spaces-newline-013.html (live test) (source) break-spaces-newline-014.html (live test) (source) break-spaces-newline-015.html (live test) (source) break-spaces-newline-016.html (live test) (source) trailing-ideographic-space-break-spaces-001.html (live test) (source) trailing-ideographic-space-break-spaces-002.html (live test) (source) trailing-ideographic-space-break-spaces-003.html (live test) (source) trailing-ideographic-space-break-spaces-004.html (live test) (source) trailing-ideographic-space-break-spaces-005.html (live test) (source) trailing-ideographic-space-break-spaces-006.html (live test) (source) trailing-ideographic-space-break-spaces-007.html (live test) (source) trailing-ideographic-space-break-spaces-008.html (live test) (source)",
            "type": "value",
            "value": "break-spaces"
          },
          {
            "name": "pre-line",
            "prose": "Like normal, this value collapses consecutive white space characters and allows wrapping, but it preserves segment breaks in the source as forced line breaks.",
            "type": "value",
            "value": "pre-line"
          }
        ],
        "styleDeclaration": [
          "white-space",
          "whiteSpace"
        ]
      },
      {
        "name": "tab-size",
        "value": "<number> | <length>",
        "initial": "8",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "the specified number or absolute length",
        "canonicalOrder": "n/a",
        "animationType": "by computed value type",
        "styleDeclaration": [
          "tab-size",
          "tabSize"
        ]
      },
      {
        "name": "word-break",
        "value": "normal | keep-all | break-all | break-word",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Words break according to their customary rules, as described above. Korean, which commonly exhibits two different behaviors, allows breaks between any two consecutive Hangul/Hanja. For Ethiopic, which also exhibits two different behaviors, such breaks within words are not allowed.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "break-all",
            "prose": "Breaking is allowed within “words”: specifically, in addition to soft wrap opportunities allowed for normal, any typographic letter units (and any typographic character units resolving to the NU (“numeric”), AL (“alphabetic”), or SA (“Southeast Asian”) line breaking classes [UAX14]) are instead treated as ID (“ideographic characters”) for the purpose of line-breaking. Hyphenation is not applied.",
            "type": "value",
            "value": "break-all"
          },
          {
            "name": "keep-all",
            "prose": "Breaking is forbidden within “words”: implicit soft wrap opportunities between typographic letter units (or other typographic character units belonging to the NU, AL, AI, or ID Unicode line breaking classes [UAX14]) are suppressed, i.e. breaks are prohibited between pairs of such characters (regardless of line-break settings other than anywhere) except where opportunities exist due to dictionary-based breaking. Otherwise this option is equivalent to normal. In this style, sequences of CJK characters do not break.",
            "type": "value",
            "value": "keep-all"
          },
          {
            "name": "break-word",
            "prose": "For compatibility with legacy content, the word-break property also supports a deprecated break-word keyword. When specified, this has the same effect as word-break: normal and overflow-wrap: anywhere, regardless of the actual value of the overflow-wrap property.",
            "type": "value",
            "value": "break-word"
          }
        ],
        "styleDeclaration": [
          "word-break",
          "wordBreak"
        ]
      },
      {
        "name": "line-break",
        "value": "auto | loose | normal | strict | anywhere",
        "initial": "auto",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The UA determines the set of line-breaking restrictions to use, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "loose",
            "prose": "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers.",
            "type": "value",
            "value": "loose"
          },
          {
            "name": "normal",
            "prose": "Breaks text using the most common set of line-breaking rules.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "strict",
            "prose": "Breaks text using the most stringent set of line-breaking rules.",
            "type": "value",
            "value": "strict"
          },
          {
            "name": "anywhere",
            "prose": "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property. [UAX14] The different wrapping opportunities must not be prioritized. Hyphenation is not applied.",
            "type": "value",
            "value": "anywhere"
          }
        ],
        "styleDeclaration": [
          "line-break",
          "lineBreak"
        ]
      },
      {
        "name": "hyphens",
        "value": "none | manual | auto",
        "initial": "manual",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "Words are not hyphenated, even if characters inside the word explicitly define hyphenation opportunities.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "manual",
            "prose": "Words are only hyphenated where there are characters inside the word that explicitly suggest hyphenation opportunities. The UA must use the appropriate language-specific hyphenation character(s) and should apply any appropriate spelling changes just as for automatic hyphenation at the same point. In Unicode, U+00AD is a conditional \"soft hyphen\" and U+2010 is an unconditional hyphen. Unicode Standard Annex #14 describes the role of soft hyphens in Unicode line breaking. [UAX14] In HTML, &shy; represents the soft hyphen character, which suggests a hyphenation opportunity. ex&shy;ample",
            "type": "value",
            "value": "manual"
          },
          {
            "name": "auto",
            "prose": "Words may be broken at hyphenation opportunities determined automatically by a language-appropriate hyphenation resource in addition to those indicated explicitly by a conditional hyphen. Automatic hyphenation opportunities elsewhere within a word must be ignored if the word contains a conditional hyphen (&shy; or U+00AD SOFT HYPHEN), in favor of the conditional hyphen(s). However, if, even after breaking at such opportunities, a portion of that word is still too long to fit on one line, an automatic hyphenation opportunity may be used.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "hyphens"
        ]
      },
      {
        "name": "overflow-wrap",
        "value": "normal | break-word | anywhere",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "normal",
            "prose": "Lines may break only at allowed break points. However, the restrictions introduced by word-break: keep-all may be relaxed to match word-break: normal if there are no otherwise-acceptable break points in the line.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "anywhere",
            "prose": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line. Shaping characters are still shaped as if the word were not broken, and grapheme clusters must stay together as one unit. No hyphenation character is inserted at the break point. Soft wrap opportunities introduced by anywhere are considered when calculating min-content intrinsic sizes.",
            "type": "value",
            "value": "anywhere"
          },
          {
            "name": "break-word",
            "prose": "As for anywhere except that soft wrap opportunities introduced by break-word are not considered when calculating min-content intrinsic sizes.",
            "type": "value",
            "value": "break-word"
          }
        ],
        "styleDeclaration": [
          "overflow-wrap",
          "overflowWrap"
        ]
      },
      {
        "name": "word-wrap",
        "value": "normal | break-word | anywhere",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "styleDeclaration": [
          "word-wrap",
          "wordWrap"
        ]
      },
      {
        "name": "text-align",
        "value": "start | end | left | right | center | justify | match-parent | justify-all",
        "initial": "start",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "canonicalOrder": "n/a",
        "values": [
          {
            "name": "start",
            "prose": "Inline-level content is aligned to the start edge of the line box.",
            "type": "value",
            "value": "start"
          },
          {
            "name": "end",
            "prose": "Inline-level content is aligned to the end edge of the line box.",
            "type": "value",
            "value": "end"
          },
          {
            "name": "left",
            "prose": "Inline-level content is aligned to the line-left edge of the line box. (In vertical writing modes, this can be either the physical top or bottom, depending on writing-mode.) [CSS-WRITING-MODES-4]",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Inline-level content is aligned to the line-right edge of the line box. (In vertical writing modes, this can be either the physical top or bottom, depending on writing-mode.) [CSS-WRITING-MODES-4]",
            "type": "value",
            "value": "right"
          },
          {
            "name": "center",
            "prose": "Inline-level content is centered within the line box.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "justify",
            "prose": "Text is justified according to the method specified by the text-justify property, in order to exactly fill the line box. Unless otherwise specified by text-align-last, the last line before a forced break or the end of the block is start-aligned.",
            "type": "value",
            "value": "justify"
          },
          {
            "name": "justify-all",
            "prose": "Sets both text-align-all and text-align-last to justify, forcing the last line to justify as well.",
            "type": "value",
            "value": "justify-all"
          },
          {
            "name": "match-parent",
            "prose": "This value behaves the same as inherit (computes to its parent’s computed value) except that an inherited value of start or end is interpreted against the parent’s direction value and results in a computed value of either left or right. Computes to start when specified on the root element. When specified on the text-align shorthand, sets both text-align-all and text-align-last to match-parent.",
            "type": "value",
            "value": "match-parent"
          }
        ],
        "styleDeclaration": [
          "text-align",
          "textAlign"
        ]
      },
      {
        "name": "text-align-all",
        "value": "start | end | left | right | center | justify | match-parent",
        "initial": "start",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "keyword as specified, except for match-parent which computes as defined above",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "styleDeclaration": [
          "text-align-all",
          "textAlignAll"
        ]
      },
      {
        "name": "text-align-last",
        "value": "auto | start | end | left | right | center | justify | match-parent",
        "initial": "auto",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "If auto is specified, content on the affected line is aligned per text-align-all unless text-align-all is set to justify, in which case it is start-aligned. All other values are interpreted as described for text-align.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "text-align-last",
          "textAlignLast"
        ]
      },
      {
        "name": "text-justify",
        "value": "auto | none | inter-word | inter-character",
        "initial": "auto",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword (except for the distribute legacy value)",
        "canonicalOrder": "n/a",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality. Since justification rules vary by writing system and language, UAs should, where possible, use a justification algorithm appropriate to the text. For example, the UA could use by default a justification method that is a simple universal compromise for all writing systems—such as primarily expanding word separators and between CJK typographic letter units along with secondarily expanding between Southeast Asian typographic letter units. Then, in cases where the content language of the paragraph is known, it could choose a more language-tailored justification behavior e.g. following the Requirements for Japanese Text Layout for Japanese [JLREQ], using cursive elongation for Arabic, using inter-word for German, etc. An example of cursively-justified Arabic text, rendered by Tasmeem. Like English, Arabic can be justified by adjusting the spacing between words, but in most styles it can also be justified by calligraphically elongating or compressing the letterforms themselves. In this example, the upper text is extended to fill the line by the use of elongated (kashida) forms and swash forms, while the bottom line is compressed slightly by using a stacked combination for the characters between ت and م. By employing traditional calligraphic techniques, a typesetter can justify the line while preserving flow and color, providing a very high quality justification effect. However, this is by its nature a very script-specific effect. Mixed-script text with text-justify: auto: this interpretation uses a universal-compromise justification method, expanding at spaces as well as between CJK and Southeast Asian letters. This effectively uses inter-word + inter-ideograph spacing for lines that have word-separators and/or CJK characters and falls back to inter-cluster behavior for lines that don’t or for which the space stretches too far.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "none",
            "prose": "Justification is disabled: there are no justification opportunities within the text. Mixed-script text with text-justify: none",
            "type": "value",
            "value": "none"
          },
          {
            "name": "inter-word",
            "prose": "Justification adjusts spacing at word separators only (effectively varying the used word-spacing on the line). This behavior is typical for languages that separate words using spaces, like English or Korean. Mixed-script text with text-justify: inter-word",
            "type": "value",
            "value": "inter-word"
          },
          {
            "name": "inter-character",
            "prose": "Justification adjusts spacing between each pair of adjacent typographic character units (effectively varying the used letter-spacing on the line). This value is sometimes used in East Asian systems such as Japanese. Mixed-script text with text-justify: inter-character For legacy reasons, UAs must also support the alternate keyword distribute which must compute to inter-character, thus having the exact same meaning and behavior. UAs may treat this as a legacy value alias.",
            "type": "value",
            "value": "inter-character"
          },
          {
            "name": "distribute",
            "prose": "For legacy reasons, UAs must also support the alternate keyword distribute which must compute to inter-character, thus having the exact same meaning and behavior. UAs may treat this as a legacy value alias.",
            "type": "value",
            "value": "distribute"
          }
        ],
        "styleDeclaration": [
          "text-justify",
          "textJustify"
        ]
      },
      {
        "name": "word-spacing",
        "value": "normal | <length>",
        "initial": "normal",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "an absolute length",
        "canonicalOrder": "n/a",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "No additional spacing is applied. Computes to zero.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<length>",
            "prose": "Specifies extra spacing in addition to the intrinsic inter-word spacing defined by the font.",
            "type": "value",
            "value": "<length>"
          }
        ],
        "styleDeclaration": [
          "word-spacing",
          "wordSpacing"
        ]
      },
      {
        "name": "letter-spacing",
        "value": "normal | <length>",
        "initial": "normal",
        "appliesTo": "inline boxes and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "an absolute length",
        "canonicalOrder": "n/a",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "normal",
            "prose": "No additional spacing is applied. Computes to zero.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<length>",
            "prose": "Specifies additional spacing between typographic character units. Values may be negative, but there may be implementation-dependent limits.",
            "type": "value",
            "value": "<length>"
          }
        ],
        "styleDeclaration": [
          "letter-spacing",
          "letterSpacing"
        ]
      },
      {
        "name": "text-indent",
        "value": "[ <length-percentage> ] && hanging? && each-line?",
        "initial": "0",
        "appliesTo": "block containers",
        "inherited": "yes",
        "percentages": "refers to block container’s own inline-axis inner size",
        "computedValue": "computed <length-percentage> value, plus any specified keywords",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "<length>",
            "prose": "Gives the amount of the indent as an absolute length.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "Gives the amount of the indent as a percentage of the block container’s own logical width. Percentages must be treated as 0 for the purpose of calculating intrinsic size contributions, but are always resolved normally when performing layout.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "each-line",
            "prose": "Indentation affects the first line of each block container and each line after a forced line break (but not lines after a soft wrap break).",
            "type": "value",
            "value": "each-line"
          },
          {
            "name": "hanging",
            "prose": "Inverts which lines are affected.",
            "type": "value",
            "value": "hanging"
          }
        ],
        "styleDeclaration": [
          "text-indent",
          "textIndent"
        ]
      },
      {
        "name": "hanging-punctuation",
        "value": "none | [ first || [ force-end | allow-end ] || last ]",
        "initial": "none",
        "appliesTo": "text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword(s)",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "No punctuation character is made to hang.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "first",
            "prose": "An opening bracket or quote at the start of the first formatted line of an element hangs. This applies to all characters in the Unicode categories Ps, Pf, Pi plus the ASCII quote marks U+0027 ' APOSTROPHE and U+0022 \" QUOTATION MARK.",
            "type": "value",
            "value": "first"
          },
          {
            "name": "last",
            "prose": "A closing bracket or quote at the end of the last formatted line of an element hangs. This applies to all characters in the Unicode categories Pe, Pf, Pi plus the ASCII quote marks U+0027 ' APOSTROPHE and U+0022 \" QUOTATION MARK.",
            "type": "value",
            "value": "last"
          },
          {
            "name": "force-end",
            "prose": "A stop or comma at the end of a line hangs.",
            "type": "value",
            "value": "force-end"
          },
          {
            "name": "allow-end",
            "prose": "A stop or comma at the end of a line conditionally hangs.",
            "type": "value",
            "value": "allow-end"
          }
        ],
        "styleDeclaration": [
          "hanging-punctuation",
          "hangingPunctuation"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "css-transforms-2": {
    "spec": {
      "title": "CSS Transforms Module Level 2",
      "url": "https://drafts.csswg.org/css-transforms-2/"
    },
    "properties": [
      {
        "name": "translate",
        "value": "none | <length-percentage> [ <length-percentage> <length>? ]?",
        "initial": "none",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "relative to the width of the reference box (for the first value) or the height (for the second value)",
        "computedValue": "the keyword none or a pair of computed <length-percentage> values and an absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value, but see below for none",
        "values": [
          {
            "name": "none",
            "prose": "All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "translate"
        ]
      },
      {
        "name": "rotate",
        "value": "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
        "initial": "none",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none, or an <angle> with an axis consisting of a list of three <number>s",
        "canonicalOrder": "per grammar",
        "animationType": "as SLERP, but see below for none",
        "values": [
          {
            "name": "x",
            "prose": "The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.",
            "type": "value",
            "value": "x"
          },
          {
            "name": "y",
            "prose": "The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.",
            "type": "value",
            "value": "y"
          },
          {
            "name": "z",
            "prose": "The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.",
            "type": "value",
            "value": "z"
          },
          {
            "name": "none",
            "prose": "All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "rotate"
        ]
      },
      {
        "name": "scale",
        "value": "none | [ <number> | <percentage> ]{1,3}",
        "initial": "none",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none, or a list of 3 <number>s",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value, but see below for none",
        "values": [
          {
            "name": "none",
            "prose": "All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "scale"
        ]
      },
      {
        "name": "transform-style",
        "value": "flat | preserve-3d",
        "initial": "flat",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "usedValue": "flat if a grouping property is present, specified keyword otherwise",
        "styleDeclaration": [
          "transform-style",
          "transformStyle"
        ]
      },
      {
        "name": "perspective",
        "value": "none | <length [0,∞]>",
        "initial": "none",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword none or an absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "<length [0,∞]>",
            "prose": "Distance to the center of projection. Verify that projection is the distance to the center of projection. As very small <length> values can produce bizarre rendering results and stress the numerical accuracy of transform calculations, values less than 1px must be treated as 1px for rendering purposes. (This clamping does not affect the underlying value, so perspective: 0; in a stylesheet will still serialize back as 0.)",
            "type": "value",
            "value": "<length [0,∞]>"
          },
          {
            "name": "none",
            "prose": "No perspective transform is applied. The effect is mathematically similar to an infinite <length> value. All objects appear to be flat on the canvas.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "perspective"
        ]
      },
      {
        "name": "perspective-origin",
        "value": "<position>",
        "initial": "50% 50%",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "refer to the size of the reference box",
        "computedValue": "see background-position",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "<percentage>",
            "prose": "A percentage for the horizontal perspective offset is relative to the width of the reference box. A percentage for the vertical offset is relative to height of the reference box. The value for the horizontal and vertical offset represent an offset from the top left corner of the reference box.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "<length>",
            "prose": "A length value gives a fixed length as the offset. The value for the horizontal and vertical offset represent an offset from the top left corner of the reference box.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "top",
            "prose": "Computes to 0% for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "right",
            "prose": "Computes to 100% for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "bottom",
            "prose": "Computes to 100% for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "left",
            "prose": "Computes to 0% for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "center",
            "prose": "Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.",
            "type": "value",
            "value": "center"
          }
        ],
        "styleDeclaration": [
          "perspective-origin",
          "perspectiveOrigin"
        ]
      },
      {
        "name": "backface-visibility",
        "value": "visible | hidden",
        "initial": "visible",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "backface-visibility",
          "backfaceVisibility"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<transform-function>",
        "prose": "The value of the transform property is a list of <transform-function>. The set of allowed transform functions is given below. Wherever <angle> is used in this specification, a <number> that is equal to zero is also allowed, which is treated the same as an angle of zero degrees. A percentage for horizontal translations is relative to the width of the reference box. A percentage for vertical translations is relative to the height of the reference box. A percentage in a scale function is equivalent to a number, and serializes as a number in specified values. For example, scale3d(50%, 100%, 150%) serializes as scale3d(0.5, 1, 1.5).",
        "type": "type"
      },
      {
        "name": "scale()",
        "value": "scale( [ <number> | <percentage> ]#{1,2} )",
        "type": "function"
      },
      {
        "name": "scaleX()",
        "value": "scaleX( [ <number> | <percentage> ] )",
        "type": "function"
      },
      {
        "name": "scaleY()",
        "value": "scaleY( [ <number> | <percentage> ] )",
        "type": "function"
      },
      {
        "name": "matrix3d()",
        "value": "matrix3d( <number>#{16} )",
        "type": "function"
      },
      {
        "name": "translate3d()",
        "value": "translate3d( <length-percentage> , <length-percentage> , <length> )",
        "type": "function"
      },
      {
        "name": "translateZ()",
        "value": "translateZ( <length> )",
        "type": "function"
      },
      {
        "name": "scale3d()",
        "value": "scale3d( [ <number> | <percentage> ]#{3} )",
        "type": "function"
      },
      {
        "name": "scaleZ()",
        "value": "scaleZ( [ <number> | <percentage> ] )",
        "type": "function"
      },
      {
        "name": "rotate3d()",
        "value": "rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )",
        "type": "function"
      },
      {
        "name": "rotateX()",
        "value": "rotateX( [ <angle> | <zero> ] )",
        "type": "function"
      },
      {
        "name": "rotateY()",
        "value": "rotateY( [ <angle> | <zero> ] )",
        "type": "function"
      },
      {
        "name": "rotateZ()",
        "value": "rotateZ( [ <angle> | <zero> ] )",
        "type": "function"
      },
      {
        "name": "perspective()",
        "value": "perspective( [ <length [0,∞]> | none ] )",
        "type": "function",
        "values": [
          {
            "name": "none",
            "prose": "perspective() = perspective( [ <length [0,∞]> | none ] )",
            "type": "value",
            "value": "none"
          }
        ]
      }
    ]
  },
  "css-transforms": {
    "spec": {
      "title": "CSS Transforms Module Level 1",
      "url": "https://drafts.csswg.org/css-transforms-1/"
    },
    "properties": [
      {
        "name": "transform",
        "value": "none | <transform-list>",
        "initial": "none",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "refer to the size of reference box",
        "computedValue": "as specified, but with lengths made absolute",
        "canonicalOrder": "per grammar",
        "animationType": "transform list, see interpolation rules",
        "values": [
          {
            "name": "matrix()",
            "value": "matrix( <number>#{6} )",
            "type": "function"
          },
          {
            "name": "translate()",
            "value": "translate( <length-percentage> , <length-percentage>? )",
            "type": "function"
          },
          {
            "name": "translateX()",
            "value": "translateX( <length-percentage> )",
            "type": "function"
          },
          {
            "name": "translateY()",
            "value": "translateY( <length-percentage> )",
            "type": "function"
          },
          {
            "name": "scale()",
            "value": "scale( <number> , <number>? )",
            "type": "function"
          },
          {
            "name": "scaleX()",
            "value": "scaleX( <number> )",
            "type": "function"
          },
          {
            "name": "scaleY()",
            "value": "scaleY( <number> )",
            "type": "function"
          },
          {
            "name": "rotate()",
            "value": "rotate( [ <angle> | <zero> ] )",
            "type": "function"
          },
          {
            "name": "skew()",
            "value": "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )",
            "type": "function"
          },
          {
            "name": "skewX()",
            "value": "skewX( [ <angle> | <zero> ] )",
            "type": "function"
          },
          {
            "name": "skewY()",
            "value": "skewY( [ <angle> | <zero> ] )",
            "type": "function"
          }
        ],
        "styleDeclaration": [
          "transform"
        ]
      },
      {
        "name": "transform-origin",
        "value": "[ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] <length>? | [[ center | left | right ] && [ center | top | bottom ]] <length>?",
        "initial": "50% 50%",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "refer to the size of reference box",
        "computedValue": "see background-position",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "top",
            "prose": "Computes to 0% for the vertical position.",
            "type": "value",
            "value": "top"
          },
          {
            "name": "right",
            "prose": "Computes to 100% for the horizontal position.",
            "type": "value",
            "value": "right"
          },
          {
            "name": "bottom",
            "prose": "Computes to 100% for the vertical position.",
            "type": "value",
            "value": "bottom"
          },
          {
            "name": "left",
            "prose": "Computes to 0% for the horizontal position.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "center",
            "prose": "Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.",
            "type": "value",
            "value": "center"
          }
        ],
        "styleDeclaration": [
          "transform-origin",
          "transformOrigin"
        ]
      },
      {
        "name": "transform-box",
        "value": "content-box | border-box | fill-box | stroke-box | view-box",
        "initial": "view-box",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "content-box",
            "prose": "Uses the content box as reference box. The reference box of a table is the border box of its table wrapper box, not its table box.",
            "type": "value",
            "value": "content-box"
          },
          {
            "name": "border-box",
            "prose": "Uses the border box as reference box. The reference box of a table is the border box of its table wrapper box, not its table box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "fill-box",
            "prose": "Uses the object bounding box as reference box.",
            "type": "value",
            "value": "fill-box"
          },
          {
            "name": "stroke-box",
            "prose": "Uses the stroke bounding box as reference box.",
            "type": "value",
            "value": "stroke-box"
          },
          {
            "name": "view-box",
            "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
            "type": "value",
            "value": "view-box"
          }
        ],
        "styleDeclaration": [
          "transform-box",
          "transformBox"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<transform-list>",
        "type": "type",
        "value": "<transform-function>+"
      },
      {
        "name": "<transform-function>",
        "prose": "The value of the transform property is a list of <transform-function>. The set of allowed transform functions is given below. In the following functions, a <zero> behaves the same as 0deg (\"unitless 0\" angles are preserved for legacy compat). A percentage for horizontal translations is relative to the width of the reference box. A percentage for vertical translations is relative to the height of the reference box.",
        "type": "type"
      }
    ]
  },
  "css-transitions": {
    "spec": {
      "title": "CSS Transitions",
      "url": "https://drafts.csswg.org/css-transitions-1/"
    },
    "properties": [
      {
        "name": "transition-property",
        "value": "none | <single-transition-property>#",
        "initial": "all",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "the keyword none else a list of identifiers",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "none",
            "prose": "A value of none means that no property will transition. Otherwise, a list of properties to be transitioned, or the keyword all which indicates that all properties are to be transitioned, is given.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "all",
            "prose": "A value of none means that no property will transition. Otherwise, a list of properties to be transitioned, or the keyword all which indicates that all properties are to be transitioned, is given.",
            "type": "value",
            "value": "all"
          }
        ],
        "styleDeclaration": [
          "transition-property",
          "transitionProperty"
        ]
      },
      {
        "name": "transition-duration",
        "value": "<time [0s,∞]>#",
        "initial": "0s",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a duration",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "transition-duration",
          "transitionDuration"
        ]
      },
      {
        "name": "transition-timing-function",
        "value": "<easing-function>#",
        "initial": "ease",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "transition-timing-function",
          "transitionTimingFunction"
        ]
      },
      {
        "name": "transition-delay",
        "value": "<time>#",
        "initial": "0s",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "list, each item a duration",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "transition-delay",
          "transitionDelay"
        ]
      },
      {
        "name": "transition",
        "value": "<single-transition>#",
        "initial": "see individual properties",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "animationType": "not animatable",
        "styleDeclaration": [
          "transition"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<single-transition-property>",
        "value": "all | <custom-ident>",
        "type": "type"
      },
      {
        "name": "<single-transition>",
        "value": "[ none | <single-transition-property> ] || <time> || <easing-function> || <time>",
        "type": "type"
      }
    ]
  },
  "css-ui": {
    "spec": {
      "title": "CSS Basic User Interface Module Level 4",
      "url": "https://drafts.csswg.org/css-ui-4/"
    },
    "properties": [
      {
        "name": "outline",
        "value": "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
        "initial": "see individual properties",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "outline"
        ]
      },
      {
        "name": "outline-width",
        "value": "<line-width>",
        "initial": "medium",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length; 0 if the outline style is none.",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "outline-width",
          "outlineWidth"
        ]
      },
      {
        "name": "outline-style",
        "value": "auto | <outline-line-style>",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "outline-style",
          "outlineStyle"
        ]
      },
      {
        "name": "outline-color",
        "value": "[ <color> | <image-1D> ] | invert",
        "initial": "invert",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "The computed value for invert is invert. For <color> values, see CSS Color 4 § 14. Resolving <color> Values in [CSS-COLOR-4]. For <image-1D> values, see CSS Images 4 § 4 1D Image Values: the <image-1D> type and stripes() notation in [CSS-IMAGES-4].",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "invert",
            "prose": "The outline-color property accepts all values of <border-color>, as well as the keyword invert. invert is expected to perform a color inversion on the pixels on the screen. This is a common trick to ensure the focus border is visible, regardless of color background.",
            "type": "value",
            "value": "invert"
          }
        ],
        "styleDeclaration": [
          "outline-color",
          "outlineColor"
        ]
      },
      {
        "name": "outline-offset",
        "value": "<length>",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "absolute length",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "outline-offset",
          "outlineOffset"
        ]
      },
      {
        "name": "resize",
        "value": "none | both | horizontal | vertical | block | inline",
        "initial": "none",
        "appliesTo": "elements that are scroll containers and optionally replaced elements such as images, videos, and iframes",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "resize"
        ]
      },
      {
        "name": "cursor",
        "value": "[ [ <url> | <url-set> ] [<x> <y>]? ]#? [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | grab | grabbing | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out ]",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified, except with any relative URLs converted to absolute",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "<url-set>",
            "prose": "<url-set> is a limited version of image-set(), where only <url> and <url-set> can be used in the part of the <image-set-option> sub-production which would normally allow <image>.",
            "type": "type"
          },
          {
            "name": "auto",
            "prose": "The UA determines the cursor to display based on the current context. Specifically, auto behaves as text over selectable text or editable elements, and default otherwise.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "default",
            "prose": "The platform-dependent default cursor. Often rendered as an arrow.",
            "type": "value",
            "value": "default"
          },
          {
            "name": "none",
            "prose": "No cursor is rendered for the element.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "context-menu",
            "prose": "A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it.",
            "type": "value",
            "value": "context-menu"
          },
          {
            "name": "help",
            "prose": "Help is available for the object under the cursor. Often rendered as a question mark or a balloon.",
            "type": "value",
            "value": "help"
          },
          {
            "name": "pointer",
            "prose": "The cursor is a pointer that indicates a link. Often rendered as the backside of a hand with the index finger extended. Unless otherwise specified, UAs must apply cursor: pointer to hyperlinks for all supported document formats via the UA stylesheet, using a normal (i.e. not !important) declaration. Authors should use pointer on links and may use on other interactive elements.",
            "type": "value",
            "value": "pointer"
          },
          {
            "name": "progress",
            "prose": "A progress indicator. The program is performing some processing, but is different from wait in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",
            "type": "value",
            "value": "progress"
          },
          {
            "name": "wait",
            "prose": "Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass.",
            "type": "value",
            "value": "wait"
          },
          {
            "name": "cell",
            "prose": "Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.",
            "type": "value",
            "value": "cell"
          },
          {
            "name": "crosshair",
            "prose": "A simple crosshair (e.g., short line segments resembling a \"+\" sign). Often used to indicate a two dimensional bitmap selection mode.",
            "type": "value",
            "value": "crosshair"
          },
          {
            "name": "text",
            "prose": "Indicates text that may be selected. Often rendered as an I-beam. User agents must automatically display a vertical I-beam/cursor over elements with a horizontal writing mode, and a horizontal I-beam/cursor (e.g. same as the vertical-text keyword) over elements in a vertical writing mode. Additionally, user agents may take transforms (see [CSS-TRANSFORMS-1]) or other visual effects such as text on a path (See SVG 2 § 11.8 Text on a path), when choosing between the horizontal or vertical text cursor, and may display any angle of I-beam/cursor for text that is rendered at any particular angle.",
            "type": "value",
            "value": "text"
          },
          {
            "name": "vertical-text",
            "prose": "Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.",
            "type": "value",
            "value": "vertical-text"
          },
          {
            "name": "alias",
            "prose": "Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it.",
            "type": "value",
            "value": "alias"
          },
          {
            "name": "copy",
            "prose": "Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it.",
            "type": "value",
            "value": "copy"
          },
          {
            "name": "move",
            "prose": "Indicates something is to be moved.",
            "type": "value",
            "value": "move"
          },
          {
            "name": "no-drop",
            "prose": "Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it.",
            "type": "value",
            "value": "no-drop"
          },
          {
            "name": "not-allowed",
            "prose": "Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it.",
            "type": "value",
            "value": "not-allowed"
          },
          {
            "name": "grab",
            "prose": "Indicates that something can be grabbed (dragged to be moved). Often rendered as the backside of an open hand.",
            "type": "value",
            "value": "grab"
          },
          {
            "name": "grabbing",
            "prose": "Indicates that something is being grabbed (dragged to be moved). Often rendered as the backside of a hand with fingers closed mostly out of view.",
            "type": "value",
            "value": "grabbing"
          },
          {
            "name": "e-resize",
            "type": "value",
            "value": "e-resize"
          },
          {
            "name": "n-resize",
            "type": "value",
            "value": "n-resize"
          },
          {
            "name": "ne-resize",
            "type": "value",
            "value": "ne-resize"
          },
          {
            "name": "nw-resize",
            "type": "value",
            "value": "nw-resize"
          },
          {
            "name": "s-resize",
            "type": "value",
            "value": "s-resize"
          },
          {
            "name": "se-resize",
            "type": "value",
            "value": "se-resize"
          },
          {
            "name": "sw-resize",
            "type": "value",
            "value": "sw-resize"
          },
          {
            "name": "w-resize",
            "type": "value",
            "value": "w-resize"
          },
          {
            "name": "ew-resize",
            "type": "value",
            "value": "ew-resize"
          },
          {
            "name": "ns-resize",
            "type": "value",
            "value": "ns-resize"
          },
          {
            "name": "nesw-resize",
            "type": "value",
            "value": "nesw-resize"
          },
          {
            "name": "nwse-resize",
            "type": "value",
            "value": "nwse-resize"
          },
          {
            "name": "col-resize",
            "prose": "Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.",
            "type": "value",
            "value": "col-resize"
          },
          {
            "name": "row-resize",
            "prose": "Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.",
            "type": "value",
            "value": "row-resize"
          },
          {
            "name": "all-scroll",
            "prose": "Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle.",
            "type": "value",
            "value": "all-scroll"
          },
          {
            "name": "zoom-in",
            "type": "value",
            "value": "zoom-in"
          },
          {
            "name": "zoom-out",
            "type": "value",
            "value": "zoom-out"
          }
        ],
        "styleDeclaration": [
          "cursor"
        ]
      },
      {
        "name": "caret-color",
        "value": "auto | <color>",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "The computed value for auto is auto. For <color> values, see [[!CSS-COLOR-4#resolving-color-values]] in [CSS-COLOR-4].",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "styleDeclaration": [
          "caret-color",
          "caretColor"
        ]
      },
      {
        "name": "caret-shape",
        "value": "auto | bar | block | underscore",
        "initial": "auto",
        "appliesTo": "elements that accept input",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "values": [
          {
            "name": "auto",
            "prose": "The UA determines the shape of the caret. It should match platform conventions, and may be adjusted based on context. For example, if a UA switches between insert mode and overtype mode when the user presses the insert key on their keyboard, it may show a bar caret in insert mode, and a block caret in overtype mode.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "bar",
            "prose": "The UA must render the text insertion caret as a thin bar placed at the insertion point. This means it is between, before, or after characters, not over them. It should be perpendicular to the inline progression direction, although UAs may render it slanted when inserting italic or oblique text.",
            "type": "value",
            "value": "bar"
          },
          {
            "name": "block",
            "prose": "The UA must render the text insertion caret as a rectangle overlapping the next visible character following the insertion point. If there is no visible character after the insertion point, the UA must render the caret after the last visible character. UAs may render it as a slanted rectangle when inserting italic or oblique text.",
            "type": "value",
            "value": "block"
          },
          {
            "name": "underscore",
            "prose": "The UA must render the text insertion caret as a thin line under (as defined in [CSS-WRITING-MODES-3] the next visible character following the insertion point. If there is no visible character after the insertion point, the UA must render the caret after the last visible character.",
            "type": "value",
            "value": "underscore"
          }
        ],
        "styleDeclaration": [
          "caret-shape",
          "caretShape"
        ]
      },
      {
        "name": "caret",
        "value": "<'caret-color'> || <'caret-shape'>",
        "initial": "auto",
        "appliesTo": "elements that accept input",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "caret"
        ]
      },
      {
        "name": "nav-up",
        "value": "auto | <id> [ current | root | <target-name> ]?",
        "initial": "auto",
        "appliesTo": "all enabled elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "nav-up",
          "navUp"
        ]
      },
      {
        "name": "nav-right",
        "value": "auto | <id> [ current | root | <target-name> ]?",
        "initial": "auto",
        "appliesTo": "all enabled elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "nav-right",
          "navRight"
        ]
      },
      {
        "name": "nav-down",
        "value": "auto | <id> [ current | root | <target-name> ]?",
        "initial": "auto",
        "appliesTo": "all enabled elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "nav-down",
          "navDown"
        ]
      },
      {
        "name": "nav-left",
        "value": "auto | <id> [ current | root | <target-name> ]?",
        "initial": "auto",
        "appliesTo": "all enabled elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "styleDeclaration": [
          "nav-left",
          "navLeft"
        ]
      },
      {
        "name": "user-select",
        "value": "auto | text | none | contain | all",
        "initial": "auto",
        "appliesTo": "all elements, and optionally to the ::before and ::after pseudo-elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "auto",
            "prose": "The used value of auto is determined as follows: On the ::before and ::after pseudo-elements, the used value is none If the element is an editable element, the used value is contain Otherwise, if the used value of user-select on the parent of this element is all, the used value is all Otherwise, if the used value of user-select on the parent of this element is none, the used value is none Otherwise, the used value is text",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "text",
            "prose": "The element imposes no constraint on the selection.",
            "type": "value",
            "value": "text"
          },
          {
            "name": "none",
            "prose": "The UA must not allow selections to be started in this element. A selection started outside of this element must not end in this element. If the user attempts to create such a selection, the UA must instead end the selection range at the element boundary. However, if this element has descendants on which the used value of user-select is not none, selections that start and end within these descendants are allowed. The UA must allow selections to extend across this element, and must exclude this element from such a selection. An exception is made for UAs which do not support multiple ranges per selection, and they may include this element. If the element has descendants on which the used value of user-select is not none, these descendants must be included in a selection extending across the element. This specification makes no normative requirement about the behavior of the clipboard. however, UAs are encouraged to keep the visual selection consistent with what would get copied to the clipboard when copying. Copying text that does not appear to be selected, or vice versa, is highly confusing to users. Attempting to start a selection in an element where user-select is none, such as by clicking in it or starting a drag in it, must not cause a pre-existing selection to become unselected or to be affected in any way. As user-select is a UI convenience mechanism, not a copy protection mechanism, the UA may provide an alternative way for the user to explicitly select the text even when user-select is none.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "contain",
            "prose": "UAs must not allow a selection which is started in this element to be extended outside of this element. A selection started outside of this element must not end in this element. If the user attempts to create such a selection, the UA must instead end the selection range at the element boundary. The UA must allow selections to extend across this element, and such selections must include the content of the element.",
            "type": "value",
            "value": "contain"
          },
          {
            "name": "all",
            "prose": "The content of the element must be selected atomically: If a selection would contain part of the element, then the selection must contain the entire element including all its descendants. If the element is selected and the used value of user-select on its parent is all, then the parent must be included in the selection, recursively. If this element has descendants on which the used value of user-select is not all and if a selection is entirely contained in these descendants, then the selection is not extended to include this whole element.",
            "type": "value",
            "value": "all"
          }
        ],
        "styleDeclaration": [
          "user-select",
          "userSelect"
        ]
      },
      {
        "name": "accent-color",
        "value": "auto | <color>",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the keyword auto or a computed color",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "Represents a UA-chosen color, which should match the accent color of the platform, if any.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<color>",
            "prose": "Specifies the color to be used as the accent color.",
            "type": "value",
            "value": "<color>"
          }
        ],
        "styleDeclaration": [
          "accent-color",
          "accentColor"
        ]
      },
      {
        "name": "appearance",
        "value": "none | auto | <compat-auto> | <compat-special>",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The element is rendered following the usual rules of CSS. Replaced elements other than widgets are not affected by this and remain replaced elements. Widgets must not have their native appearance, and instead must have their primitive appearance. See § 7.2.2 Effects of appearance on Decorative Aspects of Elements and § 7.2.3 Effects of appearance on Semantic Aspects of Elements for details.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "Elements representing widgets should have the native appearance of that widget, if the properties that disable native appearance for widgets are not in effect. See § 7.2.1 Properties Disabling Native Appearance. The host language is responsible for defining which elements represent which widgets. Elements other than widgets must be rendered as for none.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<compat-auto>",
            "value": "searchfield | textarea | push-button | slider-horizontal | checkbox | radio | square-button | menulist | listbox | meter | progress-bar | button",
            "type": "type"
          },
          {
            "name": "searchfield",
            "type": "value",
            "value": "searchfield"
          },
          {
            "name": "textarea",
            "type": "value",
            "value": "textarea"
          },
          {
            "name": "push-button",
            "type": "value",
            "value": "push-button"
          },
          {
            "name": "slider-horizontal",
            "type": "value",
            "value": "slider-horizontal"
          },
          {
            "name": "checkbox",
            "type": "value",
            "value": "checkbox"
          },
          {
            "name": "radio",
            "type": "value",
            "value": "radio"
          },
          {
            "name": "square-button",
            "type": "value",
            "value": "square-button"
          },
          {
            "name": "menulist",
            "type": "value",
            "value": "menulist"
          },
          {
            "name": "listbox",
            "type": "value",
            "value": "listbox"
          },
          {
            "name": "meter",
            "type": "value",
            "value": "meter"
          },
          {
            "name": "progress-bar",
            "type": "value",
            "value": "progress-bar"
          },
          {
            "name": "button",
            "type": "value",
            "value": "button"
          },
          {
            "name": "<compat-special>",
            "value": "textfield | menulist-button",
            "type": "type"
          },
          {
            "name": "textfield",
            "type": "value",
            "value": "textfield"
          },
          {
            "name": "menulist-button",
            "type": "value",
            "value": "menulist-button"
          }
        ],
        "styleDeclaration": [
          "appearance"
        ]
      },
      {
        "name": "input-security",
        "value": "auto | none",
        "initial": "auto",
        "appliesTo": "sensitive text inputs",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "none",
            "prose": "The UA must not obscure the text in the control, so that it can be read by the user.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "auto",
            "prose": "The UA should obscure the text in the control, so that it cannot be read by the user.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "input-security",
          "inputSecurity"
        ]
      },
      {
        "name": "-webkit-user-select",
        "styleDeclaration": [
          "-webkit-user-select",
          "WebkitUserSelect",
          "webkitUserSelect"
        ]
      },
      {
        "name": "-webkit-appearance",
        "styleDeclaration": [
          "-webkit-appearance",
          "WebkitAppearance",
          "webkitAppearance"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<outline-line-style>",
        "prose": "<outline-line-style> accepts the same values as <line-style> (CSS Backgrounds 3 § 3.2 Line Patterns: the border-style properties) with the same meaning, except that hidden is not a legal outline style. In addition, the outline-style property accepts the value auto. The auto value permits the user agent to render a custom outline style, typically a style which is either a user interface default for the platform, or perhaps a style that is richer than can be described in detail in CSS, e.g. a rounded edge outline with semi-translucent outer pixels that appears to glow. As such, this specification does not define how the outline-color and outline-width are incorporated or used (if at all) when rendering auto style outlines. User agents may treat auto as solid.",
        "type": "type"
      },
      {
        "name": "<id>",
        "prose": "The <id> value is an ID selector [SELECT]. In response to directional navigation input corresponding to the property, the focus is navigated to the first element in tree order matching the selector. If this refers to the currently focused element, the directional navigation input respective to the nav- property is ignored — there is no need to refocus the same element. If no element matches the selector, the user agent automatically determines which element to navigate the focus to. If the focus is navigated to an element that was not otherwise focusable, it becomes focusable only as the result of this directional navigation, and the :focus pseudo-class matches the element while it is focused as such.",
        "type": "type"
      },
      {
        "name": "<target-name>",
        "prose": "The <target-name> parameter indicates the target frame for the focus navigation. It is a <string> and it MUST NOT start with the underscore \"_\" character. Error handling: if it does start with an underscore, \"_parent\" navigates to the parent frame, \"_root\" is treated as root, and other values navigate to a frame by that name if it exists. If the specified target frame does not exist, the parameter will be treated as the keyword current, which means to simply use the frame that the element is in. The keyword root indicates that the user agent should target the full window.",
        "type": "type"
      }
    ]
  },
  "css-values-5": {
    "spec": {
      "title": "CSS Values and Units Module Level 5",
      "url": "https://drafts.csswg.org/css-values-5/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "toggle()",
        "prose": "The toggle() expression allows descendant elements to cycle over a list of values instead of inheriting the same value.",
        "type": "function"
      },
      {
        "name": "<toggle-value>",
        "prose": "where <toggle-value> is any CSS value that is valid where the expression is placed. If any of the values inside are not valid, then the entire toggle() expression is invalid. The toggle() expression may be used as the value of any property, but must be the only component in that property’s value.",
        "type": "type"
      },
      {
        "name": "attr()",
        "prose": "The attr() function substitutes the value of an attribute on an element into a property, similar to how the var() function substitutes a custom property value into a function.",
        "type": "function",
        "value": "attr( <q-name> <attr-type>? , <declaration-value>?)",
        "values": [
          {
            "name": "string",
            "prose": "The substitution value is a CSS string, whose value is the literal value of the attribute. (No CSS parsing or \"cleanup\" of the value is performed.) No value triggers fallback.",
            "type": "value",
            "value": "string"
          },
          {
            "name": "url",
            "prose": "The substitution value is a CSS <url> value, whose url is the literal value of the attribute. (No CSS parsing or \"cleanup\" of the value is performed.) No value triggers fallback.",
            "type": "value",
            "value": "url"
          },
          {
            "name": "ident",
            "prose": "The substitution value is a CSS <custom-ident>, whose value is the literal value of the attribute, with leading and trailing ASCII whitespace stripped. (No CSS parsing of the value is performed.) If the attribute value, after trimming, is the empty string, there is instead no substitution value. If the <custom-ident>’s value is a CSS-wide keyword or default, there is instead no substitution value.",
            "type": "value",
            "value": "ident"
          },
          {
            "name": "color",
            "prose": "Parse a component value from the attribute’s value. If the result is a <hex-color> or a named color ident, the substitution value is that result as a <color>. Otherwise there is no substitution value.",
            "type": "value",
            "value": "color"
          },
          {
            "name": "number",
            "prose": "Parse a component value from the attribute’s value. If the result is a <number-token>, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "number"
          },
          {
            "name": "percentage",
            "prose": "Parse a component value from the attribute’s value. If the result is a <percentage-token>, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "percentage"
          },
          {
            "name": "length",
            "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "length"
          },
          {
            "name": "angle",
            "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "angle"
          },
          {
            "name": "time",
            "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "time"
          },
          {
            "name": "frequency",
            "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "frequency"
          },
          {
            "name": "flex",
            "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "flex"
          },
          {
            "name": "<dimension-unit>",
            "prose": "Parse a component value from the attribute’s value. If the result is a <number-token>, the substitution value is a dimension with the result’s value, and the given unit. Otherwise, there is no substitution value.",
            "type": "value",
            "value": "<dimension-unit>"
          }
        ]
      },
      {
        "name": "<attr-type>",
        "type": "type",
        "value": "string | url | ident | color | number | percentage | length | angle | time | frequency | flex | <dimension-unit>"
      },
      {
        "name": "<dimension-unit>",
        "prose": "The <dimension-unit> production matches a literal \"%\" character (that is, a <delim-token> with a value of \"%\") or an ident whose value is any of the CSS units for <length>, <angle>, <time>, <frequency>, or <flex> values (such as px or ms).",
        "type": "type"
      },
      {
        "name": "random()",
        "prose": "The random() function is a math function that represents a random value between a minimum and maximum value, drawn from a uniform distribution, optionally limiting the possible values to a step between those limits:",
        "type": "function",
        "value": "random( <random-caching-options>? , <calc-sum>, <calc-sum>, [by <calc-sum>]? );"
      },
      {
        "name": "<random-caching-options>",
        "type": "type",
        "value": "<dashed-ident> || per-element"
      },
      {
        "name": "random-item()",
        "prose": "The random-item() function resolves to a random item from among its list of items.",
        "type": "function",
        "value": "random-item( <random-caching-options> ';' <any-value> [ ';' <any-value> ]* )"
      }
    ]
  },
  "css-values": {
    "spec": {
      "title": "CSS Values and Units Module Level 4",
      "url": "https://drafts.csswg.org/css-values-4/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "mix()",
        "prose": "Interpolation of two values can be represented by the mix() functional notation, whose syntax is defined as follows:",
        "type": "function",
        "value": "mix( <percentage> ';' <declaration-value> ';' <declaration-value> )",
        "values": [
          {
            "name": "<percentage>",
            "prose": "Represents the interpolation progress between the two values.",
            "type": "value",
            "value": "<percentage>"
          },
          {
            "name": "<declaration-value>",
            "prose": "The first <declaration-value> represents the value at the “start” (0%) of the interpolation range, interpreted as a value for the property this function is used in. The second <declaration-value> represents the value at the “end” (100%) of the interpolation range, interpreted the same.",
            "type": "value",
            "value": "<declaration-value>"
          }
        ]
      },
      {
        "name": "<ident>",
        "prose": "CSS identifiers, generically denoted by <ident>, consist of a sequence of characters conforming to the <ident-token> grammar. [CSS-SYNTAX-3] Identifiers cannot be quoted; otherwise they would be interpreted as strings. CSS properties accept two classes of identifiers: pre-defined keywords and author-defined identifiers.",
        "type": "type"
      },
      {
        "name": "<custom-ident>",
        "prose": "Some properties accept arbitrary author-defined identifiers as a component value. This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier that would not be misinterpreted as a pre-defined keyword in that property’s value definition. Such identifiers are fully case-sensitive (meaning they’re compared using the \"identical to\" operation), even in the ASCII range (e.g. example and EXAMPLE are two different, unrelated user-defined identifiers).",
        "type": "type"
      },
      {
        "name": "<dashed-ident>",
        "prose": "The <dashed-ident> production is a <custom-ident>, with all the case-sensitivity that implies, with the additional restriction that it must start with two dashes (U+002D HYPHEN-MINUS).",
        "type": "type"
      },
      {
        "name": "<string>",
        "prose": "Strings are denoted by <string>. When written literally, they consist of a sequence of characters delimited by double quotes or single quotes, corresponding to the <string-token> production in the CSS Syntax Module [CSS-SYNTAX-3].",
        "type": "type"
      },
      {
        "name": "url()",
        "prose": "The <url> type, written with the url() and src() functions, represents a URL, which is a pointer to a resource.",
        "type": "function"
      },
      {
        "name": "src()",
        "prose": "The <url> type, written with the url() and src() functions, represents a URL, which is a pointer to a resource.",
        "type": "function"
      },
      {
        "name": "<url>",
        "type": "type",
        "value": "url( <string> <url-modifier>* ) | src( <string> <url-modifier>* )"
      },
      {
        "name": "<url-modifier>",
        "prose": "<url>s support specifying additional <url-modifier>s, which change the meaning or the interpretation of the URL somehow. A <url-modifier> is either an <ident> or a functional notation.",
        "type": "type"
      },
      {
        "name": "<integer>",
        "prose": "Integer values are denoted by <integer>.",
        "type": "type"
      },
      {
        "name": "<number>",
        "prose": "Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.",
        "type": "type"
      },
      {
        "name": "<zero>",
        "prose": "The value <zero> represents a literal number with the value 0. Expressions that merely evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>; only literal <number-token>s do.",
        "type": "type"
      },
      {
        "name": "<dimension>",
        "prose": "The general term dimension refers to a number with a unit attached to it; and is denoted by <dimension>.",
        "type": "type"
      },
      {
        "name": "<percentage>",
        "prose": "Percentage values are denoted by <percentage>, and indicates a value that is some fraction of another reference value.",
        "type": "type"
      },
      {
        "name": "<length-percentage>",
        "value": "[ <length> | <percentage> ]",
        "type": "type"
      },
      {
        "name": "<frequency-percentage>",
        "value": "[ <frequency> | <percentage> ]",
        "type": "type"
      },
      {
        "name": "<angle-percentage>",
        "value": "[ <angle> | <percentage> ]",
        "type": "type"
      },
      {
        "name": "<time-percentage>",
        "value": "[ <time> | <percentage> ]",
        "type": "type"
      },
      {
        "name": "<ratio>",
        "prose": "Ratio values are denoted by <ratio>, and represent the ratio of two numeric values. It most often represents an aspect ratio, relating a width (first) to a height (second).",
        "type": "type",
        "value": "<number [0,∞]> [ / <number [0,∞]> ]?"
      },
      {
        "name": "<length>",
        "prose": "Lengths refer to distance measurements and are denoted by <length> in the property definitions. A length is a dimension.",
        "type": "type",
        "values": [
          {
            "name": "em",
            "prose": "Equal to the computed value of the font-size property of the element on which it is used. The rule: h1 { line-height: 1.2em } means that the line height of h1 elements will be 20% greater than the font size of h1 element. On the other hand: h1 { font-size: 1.2em } means that the font size of h1 elements will be 20% greater than the computed font size inherited by h1 elements.",
            "type": "value",
            "value": "em"
          },
          {
            "name": "rem",
            "prose": "Equal to the computed value of the em unit on the root element.",
            "type": "value",
            "value": "rem"
          },
          {
            "name": "ex",
            "prose": "Equal to the used x-height of the first available font [CSS3-FONTS]. The x-height is so called because it is often equal to the height of the lowercase \"x\". However, an ex is defined even for fonts that do not contain an \"x\". The x-height of a font can be found in different ways. Some fonts contain reliable metrics for the x-height. If reliable font metrics are not available, UAs may determine the x-height from the height of a lowercase glyph. One possible heuristic is to look at how far the glyph for the lowercase \"o\" extends below the baseline, and subtract that value from the top of its bounding box. In the cases where it is impossible or impractical to determine the x-height, a value of 0.5em must be assumed.",
            "type": "value",
            "value": "ex"
          },
          {
            "name": "rex",
            "prose": "Equal to the value of the ex unit on the root element.",
            "type": "value",
            "value": "rex"
          },
          {
            "name": "cap",
            "prose": "Equal to the used cap-height of the first available font [CSS3-FONTS]. The cap-height is so called because it is approximately equal to the height of a capital Latin letter. However, a cap is defined even for fonts that do not contain Latin letters. The cap-height of a font can be found in different ways. Some fonts contain reliable metrics for the cap-height. If reliable font metrics are not available, UAs may determine the cap-height from the height of an uppercase glyph. One possible heuristic is to look at how far the glyph for the uppercase “O” extends below the baseline, and subtract that value from the top of its bounding box. In the cases where it is impossible or impractical to determine the cap-height, the font’s ascent must be used.",
            "type": "value",
            "value": "cap"
          },
          {
            "name": "rcap",
            "prose": "Equal to the value of the cap unit on the root element.",
            "type": "value",
            "value": "rcap"
          },
          {
            "name": "ch",
            "prose": "Represents the typical advance measure of European alphanumeric characters, and measured as the used advance measure of the “0” (ZERO, U+0030) glyph in the font used to render it. (The advance measure of a glyph is its advance width or height, whichever is in the inline axis of the element.) In the cases where it is impossible or impractical to determine the measure of the “0” glyph, it must be assumed to be 0.5em wide by 1em tall. Thus, the ch unit falls back to 0.5em in the general case, and to 1em when it would be typeset upright (i.e. writing-mode is vertical-rl or vertical-lr and text-orientation is upright).",
            "type": "value",
            "value": "ch"
          },
          {
            "name": "rch",
            "prose": "Equal to the value of the ch unit on the root element.",
            "type": "value",
            "value": "rch"
          },
          {
            "name": "ic",
            "prose": "Represents the typical advance measure of CJK letters, and measured as the used advance measure of the “水” (CJK water ideograph, U+6C34) glyph found in the font used to render it. In the cases where it is impossible or impractical to determine the ideographic advance measure, it must be assumed to be 1em.",
            "type": "value",
            "value": "ic"
          },
          {
            "name": "ric",
            "prose": "Equal to the value of the ic unit on the root element.",
            "type": "value",
            "value": "ric"
          },
          {
            "name": "lh",
            "prose": "Equal to the computed value of the line-height property of the element on which it is used, converting normal to an absolute length by using only the metrics of the first available font.",
            "type": "value",
            "value": "lh"
          },
          {
            "name": "rlh",
            "prose": "Equal to the value of the lh unit on the root element.",
            "type": "value",
            "value": "rlh"
          },
          {
            "name": "vw",
            "prose": "Equal to 1% of the width of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively. In the example below, if the width of the viewport is 200mm, the font size of h1 elements will be 16mm (i.e. (8×200mm)/100). h1 { font-size: 8vw }",
            "type": "value",
            "value": "vw"
          },
          {
            "name": "svw",
            "prose": "Equal to 1% of the width of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively. In the example below, if the width of the viewport is 200mm, the font size of h1 elements will be 16mm (i.e. (8×200mm)/100). h1 { font-size: 8vw }",
            "type": "value",
            "value": "svw"
          },
          {
            "name": "lvw",
            "prose": "Equal to 1% of the width of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively. In the example below, if the width of the viewport is 200mm, the font size of h1 elements will be 16mm (i.e. (8×200mm)/100). h1 { font-size: 8vw }",
            "type": "value",
            "value": "lvw"
          },
          {
            "name": "dvw",
            "prose": "Equal to 1% of the width of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively. In the example below, if the width of the viewport is 200mm, the font size of h1 elements will be 16mm (i.e. (8×200mm)/100). h1 { font-size: 8vw }",
            "type": "value",
            "value": "dvw"
          },
          {
            "name": "vh",
            "prose": "Equal to 1% of the height of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively.",
            "type": "value",
            "value": "vh"
          },
          {
            "name": "svh",
            "prose": "Equal to 1% of the height of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively.",
            "type": "value",
            "value": "svh"
          },
          {
            "name": "lvh",
            "prose": "Equal to 1% of the height of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively.",
            "type": "value",
            "value": "lvh"
          },
          {
            "name": "dvh",
            "prose": "Equal to 1% of the height of the UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size, respectively.",
            "type": "value",
            "value": "dvh"
          },
          {
            "name": "vi",
            "prose": "Equal to 1% of the size of the large viewport size, small viewport size, and dynamic viewport size (respectively) in the box’s inline axis.",
            "type": "value",
            "value": "vi"
          },
          {
            "name": "svi",
            "prose": "Equal to 1% of the size of the large viewport size, small viewport size, and dynamic viewport size (respectively) in the box’s inline axis.",
            "type": "value",
            "value": "svi"
          },
          {
            "name": "lvi",
            "prose": "Equal to 1% of the size of the large viewport size, small viewport size, and dynamic viewport size (respectively) in the box’s inline axis.",
            "type": "value",
            "value": "lvi"
          },
          {
            "name": "dvi",
            "prose": "Equal to 1% of the size of the large viewport size, small viewport size, and dynamic viewport size (respectively) in the box’s inline axis.",
            "type": "value",
            "value": "dvi"
          },
          {
            "name": "vb",
            "prose": "Equal to 1% of the size of the initial containing block UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size (respectively) in the box’s block axis.",
            "type": "value",
            "value": "vb"
          },
          {
            "name": "svb",
            "prose": "Equal to 1% of the size of the initial containing block UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size (respectively) in the box’s block axis.",
            "type": "value",
            "value": "svb"
          },
          {
            "name": "lvb",
            "prose": "Equal to 1% of the size of the initial containing block UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size (respectively) in the box’s block axis.",
            "type": "value",
            "value": "lvb"
          },
          {
            "name": "dvb",
            "prose": "Equal to 1% of the size of the initial containing block UA-default viewport size, small viewport size, large viewport size, and dynamic viewport size (respectively) in the box’s block axis.",
            "type": "value",
            "value": "dvb"
          },
          {
            "name": "vmin",
            "prose": "Equal to the smaller of *vw or *vh.",
            "type": "value",
            "value": "vmin"
          },
          {
            "name": "svmin",
            "prose": "Equal to the smaller of *vw or *vh.",
            "type": "value",
            "value": "svmin"
          },
          {
            "name": "lvmin",
            "prose": "Equal to the smaller of *vw or *vh.",
            "type": "value",
            "value": "lvmin"
          },
          {
            "name": "dvmin",
            "prose": "Equal to the smaller of *vw or *vh.",
            "type": "value",
            "value": "dvmin"
          },
          {
            "name": "vmax",
            "prose": "Equal to the larger of *vw or *vh.",
            "type": "value",
            "value": "vmax"
          },
          {
            "name": "svmax",
            "prose": "Equal to the larger of *vw or *vh.",
            "type": "value",
            "value": "svmax"
          },
          {
            "name": "lvmax",
            "prose": "Equal to the larger of *vw or *vh.",
            "type": "value",
            "value": "lvmax"
          },
          {
            "name": "dvmax",
            "prose": "Equal to the larger of *vw or *vh.",
            "type": "value",
            "value": "dvmax"
          },
          {
            "name": "cm",
            "type": "value",
            "value": "cm"
          },
          {
            "name": "mm",
            "type": "value",
            "value": "mm"
          },
          {
            "name": "Q",
            "type": "value",
            "value": "Q"
          },
          {
            "name": "in",
            "type": "value",
            "value": "in"
          },
          {
            "name": "pc",
            "type": "value",
            "value": "pc"
          },
          {
            "name": "pt",
            "type": "value",
            "value": "pt"
          },
          {
            "name": "px",
            "type": "value",
            "value": "px"
          }
        ]
      },
      {
        "name": "<angle>",
        "prose": "Angle values are <dimension>s denoted by <angle>. The angle unit identifiers are:",
        "type": "type",
        "values": [
          {
            "name": "deg",
            "prose": "Degrees. There are 360 degrees in a full circle.",
            "type": "value",
            "value": "deg"
          },
          {
            "name": "grad",
            "prose": "Gradians, also known as \"gons\" or \"grades\". There are 400 gradians in a full circle.",
            "type": "value",
            "value": "grad"
          },
          {
            "name": "rad",
            "prose": "Radians. There are 2π radians in a full circle.",
            "type": "value",
            "value": "rad"
          },
          {
            "name": "turn",
            "prose": "Turns. There is 1 turn in a full circle.",
            "type": "value",
            "value": "turn"
          }
        ]
      },
      {
        "name": "<time>",
        "prose": "Time values are dimensions denoted by <time>. The time unit identifiers are:",
        "type": "type",
        "values": [
          {
            "name": "s",
            "prose": "Seconds.",
            "type": "value",
            "value": "s"
          },
          {
            "name": "ms",
            "prose": "Milliseconds. There are 1000 milliseconds in a second.",
            "type": "value",
            "value": "ms"
          }
        ]
      },
      {
        "name": "<frequency>",
        "prose": "Frequency values are dimensions denoted by <frequency>. The frequency unit identifiers are:",
        "type": "type",
        "values": [
          {
            "name": "Hz",
            "prose": "Hertz. It represents the number of occurrences per second.",
            "type": "value",
            "value": "Hz"
          },
          {
            "name": "kHz",
            "prose": "KiloHertz. A kiloHertz is 1000 Hertz.",
            "type": "value",
            "value": "kHz"
          }
        ]
      },
      {
        "name": "<resolution>",
        "prose": "Resolution units are dimensions denoted by <resolution>. The resolution unit identifiers are:",
        "type": "type",
        "values": [
          {
            "name": "dpi",
            "prose": "Dots per inch.",
            "type": "value",
            "value": "dpi"
          },
          {
            "name": "dpcm",
            "prose": "Dots per centimeter.",
            "type": "value",
            "value": "dpcm"
          },
          {
            "name": "dppx",
            "prose": "Dots per px unit.",
            "type": "value",
            "value": "dppx"
          },
          {
            "name": "x",
            "prose": "Dots per px unit.",
            "type": "value",
            "value": "x"
          }
        ]
      },
      {
        "name": "<position>",
        "prose": "The <position> value specifies the position of a object area (e.g. background image) inside a positioning area (e.g. background positioning area). It is interpreted as specified for background-position. [CSS3-BACKGROUND]",
        "type": "type",
        "value": "[ [ left | center | right ] || [ top | center | bottom ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]? | [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ] ]"
      },
      {
        "name": "calc()",
        "prose": "The calc() function is a math function that allows basic arithmetic to be performed on numerical values, using addition (+), subtraction (-), multiplication (*), division (/), and parentheses.",
        "type": "function",
        "value": "calc( <calc-sum> )",
        "values": [
          {
            "name": "e",
            "prose": "e is the base of the natural logarithm, approximately equal to 2.7182818284590452354.",
            "type": "value",
            "value": "e"
          },
          {
            "name": "pi",
            "prose": "pi is the ratio of a circle’s circumference to its diameter, approximately equal to 3.1415926535897932.",
            "type": "value",
            "value": "pi"
          },
          {
            "name": "infinity",
            "prose": "When a calculation or a subtree of a calculation becomes infinite or NaN, representing it with a numeric value is no longer possible. To aid in serialization of these degenerate values, the additional math constants infinity (with the value +∞), -infinity (with the value −∞), and NaN (with the value NaN) are defined.",
            "type": "value",
            "value": "infinity"
          },
          {
            "name": "-infinity",
            "prose": "When a calculation or a subtree of a calculation becomes infinite or NaN, representing it with a numeric value is no longer possible. To aid in serialization of these degenerate values, the additional math constants infinity (with the value +∞), -infinity (with the value −∞), and NaN (with the value NaN) are defined.",
            "type": "value",
            "value": "-infinity"
          },
          {
            "name": "NaN",
            "prose": "When a calculation or a subtree of a calculation becomes infinite or NaN, representing it with a numeric value is no longer possible. To aid in serialization of these degenerate values, the additional math constants infinity (with the value +∞), -infinity (with the value −∞), and NaN (with the value NaN) are defined.",
            "type": "value",
            "value": "NaN"
          }
        ]
      },
      {
        "name": "min()",
        "prose": "The min() or max() functions contain one or more comma-separated calculations, and represent the smallest (most negative) or largest (most positive) of them, respectively.",
        "type": "function",
        "value": "min( <calc-sum># )"
      },
      {
        "name": "max()",
        "prose": "The min() or max() functions contain one or more comma-separated calculations, and represent the smallest (most negative) or largest (most positive) of them, respectively.",
        "type": "function",
        "value": "max( <calc-sum># )"
      },
      {
        "name": "clamp()",
        "prose": "The clamp() function takes three calculations—a minimum value, a central value, and a maximum value—and represents its central calculation, clamped according to its min and max calculations, favoring the min calculation if it conflicts with the max. (That is, given clamp(MIN, VAL, MAX), it represents exactly the same value as max(MIN, min(VAL, MAX))).",
        "type": "function",
        "value": "clamp( <calc-sum>#{3} )"
      },
      {
        "name": "round()",
        "value": "round( <rounding-strategy>?, <calc-sum>, <calc-sum> )",
        "type": "function"
      },
      {
        "name": "<rounding-strategy>",
        "prose": "If A is exactly equal to an integer multiple of B, round() resolves to A exactly (preserving whether A is 0⁻ or 0⁺, if relevant). Otherwise, there are two integer multiples of B that are potentially \"closest\" to A, lower B which is closer to −∞ and upper B which is closer to +∞. The following <rounding-strategy>s dictate how to choose between them:",
        "type": "type",
        "value": "nearest | up | down | to-zero",
        "values": [
          {
            "name": "nearest",
            "prose": "Choose whichever of lower B and upper B that has the smallest absolute difference from A. If both have an equal difference (A is exactly between the two values), choose upper B.",
            "type": "value",
            "value": "nearest"
          },
          {
            "name": "up",
            "prose": "Choose upper B.",
            "type": "value",
            "value": "up"
          },
          {
            "name": "down",
            "prose": "Choose lower B.",
            "type": "value",
            "value": "down"
          },
          {
            "name": "to-zero",
            "prose": "Choose whichever of lower B and upper B that has the smallest absolute difference from 0.",
            "type": "value",
            "value": "to-zero"
          }
        ]
      },
      {
        "name": "mod()",
        "value": "mod( <calc-sum>, <calc-sum> )",
        "type": "function"
      },
      {
        "name": "rem()",
        "value": "rem( <calc-sum>, <calc-sum> )",
        "type": "function"
      },
      {
        "name": "sin()",
        "value": "sin( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "cos()",
        "value": "cos( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "tan()",
        "value": "tan( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "asin()",
        "value": "asin( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "acos()",
        "value": "acos( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "atan()",
        "value": "atan( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "atan2()",
        "value": "atan2( <calc-sum>, <calc-sum> )",
        "type": "function"
      },
      {
        "name": "pow()",
        "value": "pow( <calc-sum>, <calc-sum> )",
        "type": "function"
      },
      {
        "name": "sqrt()",
        "value": "sqrt( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "hypot()",
        "value": "hypot( <calc-sum># )",
        "type": "function"
      },
      {
        "name": "log()",
        "value": "log( <calc-sum>, <calc-sum>? )",
        "type": "function"
      },
      {
        "name": "exp()",
        "value": "exp( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "abs()",
        "value": "abs( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "sign()",
        "value": "sign( <calc-sum> )",
        "type": "function"
      },
      {
        "name": "<calc-sum>",
        "type": "type",
        "value": "<calc-product> [ [ '+' | '-' ] <calc-product> ]*"
      },
      {
        "name": "<calc-product>",
        "type": "type",
        "value": "<calc-value> [ [ '*' | '/' ] <calc-value> ]*"
      },
      {
        "name": "<calc-value>",
        "type": "type",
        "value": "<number> | <dimension> | <percentage> | <calc-constant> | ( <calc-sum> )"
      },
      {
        "name": "<calc-constant>",
        "type": "type",
        "value": "e | pi | infinity | -infinity | NaN"
      },
      {
        "name": "<quirky-length>",
        "prose": "When CSS is being parsed in quirks mode, <quirky-length> is a type of <length> that is only valid in certain properties:",
        "type": "type"
      }
    ]
  },
  "css-variables": {
    "spec": {
      "title": "CSS Custom Properties for Cascading Variables Module Level 2",
      "url": "https://drafts.csswg.org/css-variables-2/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<custom-property-name>",
        "prose": "A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo. The <custom-property-name> production corresponds to this: it’s defined as any <dashed-ident> (a valid identifier that starts with two dashes), except -- itself, which is reserved for future use by CSS. Custom properties are solely for use by authors and users; CSS will never give them a meaning beyond what is presented here.",
        "type": "type"
      },
      {
        "name": "var()",
        "type": "function",
        "value": "var( <custom-property-name> , <declaration-value>? )"
      }
    ]
  },
  "css-view-transitions": {
    "spec": {
      "title": "CSS View Transitions Module Level 1",
      "url": "https://drafts.csswg.org/css-view-transitions-1/"
    },
    "properties": [
      {
        "name": "view-transition-name",
        "value": "none | <custom-ident>",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "values": [
          {
            "name": "none",
            "prose": "The element will not participate in a view transition.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<custom-ident>",
            "prose": "The element can participate in a view transition, as either an old or new element, with a view transition name equal to the <custom-ident>'s value.",
            "type": "value",
            "value": "<custom-ident>"
          }
        ],
        "styleDeclaration": [
          "view-transition-name",
          "viewTransitionName"
        ]
      }
    ],
    "atrules": [],
    "selectors": [
      {
        "name": "::view-transition",
        "prose": "A tree-abiding pseudo-element that is also a pseudo-element root. Its originating element is the document’s document element. Its containing block is the snapshot root. The following is added to the HTML user agent style sheet: html::view-transition { position: fixed; inset: 0; }"
      },
      {
        "name": "::view-transition-group()",
        "value": "::view-transition-group( <pt-name-selector> )"
      },
      {
        "name": "::view-transition-image-pair()",
        "value": "::view-transition-image-pair( <pt-name-selector> )"
      },
      {
        "name": "::view-transition-old()",
        "value": "::view-transition-old( <pt-name-selector> )"
      },
      {
        "name": "::view-transition-new()",
        "value": "::view-transition-new( <pt-name-selector> )"
      }
    ],
    "values": [
      {
        "name": "<pt-name-selector>",
        "type": "type",
        "value": "'*' | <custom-ident>"
      }
    ]
  },
  "css-will-change": {
    "spec": {
      "title": "CSS Will Change Module Level 1",
      "url": "https://drafts.csswg.org/css-will-change-1/"
    },
    "properties": [
      {
        "name": "will-change",
        "value": "auto | <animateable-feature>#",
        "initial": "auto",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "auto",
            "prose": "Expresses no particular intent; the user agent should apply whatever heuristics and optimizations it normally does.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "scroll-position",
            "prose": "Indicates that the author expects to animate or change the scroll position of the element in the near future. For example, browsers often only render the content in the \"scroll window\" on a scrollable element, and some of the content past that window, balancing memory and time savings from the skipped rendering against making scrolling look nice. A browser might take this value as a signal to expand the range of content around the scroll window that is rendered, so that longer/faster scrolls can be done smoothly.",
            "type": "value",
            "value": "scroll-position"
          },
          {
            "name": "contents",
            "prose": "Indicates that the author expects to animate or change something about the element’s contents in the near future. For example, browsers often “cache” rendering of elements over time, because most things don’t change very often, or only change their position. However, if an element does change its contents continually, producing and maintaining this cache is a waste of time. A browser might take this value as a signal to cache less aggressively on the element, or avoid caching at all and just continually re-render the element from scratch. This value is mostly intended to help browsers optimize JS-based animations of content, which change aspects of an element’s contents many times per second. This kind of optimization, when possible, is already done automatically by browsers when declarative animations are used.",
            "type": "value",
            "value": "contents"
          },
          {
            "name": "<custom-ident>",
            "prose": "If the <custom-ident> is an ASCII case-insensitive match for the name of a built-in CSS property, it indicates that the author expects to animate or change the property with the given name on the element in the near future. If the property given is a shorthand, it indicates the expectation for all the longhands the shorthand expands to. For example, setting will-change: background; is identical to setting will-change: background-image, background-position, ... for all the properties that background expands into. The <custom-ident> production used here excludes the keywords will-change, none, all, auto, scroll-position, and contents, in addition to the keywords normally excluded from <custom-ident>. Specifying a custom property must have no effect, which means that effects that happen through custom properties do not count for the rules below that are conditioned on any non-initial value of a property causing something. For example, browsers often handle elements with transform set to a non-initial value very differently from normal elements, perhaps rendering them to their own “GPU layer” or using other mechanisms to make it easier to quickly make the sort of transformations that transform can produce. A browser might take a value of transform as a signal that it should go ahead and promote the element to its own layer immediately, before the element starts to be transformed, to avoid any delay involved in rerendering the old and new layers. If any non-initial value of a property would create a stacking context on the element, specifying that property in will-change must create a stacking context on the element. If any non-initial value of a property would cause the element to generate a containing block for absolutely positioned elements, specifying that property in will-change must cause the element to generate a containing block for absolutely positioned elements. If any non-initial value of a property would cause the element to generate a containing block for fixed positioned elements, specifying that property in will-change must cause the element to generate a containing block for fixed positioned elements. If any non-initial value of a property would cause rendering differences on the element (such as using a different anti-aliasing strategy for text), the user agent should use that alternate rendering when the property is specified in will-change, to avoid sudden rendering differences when the property is eventually changed. For example, setting opacity to any value other than 1 creates a stacking context on the element. Thus, setting will-change: opacity also creates a stacking context, even if opacity is currently still equal to 1.",
            "type": "value",
            "value": "<custom-ident>"
          }
        ],
        "styleDeclaration": [
          "will-change",
          "willChange"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<animateable-feature>",
        "type": "type",
        "value": "scroll-position | contents | <custom-ident>"
      }
    ]
  },
  "css-writing-modes": {
    "spec": {
      "title": "CSS Writing Modes Level 4",
      "url": "https://drafts.csswg.org/css-writing-modes-4/"
    },
    "properties": [
      {
        "name": "direction",
        "value": "ltr | rtl",
        "initial": "ltr",
        "appliesTo": "all elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "values": [
          {
            "name": "ltr",
            "prose": "This value sets inline base direction (bidi directionality) to line-left-to-line-right.",
            "type": "value",
            "value": "ltr"
          },
          {
            "name": "rtl",
            "prose": "This value sets inline base direction (bidi directionality) to line-right-to-line-left.",
            "type": "value",
            "value": "rtl"
          }
        ],
        "styleDeclaration": [
          "direction"
        ]
      },
      {
        "name": "unicode-bidi",
        "value": "normal | embed | isolate | bidi-override | isolate-override | plaintext",
        "initial": "normal",
        "appliesTo": "all elements, but see prose",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "normal",
            "prose": "The box does not open an additional level of embedding with respect to the bidirectional algorithm. For inline boxes, implicit reordering works across box boundaries.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "embed",
            "prose": "If the box is inline, this value creates a directional embedding by opening an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the direction property. Inside the box, reordering is done implicitly.",
            "type": "value",
            "value": "embed"
          },
          {
            "name": "isolate",
            "prose": "On an inline box, this bidi-isolates its contents. This is similar to a directional embedding (and increases the embedding level accordingly) except that each sequence of inline-level boxes uninterrupted by any block boundary or forced paragraph break is treated as an isolated sequence: the content within the sequence is ordered as if inside an independent paragraph with the base directionality specified by the box’s direction property. for the purpose of bidi resolution in its containing bidi paragraph, the sequence is treated as if it were a single Object Replacement Character (U+FFFC). In effect, neither is the content inside the box bidi-affected by the content surrounding the box, nor is the content surrounding the box bidi-affected by the content or specified directionality of the box. However, forced paragraph breaks within the box still create a corresponding break in the containing paragraph.",
            "type": "value",
            "value": "isolate"
          },
          {
            "name": "bidi-override",
            "prose": "This value puts the box’s immediate inline content in a directional override. For an inline, this means that the box acts like a directional embedding in the bidirectional algorithm, except that reordering within it is strictly in sequence according to the direction property; the implicit part of the bidirectional algorithm is ignored. For a block container, the override is applied to an anonymous inline box that surrounds all of its content.",
            "type": "value",
            "value": "bidi-override"
          },
          {
            "name": "isolate-override",
            "prose": "This combines the isolation behavior of isolate with the directional override behavior of bidi-override: to surrounding content, it is equivalent to isolate, but within the box content is ordered as if bidi-override were specified. It effectively nests a directional override inside an isolated sequence.",
            "type": "value",
            "value": "isolate-override"
          },
          {
            "name": "plaintext",
            "prose": "This value behaves as isolate except that for the purposes of the Unicode bidirectional algorithm, the base directionality of each of the box’s bidi paragraphs (if a block container) or isolated sequences (if an inline) is determined by following the heuristic in rules P2 and P3 of the Unicode bidirectional algorithm (rather than by using the direction property of the box).",
            "type": "value",
            "value": "plaintext"
          }
        ],
        "styleDeclaration": [
          "unicode-bidi",
          "unicodeBidi"
        ]
      },
      {
        "name": "writing-mode",
        "value": "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
        "initial": "horizontal-tb",
        "appliesTo": "All elements except table row groups, table column groups, table rows, table columns, ruby base containers, ruby annotation containers",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "values": [
          {
            "name": "horizontal-tb",
            "prose": "Top-to-bottom block flow direction. Both the writing mode and the typographic mode are horizontal.",
            "type": "value",
            "value": "horizontal-tb"
          },
          {
            "name": "vertical-rl",
            "prose": "Right-to-left block flow direction. Both the writing mode and the typographic mode are vertical.",
            "type": "value",
            "value": "vertical-rl"
          },
          {
            "name": "vertical-lr",
            "prose": "Left-to-right block flow direction. Both the writing mode and the typographic mode are vertical.",
            "type": "value",
            "value": "vertical-lr"
          },
          {
            "name": "sideways-rl",
            "prose": "Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal.",
            "type": "value",
            "value": "sideways-rl"
          },
          {
            "name": "sideways-lr",
            "prose": "Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal.",
            "type": "value",
            "value": "sideways-lr"
          }
        ],
        "styleDeclaration": [
          "writing-mode",
          "writingMode"
        ]
      },
      {
        "name": "text-orientation",
        "value": "mixed | upright | sideways",
        "initial": "mixed",
        "appliesTo": "all elements except table row groups, rows, column groups, and columns",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified value",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "values": [
          {
            "name": "mixed",
            "prose": "Typographic character units from horizontal-only scripts are typeset sideways, i.e. 90° clockwise from their standard orientation in horizontal text. Typographic character units from vertical scripts are typeset with their intrinsic orientation. See Vertical Orientations for further details. This value is typical for layout of dominantly vertical-script text.",
            "type": "value",
            "value": "mixed"
          },
          {
            "name": "upright",
            "prose": "Typographic character units from horizontal-only scripts are typeset upright, i.e. in their standard horizontal orientation. Typographic character units from vertical scripts are typeset with their intrinsic orientation and shaped normally. See Vertical Orientations for further details. This value causes the used value of direction to be ltr, and for the purposes of bidi reordering, causes all characters to be treated as strong LTR.",
            "type": "value",
            "value": "upright"
          },
          {
            "name": "sideways",
            "prose": "Causes all text to be typeset sideways, as if in a horizontal layout, but rotated 90° clockwise.",
            "type": "value",
            "value": "sideways"
          },
          {
            "name": "sideways-right",
            "prose": "UAs may accept sideways-right as a value that computes to sideways if needed for backward compatibility reasons.",
            "type": "value",
            "value": "sideways-right"
          }
        ],
        "styleDeclaration": [
          "text-orientation",
          "textOrientation"
        ]
      },
      {
        "name": "glyph-orientation-vertical",
        "value": "auto | 0deg | 90deg | 0 | 90",
        "initial": "n/a",
        "appliesTo": "n/a",
        "inherited": "n/a",
        "percentages": "n/a",
        "computedValue": "n/a",
        "canonicalOrder": "n/a",
        "animatable": "n/a",
        "styleDeclaration": [
          "glyph-orientation-vertical",
          "glyphOrientationVertical"
        ]
      },
      {
        "name": "text-combine-upright",
        "value": "none | all | [ digits <integer [2,4]>? ]",
        "initial": "none",
        "appliesTo": "inline boxes and text",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword, plus integer if digits",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "values": [
          {
            "name": "none",
            "prose": "No special processing.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "all",
            "prose": "Attempt to typeset horizontally all consecutive typographic character units within the box and text run such that they take up the space of a single typographic character unit within the vertical line box.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "digits <integer [2,4]>?",
            "prose": "Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030–U+0039) that has as many or fewer digits than the specified integer such that it takes up the space of a single typographic character unit within the vertical line box. If the integer is omitted, it computes to 2. Integers outside the range 2-4 are invalid.",
            "type": "value",
            "value": "digits <integer [2,4]>?"
          }
        ],
        "styleDeclaration": [
          "text-combine-upright",
          "textCombineUpright"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "CSS": {
    "spec": {
      "title": "CSS 2",
      "url": "https://drafts.csswg.org/css2/"
    },
    "properties": [
      {
        "name": "z-index",
        "value": "auto | <integer> | inherit",
        "initial": "auto",
        "appliesTo": "positioned elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "values": [
          {
            "name": "auto",
            "prose": "The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element.",
            "type": "value",
            "value": "auto"
          }
        ],
        "styleDeclaration": [
          "z-index",
          "zIndex"
        ]
      },
      {
        "name": "page-break-before",
        "value": "auto | always | avoid | left | right | inherit",
        "initial": "auto",
        "appliesTo": "block-level elements (but see text)",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual, paged",
        "values": [
          {
            "name": "auto",
            "prose": "Neither force nor forbid a page break before (after, inside) the generated box.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "always",
            "prose": "Always force a page break before (after) the generated box.",
            "type": "value",
            "value": "always"
          },
          {
            "name": "avoid",
            "prose": "Avoid a page break before (after, inside) the generated box.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "left",
            "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a left page.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a right page.",
            "type": "value",
            "value": "right"
          }
        ],
        "styleDeclaration": [
          "page-break-before",
          "pageBreakBefore"
        ]
      },
      {
        "name": "page-break-after",
        "value": "auto | always | avoid | left | right | inherit",
        "initial": "auto",
        "appliesTo": "block-level elements (but see text)",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual, paged",
        "values": [
          {
            "name": "auto",
            "prose": "Neither force nor forbid a page break before (after, inside) the generated box.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "always",
            "prose": "Always force a page break before (after) the generated box.",
            "type": "value",
            "value": "always"
          },
          {
            "name": "avoid",
            "prose": "Avoid a page break before (after, inside) the generated box.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "left",
            "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a left page.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a right page.",
            "type": "value",
            "value": "right"
          }
        ],
        "styleDeclaration": [
          "page-break-after",
          "pageBreakAfter"
        ]
      },
      {
        "name": "page-break-inside",
        "value": "avoid | auto | inherit",
        "initial": "auto",
        "appliesTo": "block-level elements (but see text)",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual, paged",
        "values": [
          {
            "name": "auto",
            "prose": "Neither force nor forbid a page break before (after, inside) the generated box.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "always",
            "prose": "Always force a page break before (after) the generated box.",
            "type": "value",
            "value": "always"
          },
          {
            "name": "avoid",
            "prose": "Avoid a page break before (after, inside) the generated box.",
            "type": "value",
            "value": "avoid"
          },
          {
            "name": "left",
            "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a left page.",
            "type": "value",
            "value": "left"
          },
          {
            "name": "right",
            "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a right page.",
            "type": "value",
            "value": "right"
          }
        ],
        "styleDeclaration": [
          "page-break-inside",
          "pageBreakInside"
        ]
      }
    ],
    "atrules": [
      {
        "name": "@import",
        "prose": "The @import rule allows users to import style rules from other style sheets. In CSS 2, any @import rules must precede all other rules (except the @charset rule, if present). See the section on parsing for when user agents must ignore @import rules. The @import keyword must be followed by the URI of the style sheet to include. A string is also allowed; it will be interpreted as if it had url(...) around it.",
        "descriptors": []
      },
      {
        "name": "@media",
        "descriptors": [],
        "values": [
          {
            "name": "all",
            "prose": "Suitable for all devices.",
            "type": "value",
            "value": "all",
            "values": [
              {
                "name": "inherit",
                "type": "value",
                "value": "inherit"
              }
            ]
          },
          {
            "name": "braille",
            "prose": "Intended for braille tactile feedback devices.",
            "type": "value",
            "value": "braille"
          },
          {
            "name": "embossed",
            "prose": "Intended for paged braille printers.",
            "type": "value",
            "value": "embossed"
          },
          {
            "name": "handheld",
            "prose": "Intended for handheld devices (typically small screen, limited bandwidth).",
            "type": "value",
            "value": "handheld"
          },
          {
            "name": "print",
            "prose": "Intended for paged material and for documents viewed on screen in print preview mode. Please consult the section on paged media for information about formatting issues that are specific to paged media.",
            "type": "value",
            "value": "print"
          },
          {
            "name": "projection",
            "prose": "Intended for projected presentations, for example projectors. Please consult the section on paged media for information about formatting issues that are specific to paged media.",
            "type": "value",
            "value": "projection"
          },
          {
            "name": "screen",
            "prose": "Intended primarily for color computer screens.",
            "type": "value",
            "value": "screen"
          },
          {
            "name": "speech",
            "prose": "Intended for speech synthesizers. Note: CSS2 (1998) had a similar media type called aural for this purpose.",
            "type": "value",
            "value": "speech"
          },
          {
            "name": "tty",
            "prose": "Intended for media using a fixed-pitch character grid (such as teletypes, terminals, or portable devices with limited display capabilities). Authors should not use pixel units with the \"tty\" media type.",
            "type": "value",
            "value": "tty"
          },
          {
            "name": "tv",
            "prose": "Intended for television-type devices (low resolution, color, limited-scrollability screens, sound available).",
            "type": "value",
            "value": "tv"
          }
        ]
      },
      {
        "name": "@page",
        "prose": "Authors can specify the margins of a page box inside an @page rule. An @page rule consists of the keyword \"@page\", followed by an optional page selector, followed by a block containing declarations and at-rules. Comments and white space are allowed, but optional, between the @page token and the page selector and between the page selector and the block. The declarations in an @page rule are said to be in the page context.",
        "descriptors": []
      }
    ],
    "selectors": [
      {
        "name": ":lang"
      },
      {
        "name": ":first-line"
      },
      {
        "name": ":first-letter"
      },
      {
        "name": ":before"
      },
      {
        "name": ":after"
      },
      {
        "name": ":left",
        "prose": "All pages are automatically classified by user agents into either the :left or :right pseudo-class. Whether the first page of a document is :left or :right depends on the major writing direction of the root element. For example, the first page of a document with a left-to-right major writing direction would be a :right page, and the first page of a document with a right-to-left major writing direction would be a :left page. To explicitly force a document to begin printing on a left or right page, authors can insert a page break before the first generated box."
      },
      {
        "name": ":right",
        "prose": "All pages are automatically classified by user agents into either the :left or :right pseudo-class. Whether the first page of a document is :left or :right depends on the major writing direction of the root element. For example, the first page of a document with a left-to-right major writing direction would be a :right page, and the first page of a document with a right-to-left major writing direction would be a :left page. To explicitly force a document to begin printing on a left or right page, authors can insert a page break before the first generated box."
      },
      {
        "name": ":first",
        "prose": "Authors may also specify style for the first page of a document with the :first pseudo-class:"
      }
    ],
    "values": [
      {
        "name": "<identifier>",
        "type": "type"
      },
      {
        "name": "<uri>",
        "prose": "URI values (Uniform Resource Identifiers, see [RFC3986], which includes URLs, URNs, etc) in this specification are denoted by <uri>. The functional notation used to designate URIs in property values is \"url()\", as in:",
        "type": "type"
      },
      {
        "name": "<margin-width>",
        "prose": "The properties defined in this section refer to the <margin-width> value type, which may take one of the following values:",
        "type": "type"
      },
      {
        "name": "<padding-width>",
        "prose": "The properties defined in this section refer to the <padding-width> value type, which may take one of the following values:",
        "type": "type",
        "values": [
          {
            "name": "<length>",
            "prose": "Specifies a fixed width.",
            "type": "value",
            "value": "<length>"
          },
          {
            "name": "<percentage>",
            "prose": "The percentage is calculated with respect to the width of the generated box’s containing block, even for padding-top and padding-bottom. If the containing block’s width depends on this element, then the resulting layout is undefined in CSS 2.",
            "type": "value",
            "value": "<percentage>"
          }
        ]
      },
      {
        "name": "<border-width>",
        "prose": "The border width properties specify the width of the border area. The properties defined in this section refer to the <border-width> value type, which may take one of the following values:",
        "type": "type",
        "values": [
          {
            "name": "thin",
            "prose": "A thin border.",
            "type": "value",
            "value": "thin"
          },
          {
            "name": "medium",
            "prose": "A medium border.",
            "type": "value",
            "value": "medium"
          },
          {
            "name": "thick",
            "prose": "A thick border.",
            "type": "value",
            "value": "thick"
          },
          {
            "name": "<length>",
            "prose": "The border’s thickness has an explicit value. Explicit border widths cannot be negative.",
            "type": "value",
            "value": "<length>"
          }
        ]
      },
      {
        "name": "<border-style>",
        "prose": "The border style properties specify the line style of a box’s border (solid, double, dashed, etc.). The properties defined in this section refer to the <border-style> value type, which may take one of the following values:",
        "type": "type",
        "values": [
          {
            "name": "none",
            "prose": "No border; the computed border width is zero.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "hidden",
            "prose": "Same as none, except in terms of border conflict resolution for table elements.",
            "type": "value",
            "value": "hidden"
          },
          {
            "name": "dotted",
            "prose": "The border is a series of dots.",
            "type": "value",
            "value": "dotted"
          },
          {
            "name": "dashed",
            "prose": "The border is a series of short line segments.",
            "type": "value",
            "value": "dashed"
          },
          {
            "name": "solid",
            "prose": "The border is a single line segment.",
            "type": "value",
            "value": "solid"
          },
          {
            "name": "double",
            "prose": "The border is two solid lines. The sum of the two lines and the space between them equals the value of border-width.",
            "type": "value",
            "value": "double"
          },
          {
            "name": "groove",
            "prose": "The border looks as though it were carved into the canvas.",
            "type": "value",
            "value": "groove"
          },
          {
            "name": "ridge",
            "prose": "The opposite of groove: the border looks as though it were coming out of the canvas.",
            "type": "value",
            "value": "ridge"
          },
          {
            "name": "inset",
            "prose": "The border makes the box look as though it were embedded in the canvas.",
            "type": "value",
            "value": "inset"
          },
          {
            "name": "outset",
            "prose": "The opposite of inset: the border makes the box look as though it were coming out of the canvas.",
            "type": "value",
            "value": "outset"
          }
        ]
      },
      {
        "name": "<shape>",
        "prose": "In CSS 2, the only valid <shape> value is: rect(<top>, <right>, <bottom>, <left>) where <top> and <bottom> specify offsets from the top border edge of the box, and <right>, and <left> specify offsets from the left border edge of the box. Authors should separate offset values with commas. User agents must support separation with commas, but may also support separation without commas (but not a combination), because a previous revision of this specification was ambiguous in this respect. <top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box). When coordinates are rounded to pixel coordinates, care should be taken that no pixels remain visible when <left> and <right> have the same value (or <top> and <bottom> have the same value), and conversely that no pixels within the element’s border box remain hidden when these values are auto.",
        "type": "type"
      },
      {
        "name": "<top>",
        "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
        "type": "type",
        "values": [
          {
            "name": "auto",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "value",
            "value": "auto"
          }
        ]
      },
      {
        "name": "<right>",
        "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
        "type": "type",
        "values": [
          {
            "name": "auto",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "value",
            "value": "auto"
          }
        ]
      },
      {
        "name": "<bottom>",
        "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
        "type": "type",
        "values": [
          {
            "name": "auto",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "value",
            "value": "auto"
          }
        ]
      },
      {
        "name": "<left>",
        "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
        "type": "type",
        "values": [
          {
            "name": "auto",
            "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
            "type": "value",
            "value": "auto"
          }
        ]
      },
      {
        "name": "<absolute-size>",
        "type": "type"
      },
      {
        "name": "<relative-size>",
        "type": "type"
      }
    ]
  },
  "fill-stroke": {
    "spec": {
      "title": "CSS Fill and Stroke Module Level 3",
      "url": "https://drafts.fxtf.org/fill-stroke-3/"
    },
    "properties": [
      {
        "name": "fill-rule",
        "value": "nonzero | evenodd",
        "initial": "nonzero",
        "appliesTo": "SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "nonzero",
            "prose": "This rule determines the “insideness” of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside. The effect of a nonzero fill rule on paths with self-intersections and enclosed subpaths.",
            "type": "value",
            "value": "nonzero"
          },
          {
            "name": "evenodd",
            "prose": "This rule determines the “insideness” of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside. The effect of an evenodd fill rule on paths with self-intersections and enclosed subpaths.",
            "type": "value",
            "value": "evenodd"
          }
        ],
        "styleDeclaration": [
          "fill-rule",
          "fillRule"
        ]
      },
      {
        "name": "fill-break",
        "value": "bounding-box | slice | clone",
        "initial": "bounding-box",
        "appliesTo": "all elements",
        "inherited": "yes?",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "No",
        "styleDeclaration": [
          "fill-break",
          "fillBreak"
        ]
      },
      {
        "name": "fill-color",
        "value": "<color>",
        "initial": "currentcolor",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the computed color",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as color",
        "styleDeclaration": [
          "fill-color",
          "fillColor"
        ]
      },
      {
        "name": "fill-image",
        "value": "<paint>#",
        "initial": "none",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified, with any <image> computed",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeatable list of images",
        "styleDeclaration": [
          "fill-image",
          "fillImage"
        ]
      },
      {
        "name": "fill-origin",
        "value": "match-parent | fill-box | stroke-box | content-box | padding-box | border-box",
        "initial": "match-parent",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "match-parent",
            "prose": "Use the same fill positioning area as the parent. If it has no parent, use the initial containing block.",
            "type": "value",
            "value": "match-parent"
          },
          {
            "name": "content-box",
            "prose": "Use the box’s own content-box/padding-box/border-box as the fill positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
            "type": "value",
            "value": "content-box"
          },
          {
            "name": "padding-box",
            "prose": "Use the box’s own content-box/padding-box/border-box as the fill positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "border-box",
            "prose": "Use the box’s own content-box/padding-box/border-box as the fill positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "fill-box",
            "prose": "For SVG shapes or SVG text, use the object bounding box of the element. For CSS boxes, use the bounding box of the text glyph outlines of the element and all in-flow or floated descendants.",
            "type": "value",
            "value": "fill-box"
          },
          {
            "name": "stroke-box",
            "prose": "For SVG shapes or SVG text, use the stroke bounding box of the element. For CSS boxes, use the bounding box of the text glyph stroke outlines of the element and all in-flow or floated descendants.",
            "type": "value",
            "value": "stroke-box"
          }
        ],
        "styleDeclaration": [
          "fill-origin",
          "fillOrigin"
        ]
      },
      {
        "name": "fill-position",
        "value": "<position>#",
        "initial": "0% 0%",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "A list, each item consisting of: a pair of offsets (horizontal and vertical) from the top left origin each given as a combination of an absolute length and a percentage",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeatable list of simple list of length, percentage, or calc",
        "styleDeclaration": [
          "fill-position",
          "fillPosition"
        ]
      },
      {
        "name": "fill-size",
        "value": "<bg-size>#",
        "initial": "auto",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified, but with lengths made absolute and omitted auto keywords filled in",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeatable list of simple list of length, percentage, or calc",
        "styleDeclaration": [
          "fill-size",
          "fillSize"
        ]
      },
      {
        "name": "fill-repeat",
        "value": "<repeat-style>#",
        "initial": "repeat",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "A list, each item consisting of: two keywords, one per dimension",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "styleDeclaration": [
          "fill-repeat",
          "fillRepeat"
        ]
      },
      {
        "name": "fill-opacity",
        "value": "<'opacity'>",
        "initial": "1",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the specified value converted to a <number>, clamped to the range [0,1]",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as number",
        "styleDeclaration": [
          "fill-opacity",
          "fillOpacity"
        ]
      },
      {
        "name": "stroke-width",
        "value": "[<length-percentage> | <number>]#",
        "initial": "1px",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "relative to the scaled viewport size",
        "computedValue": "the absolute length, or percentage",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as <length-percentage>",
        "styleDeclaration": [
          "stroke-width",
          "strokeWidth"
        ]
      },
      {
        "name": "stroke-align",
        "value": "center | inset | outset",
        "initial": "center",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "center",
            "prose": "The stroke for each subpath is centered on the outline.",
            "type": "value",
            "value": "center"
          },
          {
            "name": "inset",
            "prose": "The stroke for each subpath lies on the “inside” of the outline (into the fill area). The stroke-linejoin property must be ignored. Why is stroke-linejoin ignored? It’s still needed for interior corners.",
            "type": "value",
            "value": "inset"
          },
          {
            "name": "outset",
            "prose": "The stroke for each subpath lies on the “outside” of the outline (outside the fill area).",
            "type": "value",
            "value": "outset"
          }
        ],
        "styleDeclaration": [
          "stroke-align",
          "strokeAlign"
        ]
      },
      {
        "name": "stroke-linecap",
        "value": "butt | round | square",
        "initial": "butt",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "butt",
            "prose": "The stroke for each subpath does not extend beyond its two endpoints. (A zero length subpath will therefore not have any stroke.)",
            "type": "value",
            "value": "butt"
          },
          {
            "name": "round",
            "prose": "At each end of each subpath, the stroke is extended by a half circle with a radius equal to half the stroke width. (The stroke for a zero-length subpath is a full circle centered at the subpath’s point.)",
            "type": "value",
            "value": "round"
          },
          {
            "name": "square",
            "prose": "At the end of each subpath, the stroke is extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width. (The stroke for a zero-length subpath is a square with side length equal to the stroke width, centered at the subpath’s point, and oriented such that two of its sides are parallel to the effective tangent at that subpath’s point. See § 4.6 Computing the Shape of the Stroke for details on how to determine the tangent at a zero-length subpath.) Adding a rectangle to the end of dashes on a curved outline looks bad. It should just extend the dash by stroke-width/2, following the outline.",
            "type": "value",
            "value": "square"
          }
        ],
        "styleDeclaration": [
          "stroke-linecap",
          "strokeLinecap"
        ]
      },
      {
        "name": "stroke-linejoin",
        "value": "[ crop | arcs | miter ] || [ bevel | round | fallback ]",
        "initial": "miter",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "crop",
            "prose": "The stroke extends the minimal amount past the corner necessary to form a convex corner. This acts identically to miter, but forces stroke-miterlimit to behave as if it had its minimum value of 1.",
            "type": "value",
            "value": "crop"
          },
          {
            "name": "miter",
            "prose": "A sharp corner is used to join path segments. The corner is formed by extending the outer edges of the stroke at the tangents of the path segments until they intersect.",
            "type": "value",
            "value": "miter"
          },
          {
            "name": "arcs",
            "prose": "An arcs corner is used to join path segments. The arcs shape is formed by extending the outer edges of the stroke at the join point with arcs that have the same curvature as the outer edges at the join point.",
            "type": "value",
            "value": "arcs"
          },
          {
            "name": "bevel",
            "prose": "The corner is cropped at the stroke-miterlimit by the perpendicular to its diagonal.",
            "type": "value",
            "value": "bevel"
          },
          {
            "name": "round",
            "prose": "The corner is cropped as for bevel, and a filled arc tangent to the truncated stroke edges is appended to round the corner.",
            "type": "value",
            "value": "round"
          },
          {
            "name": "fallback",
            "prose": "When the stroke-miterlimit is exceeded, this behaves as if crop bevel were specified. Can we just remove fallback? It’s a stupid value, useful only because we didn’t have the clip-at-miterlimit behavior in SVG1. Question is if people are mostly just *accidentally* getting the bevel behavior right now, and would be okay with their joins extending up to the miterlimit and only getting the excess corners clipped, or if they actually wanted the discontinuous behavior currently specified. The breakpoint is between 29 and 30 degrees.",
            "type": "value",
            "value": "fallback"
          }
        ],
        "styleDeclaration": [
          "stroke-linejoin",
          "strokeLinejoin"
        ]
      },
      {
        "name": "stroke-miterlimit",
        "value": "<number>",
        "initial": "4",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "a number",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "<number>",
            "prose": "Specifies the limit on the join’s size as a ratio of its diagonal to the stroke-width. Values less than 1 are invalid (and make the declaration invalid). For a miter linejoin, the length of the diagonal is calculated from the angle between the two segments as stroke-width / sin(θ/2). The linejoin is clipped perpendicular to the line bisecting the angle between the two path segments. For an arcs linejoin, the length of the diagonal is calculated along a circular arc that is tangent to the line bisecting the angle between the two segments at the point the two segments intersect and passes through the end point of the join. The linejoin is clipped perpendicular to this arc.",
            "type": "value",
            "value": "<number>"
          }
        ],
        "styleDeclaration": [
          "stroke-miterlimit",
          "strokeMiterlimit"
        ]
      },
      {
        "name": "stroke-break",
        "value": "bounding-box | slice | clone",
        "initial": "bounding-box",
        "appliesTo": "all elements",
        "inherited": "?",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "No",
        "styleDeclaration": [
          "stroke-break",
          "strokeBreak"
        ]
      },
      {
        "name": "stroke-dasharray",
        "value": "none | [<length-percentage> | <number>]+#",
        "initial": "none",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "relative to the scaled viewport size",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeated list of length, percentage or calc",
        "values": [
          {
            "name": "none",
            "prose": "No dashing: the stroke is drawn continuously.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "<length-percentage>+#",
            "prose": "Specifies a dashing pattern to use. Each <length-percentage> value represents the length of the next dash or gap (beginning with the first dash and alternating from there) of the stroke. The pattern repeats over the length of the stroke. (If the number of values is odd, the pattern behaves as if it was duplicated to yield an even number of values.) The dashing pattern is reset and begins anew at the start of each subpath. Negative values are invalid. If all values are zero, it is treated as none.",
            "type": "value",
            "value": "<length-percentage>+#"
          }
        ],
        "styleDeclaration": [
          "stroke-dasharray",
          "strokeDasharray"
        ]
      },
      {
        "name": "stroke-dashoffset",
        "value": "<length-percentage> | <number>",
        "initial": "0",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "relative to the scaled viewport size",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeated list of integers",
        "styleDeclaration": [
          "stroke-dashoffset",
          "strokeDashoffset"
        ]
      },
      {
        "name": "stroke-dash-corner",
        "value": "none | <length>",
        "initial": "none",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value, with lengths made absolute",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "yes, if <length>",
        "values": [
          {
            "name": "none",
            "prose": "This property has no special effect on dashing: the dashes are positioned/sized continuously along the path.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "stroke-dash-corner",
          "strokeDashCorner"
        ]
      },
      {
        "name": "stroke-dash-justify",
        "value": "none | [ stretch | compress ] || [ dashes || gaps ]",
        "initial": "none",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "specified value, with lengths made absolute",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "none",
            "prose": "No adjustment of the dash pattern is made: it’s clipped at the end of the subpath with however much progress it made to that point.",
            "type": "value",
            "value": "none"
          },
          {
            "name": "stretch",
            "prose": "Indicates that when the dash pattern does not fit into a subpath a whole number times, the dashes or gaps (or both) will be lengthened so that it does.",
            "type": "value",
            "value": "stretch"
          },
          {
            "name": "compress",
            "prose": "Indicates that when the dash pattern does not fit into a subpath a whole number times, the dashes or gaps (or both) will be shortened so that it does.",
            "type": "value",
            "value": "compress"
          },
          {
            "name": "dashes",
            "prose": "Indicates that when a dash pattern is to be stretched or compressed, the length of the dashes will be adjusted.",
            "type": "value",
            "value": "dashes"
          },
          {
            "name": "gaps",
            "prose": "Indicates that when a dash pattern is to be stretched or compressed, the length of the gaps will be adjusted.",
            "type": "value",
            "value": "gaps"
          }
        ],
        "styleDeclaration": [
          "stroke-dash-justify",
          "strokeDashJustify"
        ]
      },
      {
        "name": "stroke-color",
        "value": "<color>#",
        "initial": "transparent",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the computed color",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as color",
        "styleDeclaration": [
          "stroke-color",
          "strokeColor"
        ]
      },
      {
        "name": "stroke-image",
        "value": "<paint>#",
        "initial": "none",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "as specified, with any <image> computed",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeatable list of images",
        "styleDeclaration": [
          "stroke-image",
          "strokeImage"
        ]
      },
      {
        "name": "stroke-origin",
        "value": "match-parent | fill-box | stroke-box | content-box | padding-box | border-box",
        "initial": "match-parent",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "N/A",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "values": [
          {
            "name": "match-parent",
            "prose": "Use the same stroke positioning area as the parent. If it has no parent, use the initial containing block.",
            "type": "value",
            "value": "match-parent"
          },
          {
            "name": "content-box",
            "prose": "Use the box’s own content-box/padding-box/border-box as the stroke positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
            "type": "value",
            "value": "content-box"
          },
          {
            "name": "padding-box",
            "prose": "Use the box’s own content-box/padding-box/border-box as the stroke positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
            "type": "value",
            "value": "padding-box"
          },
          {
            "name": "border-box",
            "prose": "Use the box’s own content-box/padding-box/border-box as the stroke positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
            "type": "value",
            "value": "border-box"
          },
          {
            "name": "fill-box",
            "prose": "For SVG shapes or SVG text, use the object bounding box of the element. For CSS boxes, use the bounding box of the text glyph outlines of the element and all in-flow or floated descendants.",
            "type": "value",
            "value": "fill-box"
          },
          {
            "name": "stroke-box",
            "prose": "For SVG shapes or SVG text, use the stroke bounding box of the element. For CSS boxes, use the bounding box of the text glyph stroke outlines of the element and all in-flow or floated descendants.",
            "type": "value",
            "value": "stroke-box"
          }
        ],
        "styleDeclaration": [
          "stroke-origin",
          "strokeOrigin"
        ]
      },
      {
        "name": "stroke-position",
        "value": "<position>#",
        "initial": "0% 0%",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "A list, each item consisting of: a pair of offsets (horizontal and vertical) from the top left origin each given as a combination of an absolute length and a percentage",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeatable list of simple list of length, percentage, or calc",
        "styleDeclaration": [
          "stroke-position",
          "strokePosition"
        ]
      },
      {
        "name": "stroke-size",
        "value": "<bg-size>#",
        "initial": "auto",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified, but with lengths made absolute and omitted auto keywords filled in",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as repeatable list of simple list of length, percentage, or calc",
        "styleDeclaration": [
          "stroke-size",
          "strokeSize"
        ]
      },
      {
        "name": "stroke-repeat",
        "value": "<repeat-style>#",
        "initial": "repeat",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "A list, each item consisting of: two keywords, one per dimension",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "no",
        "styleDeclaration": [
          "stroke-repeat",
          "strokeRepeat"
        ]
      },
      {
        "name": "stroke-opacity",
        "value": "<'opacity'>",
        "initial": "1",
        "appliesTo": "text and SVG shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "computedValue": "the specified value converted to a <number>, clamped to the range [0,1]",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "as number",
        "styleDeclaration": [
          "stroke-opacity",
          "strokeOpacity"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<paint>",
        "type": "type",
        "value": "none | <image> | <svg-paint>",
        "values": [
          {
            "name": "none",
            "prose": "Indicates no paint is applied.",
            "type": "value",
            "value": "none"
          }
        ]
      },
      {
        "name": "<svg-paint>",
        "type": "type",
        "value": "child | child( <integer> )",
        "values": [
          {
            "name": "child",
            "prose": "Refers to the last child paint server element of the element being painted. If there is no such child, behaves as none.",
            "type": "value",
            "value": "child"
          },
          {
            "name": "child()",
            "value": "child()",
            "type": "value"
          }
        ]
      }
    ]
  },
  "filter-effects-2": {
    "spec": {
      "title": "Filter Effects Module Level 2",
      "url": "https://drafts.fxtf.org/filter-effects-2/"
    },
    "properties": [
      {
        "name": "backdrop-filter",
        "value": "none | <filter-value-list>",
        "initial": "none",
        "appliesTo": "All elements. In SVG, it applies to container elements without the defs element and all graphics elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "media": "visual",
        "animatable": "yes",
        "styleDeclaration": [
          "backdrop-filter",
          "backdropFilter"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "filter-effects": {
    "spec": {
      "title": "Filter Effects Module Level 1",
      "url": "https://drafts.fxtf.org/filter-effects-1/"
    },
    "properties": [
      {
        "name": "filter",
        "value": "none | <filter-value-list>",
        "initial": "none",
        "appliesTo": "All elements. In SVG, it applies to container elements without the defs element, all graphics elements and the use element.",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "See prose in Animation of Filters.",
        "media": "visual",
        "values": [
          {
            "name": "<url>",
            "prose": "A filter reference to a filter element. For example url(commonfilters.svg#filter). If the filter references a non-existent object or the referenced object is not a filter element, then the whole filter chain is ignored. No filter is applied to the object.",
            "type": "type"
          },
          {
            "name": "blur()",
            "type": "function",
            "value": "blur( <length>? )"
          },
          {
            "name": "brightness()",
            "type": "function",
            "value": "brightness( [ <number> | <percentage> ]? )"
          },
          {
            "name": "contrast()",
            "type": "function",
            "value": "contrast( [ <number> | <percentage> ]? )"
          },
          {
            "name": "drop-shadow()",
            "type": "function",
            "value": "drop-shadow( [ <color>? && <length>{2,3} ] )"
          },
          {
            "name": "grayscale()",
            "type": "function",
            "value": "grayscale( [ <number> | <percentage> ]? )"
          },
          {
            "name": "hue-rotate()",
            "type": "function",
            "value": "hue-rotate( [ <angle> | <zero> ]? )"
          },
          {
            "name": "invert()",
            "type": "function",
            "value": "invert( [ <number> | <percentage> ]? )"
          },
          {
            "name": "opacity()",
            "type": "function",
            "value": "opacity( [ <number> | <percentage> ]? )"
          },
          {
            "name": "saturate()",
            "type": "function",
            "value": "saturate( [ <number> | <percentage> ]? )"
          },
          {
            "name": "sepia()",
            "type": "function",
            "value": "sepia( [ <number> | <percentage> ]? )"
          }
        ],
        "styleDeclaration": [
          "filter"
        ]
      },
      {
        "name": "flood-color",
        "value": "<color>",
        "initial": "black",
        "appliesTo": "feFlood and feDropShadow elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "styleDeclaration": [
          "flood-color",
          "floodColor"
        ]
      },
      {
        "name": "flood-opacity",
        "value": "<alpha-value>",
        "initial": "1",
        "appliesTo": "feFlood and feDropShadow elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the specified value converted to a number, clamped to the range [0,1]",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "styleDeclaration": [
          "flood-opacity",
          "floodOpacity"
        ]
      },
      {
        "name": "color-interpolation-filters",
        "value": "auto | sRGB | linearRGB",
        "initial": "linearRGB",
        "appliesTo": "All filter primitives",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "discrete",
        "media": "visual",
        "values": [
          {
            "name": "auto",
            "prose": "Indicates that the user agent can choose either the sRGB or linearRGB spaces for filter effects color operations. This option indicates that the author doesn’t require that color operations occur in a particular color space.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "sRGB",
            "prose": "Indicates that filter effects color operations should occur in the gamma-encoded sRGB color space.",
            "type": "value",
            "value": "sRGB"
          },
          {
            "name": "linearRGB",
            "prose": "Indicates that filter effects color operations should occur in the linear-light sRGB color space.",
            "type": "value",
            "value": "linearRGB"
          }
        ],
        "styleDeclaration": [
          "color-interpolation-filters",
          "colorInterpolationFilters"
        ]
      },
      {
        "name": "lighting-color",
        "value": "<color>",
        "initial": "white",
        "appliesTo": "feDiffuseLighting and feSpecularLighting elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "styleDeclaration": [
          "lighting-color",
          "lightingColor"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<filter-value-list>",
        "type": "type",
        "value": "[ <filter-function> | <url> ]+"
      },
      {
        "name": "<filter-function>",
        "type": "type",
        "value": "<blur()> | <brightness()> | <contrast()> | <drop-shadow()> | <grayscale()> | <hue-rotate()> | <invert()> | <opacity()> | <sepia()> | <saturate()>"
      },
      {
        "name": "<number-optional-number>",
        "value": "<number> <number>?",
        "type": "type"
      },
      {
        "name": "filter()",
        "type": "function",
        "value": "filter( [ <image> | <string> ], <filter-value-list> )"
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "<filter-primitive-reference>",
        "type": "type",
        "for": "result"
      }
    ]
  },
  "fullscreen": {
    "spec": {
      "title": "Fullscreen API Standard",
      "url": "https://fullscreen.spec.whatwg.org/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": "::backdrop",
        "prose": "Each element in a top layer has a ::backdrop pseudo-element. This pseudo-element is a box rendered immediately below the element (and above the element before the element in the set, if any), within the same top layer."
      }
    ],
    "values": []
  },
  "html": {
    "spec": {
      "title": "HTML Standard",
      "url": "https://html.spec.whatwg.org/multipage/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<source-size-list>",
        "type": "type",
        "value": "[ <source-size># , ]? <source-size-value>"
      },
      {
        "name": "<source-size>",
        "type": "type",
        "value": "<media-condition> <source-size-value>"
      },
      {
        "name": "<source-size-value>",
        "type": "type",
        "value": "<length>"
      }
    ]
  },
  "mathml-core": {
    "spec": {
      "title": "MathML Core",
      "url": "https://w3c.github.io/mathml-core/"
    },
    "properties": [
      {
        "name": "display",
        "newValues": "<display-outside> || [ <display-inside> | math ]",
        "styleDeclaration": [
          "display"
        ]
      },
      {
        "name": "text-transform",
        "newValues": "math-auto | math-bold | math-italic | math-bold-italic | math-double-struck | math-bold-fraktur | math-script | math-bold-script | math-fraktur | math-sans-serif | math-bold-sans-serif | math-sans-serif-italic | math-sans-serif-bold-italic | math-monospace | math-initial | math-tailed | math-looped | math-stretched",
        "styleDeclaration": [
          "text-transform",
          "textTransform"
        ]
      },
      {
        "name": "math-style",
        "value": "normal | compact",
        "initial": "normal",
        "appliesTo": "All elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "media": "visual",
        "styleDeclaration": [
          "math-style",
          "mathStyle"
        ]
      },
      {
        "name": "math-shift",
        "value": "normal | compact",
        "initial": "normal",
        "appliesTo": "All elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "specified keyword",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "media": "visual",
        "styleDeclaration": [
          "math-shift",
          "mathShift"
        ]
      },
      {
        "name": "math-depth",
        "value": "auto-add | add(<integer>) | <integer>",
        "initial": "0",
        "appliesTo": "All elements",
        "inherited": "yes",
        "percentages": "n/a",
        "computedValue": "an integer, see below",
        "canonicalOrder": "n/a",
        "animationType": "not animatable",
        "media": "visual",
        "styleDeclaration": [
          "math-depth",
          "mathDepth"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "mediaqueries-5": {
    "spec": {
      "title": "Media Queries Level 5",
      "url": "https://drafts.csswg.org/mediaqueries-5/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@custom-media",
        "descriptors": [],
        "value": "@custom-media <extension-name> [ <media-query-list> | true | false ] ;",
        "values": [
          {
            "name": "true",
            "prose": "The <extension-name> can then be used in a media feature. It must be used in a boolean context; using them in a normal or range context is a syntax error. If a <media-query-list> is given, the custom media query evaluates to true if the <media-query-list> it represents evaluates to true, and false otherwise. If true or false is given, the custom media query evaluates to true or false, respectively.",
            "type": "value",
            "value": "true"
          },
          {
            "name": "false",
            "prose": "The <extension-name> can then be used in a media feature. It must be used in a boolean context; using them in a normal or range context is a syntax error. If a <media-query-list> is given, the custom media query evaluates to true if the <media-query-list> it represents evaluates to true, and false otherwise. If true or false is given, the custom media query evaluates to true or false, respectively.",
            "type": "value",
            "value": "false"
          }
        ]
      },
      {
        "name": "@media",
        "descriptors": [
          {
            "name": "width",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "height",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "aspect-ratio",
            "for": "@media",
            "value": "<ratio>",
            "type": "range"
          },
          {
            "name": "orientation",
            "for": "@media",
            "value": "portrait | landscape",
            "type": "discrete",
            "values": [
              {
                "name": "portrait",
                "prose": "The orientation media feature is portrait when the value of the height media feature is greater than or equal to the value of the width media feature.",
                "type": "value",
                "value": "portrait"
              },
              {
                "name": "landscape",
                "prose": "Otherwise orientation is landscape.",
                "type": "value",
                "value": "landscape"
              }
            ]
          },
          {
            "name": "overflow-block",
            "for": "@media",
            "value": "none | scroll | paged",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "There is no affordance for overflow in the block axis; any overflowing content is simply not displayed. Examples: billboards",
                "type": "value",
                "value": "none"
              },
              {
                "name": "scroll",
                "prose": "Overflowing content in the block axis is exposed by allowing users to scroll to it. Examples: computer screens",
                "type": "value",
                "value": "scroll"
              },
              {
                "name": "paged",
                "prose": "Content is broken up into discrete pages; content that overflows one page in the block axis is displayed on the following page. Examples: printers, ebook readers",
                "type": "value",
                "value": "paged"
              }
            ]
          },
          {
            "name": "overflow-inline",
            "for": "@media",
            "value": "none | scroll",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "There is no affordance for overflow in the inline axis; any overflowing content is simply not displayed.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "scroll",
                "prose": "Overflowing content in the inline axis is exposed by allowing users to scroll to it.",
                "type": "value",
                "value": "scroll"
              }
            ]
          },
          {
            "name": "horizontal-viewport-segments",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "vertical-viewport-segments",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "display-mode",
            "for": "@media",
            "value": "fullscreen | standalone | minimal-ui | browser",
            "type": "discrete"
          },
          {
            "name": "resolution",
            "for": "@media",
            "value": "<resolution> | infinite",
            "type": "range",
            "values": [
              {
                "name": "infinite",
                "prose": "For output mediums that have no physical constraints on resolution (such as outputting to vector graphics), this feature must match the infinite value. For the purpose of evaluating this media feature in the range context, infinite must be treated as larger than any possible <resolution>. (That is, a query like (resolution > 1000dpi) will be true for an infinite media.)",
                "type": "value",
                "value": "infinite"
              }
            ]
          },
          {
            "name": "scan",
            "for": "@media",
            "value": "interlace | progressive",
            "type": "discrete",
            "values": [
              {
                "name": "interlace",
                "prose": "CRT and some types of plasma TV screens used “interlaced” rendering, where video frames alternated between specifying only the “even” lines on the screen and only the “odd” lines, exploiting various automatic mental image-correction abilities to produce smooth motion. This allowed them to simulate a higher FPS broadcast at half the bandwidth cost. When displaying on interlaced screens, authors should avoid very fast movement across the screen to avoid “combing”, and should ensure that details on the screen are wider than 1px to avoid “twitter”.",
                "type": "value",
                "value": "interlace"
              },
              {
                "name": "progressive",
                "prose": "A screen using “progressive” rendering displays each screen fully, and needs no special treatment. Most modern screens, and all computer screens, use progressive rendering.",
                "type": "value",
                "value": "progressive"
              }
            ]
          },
          {
            "name": "grid",
            "for": "@media",
            "value": "<mq-boolean>",
            "type": "discrete"
          },
          {
            "name": "update",
            "for": "@media",
            "value": "none | slow | fast",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "Once it has been rendered, the layout can no longer be updated. Example: documents printed on paper.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "slow",
                "prose": "The layout may change dynamically according to the usual rules of CSS, but the output device is not able to render or display changes quickly enough for them to be perceived as a smooth animation. Example: E-ink screens or severely under-powered devices.",
                "type": "value",
                "value": "slow"
              },
              {
                "name": "fast",
                "prose": "The layout may change dynamically according to the usual rules of CSS, and the output device is not unusually constrained in speed, so regularly-updating things like CSS Animations can be used. Example: computer screens.",
                "type": "value",
                "value": "fast"
              }
            ]
          },
          {
            "name": "environment-blending",
            "for": "@media",
            "value": "opaque | additive | subtractive",
            "type": "discrete",
            "values": [
              {
                "name": "opaque",
                "prose": "The document is rendered on an opaque medium, such as a traditional monitor or paper. Black is dark and white is 100% light.",
                "type": "value",
                "value": "opaque"
              },
              {
                "name": "additive",
                "prose": "The display blends the colors of the canvas with the real world using additive mixing. Black is fully transparent and white is 100% light. For example: a head-up display in a car.",
                "type": "value",
                "value": "additive"
              },
              {
                "name": "subtractive",
                "prose": "The display blends the colors of the canvas with the real world using subtractive mixing. White is fully transparent and dark colors have the most contrast. For example: an LCD display embedded in a bathroom mirror.",
                "type": "value",
                "value": "subtractive"
              }
            ]
          },
          {
            "name": "color",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "color-index",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "monochrome",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "color-gamut",
            "for": "@media",
            "value": "srgb | p3 | rec2020",
            "type": "discrete",
            "values": [
              {
                "name": "srgb",
                "prose": "The UA and output device can support approximately the sRGB gamut or more.",
                "type": "value",
                "value": "srgb"
              },
              {
                "name": "p3",
                "prose": "The UA and output device can support approximately the gamut specified by the Display P3 [Display-P3] Color Space or more.",
                "type": "value",
                "value": "p3"
              },
              {
                "name": "rec2020",
                "prose": "The UA and output device can support approximately the gamut specified by the ITU-R Recommendation BT.2020 Color Space or more.",
                "type": "value",
                "value": "rec2020"
              }
            ]
          },
          {
            "name": "dynamic-range",
            "for": "@media",
            "value": "standard | high",
            "type": "discrete",
            "values": [
              {
                "name": "high",
                "prose": "The user agent and the output device fulfill all of the following criteria: they support a high peak brightness they support a high contrast ratio the color depth is greater than 24 bit or 8 bit per color component of RGB",
                "type": "value",
                "value": "high"
              },
              {
                "name": "standard",
                "prose": "This value matches on any visual device, and not on devices lacking visual capabilities.",
                "type": "value",
                "value": "standard"
              }
            ]
          },
          {
            "name": "inverted-colors",
            "for": "@media",
            "value": "none | inverted",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "Colors are displayed normally.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "inverted",
                "prose": "All pixels within the displayed area have been inverted. This value must not match if the user agent has done some kind of content aware inversion such as one that preserves the images (except through its UA style sheet, see below).",
                "type": "value",
                "value": "inverted"
              }
            ]
          },
          {
            "name": "pointer",
            "for": "@media",
            "value": "none | coarse | fine",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "The primary input mechanism of the device does not include a pointing device.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "coarse",
                "prose": "The primary input mechanism of the device includes a pointing device of limited accuracy. Examples include touchscreens and motion-detection sensors (like the Kinect peripheral for the Xbox.)",
                "type": "value",
                "value": "coarse"
              },
              {
                "name": "fine",
                "prose": "The primary input mechanism of the device includes an accurate pointing device. Examples include mice, touchpads, and drawing styluses.",
                "type": "value",
                "value": "fine"
              }
            ]
          },
          {
            "name": "hover",
            "for": "@media",
            "value": "none | hover",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "Indicates that the primary pointing device can’t hover, or that there is no pointing device. Examples include touchscreens and screens that use a basic drawing stylus. Pointing devices that can hover, but for which doing so is inconvenient and not part of the normal way they are used, also match this value. For example, a touchscreen where a long press is treated as hovering would match hover: none.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "hover",
                "prose": "Indicates that the primary pointing device can easily hover over parts of the page. Examples include mice and devices that physically point at the screen, like the Nintendo Wii controller.",
                "type": "value",
                "value": "hover"
              }
            ]
          },
          {
            "name": "any-pointer",
            "for": "@media",
            "value": "none | coarse | fine",
            "type": "discrete"
          },
          {
            "name": "any-hover",
            "for": "@media",
            "value": "none | hover",
            "type": "discrete"
          },
          {
            "name": "nav-controls",
            "for": "@media",
            "value": "none | back",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "The user agent does not have any obviously discoverable navigation controls, and in particular none that cause the user agent to move back one page in the joint session history.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "back",
                "prose": "The user agent provides navigation controls, including at least an obviously discoverable control causing the user agent to move back one page in the joint session history (typically, a “back” button).",
                "type": "value",
                "value": "back"
              }
            ]
          },
          {
            "name": "video-color-gamut",
            "for": "@media",
            "value": "srgb | p3 | rec2020",
            "type": "discrete"
          },
          {
            "name": "video-dynamic-range",
            "for": "@media",
            "value": "standard | high",
            "type": "discrete"
          },
          {
            "name": "scripting",
            "for": "@media",
            "value": "none | initial-only | enabled",
            "type": "discrete",
            "values": [
              {
                "name": "enabled",
                "prose": "Indicates that the user agent supports scripting of the page, and that scripting in the current document is enabled for the lifetime of the document.",
                "type": "value",
                "value": "enabled"
              },
              {
                "name": "initial-only",
                "prose": "Indicates that the user agent supports scripting of the page, and that scripting in the current document is enabled during the initial page load, but is not supported afterwards. Examples are printed pages, or pre-rendering network proxies that render a page on a server and send a nearly-static version of the page to the user. Should there be an explicit minimum threshold to meet before a UA is allowed to claim initial-only? Having one would mean authors would know what they can depend on, and could tailor their scripts accordingly. On the other hand, pinpointing that threshold is difficult: if it is set too low, the scripting facilities that authors can depend on may be to constrained to be practical, even though actual UAs may potentially all support significantly more. But trying to set it higher may cause us to exclude UAs that do support scripting at loading time, but restrict it in some cases based on complex heuristics. For instance, conservative definitions likely include at least running all inline scripts and firing the DOMContentLoaded event. But it does not seem useful for authors to constrain themselves to this if most (or maybe all) initial-only UAs also load external scripts (including async and defer) and fire the load event. On the other hand, requiring external scripts to be loaded and the load event to be fired could exclude UAs like Opera mini, which typically do run them, but may decide not to based on timeouts and other heuristics. [Issue #503]",
                "type": "value",
                "value": "initial-only"
              },
              {
                "name": "none",
                "prose": "Indicates that the user agent will not run scripts for this document; either it doesn’t support a scripting language, or the support isn’t active for the current document.",
                "type": "value",
                "value": "none"
              }
            ]
          },
          {
            "name": "prefers-reduced-motion",
            "for": "@media",
            "value": "no-preference | reduce",
            "type": "discrete",
            "values": [
              {
                "name": "no-preference",
                "prose": "Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.",
                "type": "value",
                "value": "no-preference"
              },
              {
                "name": "reduce",
                "prose": "Indicates that user has notified the system that they prefer an interface that removes or replaces the types of motion-based animation that either trigger discomfort for those with vestibular motion sensitivity, or distraction for those with attention deficits.",
                "type": "value",
                "value": "reduce"
              }
            ]
          },
          {
            "name": "prefers-reduced-transparency",
            "for": "@media",
            "value": "no-preference | reduce",
            "type": "discrete",
            "values": [
              {
                "name": "no-preference",
                "prose": "Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.",
                "type": "value",
                "value": "no-preference"
              },
              {
                "name": "reduce",
                "prose": "Indicates that user has notified the system that they prefer an interface that minimizes the amount of transparent or translucent layer effects.",
                "type": "value",
                "value": "reduce"
              }
            ]
          },
          {
            "name": "prefers-contrast",
            "for": "@media",
            "value": "no-preference | less | more | custom",
            "type": "discrete",
            "values": [
              {
                "name": "no-preference",
                "prose": "Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.",
                "type": "value",
                "value": "no-preference"
              },
              {
                "name": "less",
                "prose": "Indicates that user has notified the system that they prefer an interface that has a lower level of contrast.",
                "type": "value",
                "value": "less"
              },
              {
                "name": "more",
                "prose": "Indicates that user has notified the system that they prefer an interface that has a higher level of contrast.",
                "type": "value",
                "value": "more"
              },
              {
                "name": "custom",
                "prose": "Indicates that the user has indicated wanting a specific set of colors to be used, but the contrast implied by these particular colors is such that neither more nor less match. A user calling for cyan text over a rust background is not—at least in terms of luminosity—expressing a need for particularly high or low contrast, but this is not a lack of a preference either.",
                "type": "value",
                "value": "custom"
              }
            ]
          },
          {
            "name": "forced-colors",
            "for": "@media",
            "value": "none | active",
            "type": "discrete",
            "values": [
              {
                "name": "active",
                "prose": "Indicates that forced colors mode is active: the user agent enforces a user-chosen limited color palette on the page, The UA will provide the color palette to authors through the CSS system color keywords. See CSS Color Adjustment 1 § 3 Forced Color Palettes for details. This does not necessarily indicate a preference for more contrast. The colors have been forcibly adjusted to match the preference of the user, but that preference can be for less or more contrast, or some other arrangement that is neither particularly low or high contrast. In addition to forced-colors: active, the user agent must also match one of prefers-contrast: more or prefers-contrast: less if it can determine that the forced color palette chosen by the user has a particularly high or low contrast, and must make prefers-contrast: custom match otherwise. Similarly, if the forced color palette chosen by the user fits within one of the color schemes described by prefers-color-scheme, the corresponding value must also match.",
                "type": "value",
                "value": "active"
              },
              {
                "name": "none",
                "prose": "Forced colors mode is not active.",
                "type": "value",
                "value": "none"
              }
            ]
          },
          {
            "name": "prefers-color-scheme",
            "for": "@media",
            "value": "light | dark",
            "type": "discrete",
            "values": [
              {
                "name": "light",
                "prose": "Indicates that user has expressed the preference for a page that has a light theme (dark text on light background), or has not expressed an active preference (and thus should receive the \"web default\" of a light theme).",
                "type": "value",
                "value": "light"
              },
              {
                "name": "dark",
                "prose": "Indicates that user has expressed the preference for a page that has a dark theme (light text on dark background).",
                "type": "value",
                "value": "dark"
              }
            ]
          },
          {
            "name": "prefers-reduced-data",
            "for": "@media",
            "value": "no-preference | reduce",
            "type": "discrete",
            "values": [
              {
                "name": "no-preference",
                "prose": "Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.",
                "type": "value",
                "value": "no-preference"
              },
              {
                "name": "reduce",
                "prose": "Indicates that user has expressed the preference for lightweight alternate content.",
                "type": "value",
                "value": "reduce"
              }
            ]
          },
          {
            "name": "device-width",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "device-height",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "device-aspect-ratio",
            "for": "@media",
            "value": "<ratio>",
            "type": "range"
          }
        ],
        "values": [
          {
            "name": "not",
            "prose": "An individual media query can have its result negated by prefixing it with the keyword not. If the media query would normally evaluate to true, prefixing it with not makes it evaluate to false, and vice versa.",
            "type": "value",
            "value": "not"
          },
          {
            "name": "only",
            "prose": "To hide these media queries from legacy user agents, the media query can be prefixed with the keyword only. The only keyword has no effect on the media query’s result, but will cause the media query to be parsed by legacy user agents as specifying the unknown media type “only”, and thus be ignored.",
            "type": "value",
            "value": "only"
          },
          {
            "name": "all",
            "prose": "Matches all devices.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "print",
            "prose": "Matches printers, and devices intended to reproduce a printed display, such as a web browser showing a document in “Print Preview”.",
            "type": "value",
            "value": "print"
          },
          {
            "name": "screen",
            "prose": "Matches all devices that aren’t matched by print.",
            "type": "value",
            "value": "screen"
          },
          {
            "name": "tty",
            "type": "value",
            "value": "tty"
          },
          {
            "name": "tv",
            "type": "value",
            "value": "tv"
          },
          {
            "name": "projection",
            "type": "value",
            "value": "projection"
          },
          {
            "name": "handheld",
            "type": "value",
            "value": "handheld"
          },
          {
            "name": "braille",
            "type": "value",
            "value": "braille"
          },
          {
            "name": "embossed",
            "type": "value",
            "value": "embossed"
          },
          {
            "name": "aural",
            "type": "value",
            "value": "aural"
          },
          {
            "name": "speech",
            "type": "value",
            "value": "speech"
          }
        ]
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<media-query-list>",
        "prose": "To parse a <media-query-list> production, parse a comma-separated list of component values, then parse each entry in the returned list as a <media-query>. Its value is the list of <media-query>s so produced.",
        "type": "type"
      },
      {
        "name": "<media-query>",
        "type": "type",
        "value": "<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?"
      },
      {
        "name": "<media-type>",
        "type": "type",
        "value": "<ident>"
      },
      {
        "name": "<media-condition>",
        "type": "type",
        "value": "<media-not> | <media-in-parens> [ <media-and>* | <media-or>* ]"
      },
      {
        "name": "<media-condition-without-or>",
        "type": "type",
        "value": "<media-not> | <media-in-parens> <media-and>*"
      },
      {
        "name": "<media-not>",
        "type": "type",
        "value": "not <media-in-parens>"
      },
      {
        "name": "<media-and>",
        "type": "type",
        "value": "and <media-in-parens>"
      },
      {
        "name": "<media-or>",
        "type": "type",
        "value": "or <media-in-parens>"
      },
      {
        "name": "<media-in-parens>",
        "type": "type",
        "value": "( <media-condition> ) | <media-feature> | <general-enclosed>"
      },
      {
        "name": "<media-feature>",
        "type": "type",
        "value": "( [ <mf-plain> | <mf-boolean> | <mf-range> ] )"
      },
      {
        "name": "<mf-plain>",
        "type": "type",
        "value": "<mf-name> : <mf-value>"
      },
      {
        "name": "<mf-boolean>",
        "type": "type",
        "value": "<mf-name>"
      },
      {
        "name": "<mf-range>",
        "type": "type",
        "value": "<mf-name> <mf-comparison> <mf-value> | <mf-value> <mf-comparison> <mf-name> | <mf-value> <mf-lt> <mf-name> <mf-lt> <mf-value> | <mf-value> <mf-gt> <mf-name> <mf-gt> <mf-value>"
      },
      {
        "name": "<mf-name>",
        "type": "type",
        "value": "<ident>"
      },
      {
        "name": "<mf-value>",
        "type": "type",
        "value": "<number> | <dimension> | <ident> | <ratio>"
      },
      {
        "name": "<mf-lt>",
        "type": "type",
        "value": "'<' '='?"
      },
      {
        "name": "<mf-gt>",
        "type": "type",
        "value": "'>' '='?"
      },
      {
        "name": "<mf-eq>",
        "type": "type",
        "value": "'='"
      },
      {
        "name": "<mf-comparison>",
        "type": "type",
        "value": "<mf-lt> | <mf-gt> | <mf-eq>"
      },
      {
        "name": "<general-enclosed>",
        "type": "type",
        "value": "[ <function-token> <any-value>? ) ] | [ ( <any-value>? ) ]"
      },
      {
        "name": "<mq-boolean>",
        "prose": "The <mq-boolean> value type is an <integer> with the value 0 or 1. Any other integer value is invalid. Note that -0 is always equivalent to 0 in CSS, and so is also accepted as a valid <mq-boolean> value.",
        "type": "type"
      }
    ]
  },
  "mediaqueries": {
    "spec": {
      "title": "Media Queries Level 4",
      "url": "https://drafts.csswg.org/mediaqueries-4/"
    },
    "properties": [],
    "atrules": [
      {
        "name": "@media",
        "descriptors": [
          {
            "name": "width",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "height",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "aspect-ratio",
            "for": "@media",
            "value": "<ratio>",
            "type": "range"
          },
          {
            "name": "orientation",
            "for": "@media",
            "value": "portrait | landscape",
            "type": "discrete",
            "values": [
              {
                "name": "portrait",
                "prose": "The orientation media feature is portrait when the value of the height media feature is greater than or equal to the value of the width media feature.",
                "type": "value",
                "value": "portrait"
              },
              {
                "name": "landscape",
                "prose": "Otherwise orientation is landscape.",
                "type": "value",
                "value": "landscape"
              }
            ]
          },
          {
            "name": "resolution",
            "for": "@media",
            "value": "<resolution> | infinite",
            "type": "range",
            "values": [
              {
                "name": "infinite",
                "prose": "For output mediums that have no physical constraints on resolution (such as outputting to vector graphics), this feature must match the infinite value. For the purpose of evaluating this media feature in the range context, infinite must be treated as larger than any possible <resolution>. (That is, a query like (resolution > 1000dpi) will be true for an infinite media.)",
                "type": "value",
                "value": "infinite"
              }
            ]
          },
          {
            "name": "scan",
            "for": "@media",
            "value": "interlace | progressive",
            "type": "discrete",
            "values": [
              {
                "name": "interlace",
                "prose": "CRT and some types of plasma TV screens used “interlaced” rendering, where video frames alternated between specifying only the “even” lines on the screen and only the “odd” lines, exploiting various automatic mental image-correction abilities to produce smooth motion. This allowed them to simulate a higher FPS broadcast at half the bandwidth cost. When displaying on interlaced screens, authors should avoid very fast movement across the screen to avoid “combing”, and should ensure that details on the screen are wider than 1px to avoid “twitter”.",
                "type": "value",
                "value": "interlace"
              },
              {
                "name": "progressive",
                "prose": "A screen using “progressive” rendering displays each screen fully, and needs no special treatment. Most modern screens, and all computer screens, use progressive rendering.",
                "type": "value",
                "value": "progressive"
              }
            ]
          },
          {
            "name": "grid",
            "for": "@media",
            "value": "<mq-boolean>",
            "type": "discrete"
          },
          {
            "name": "update",
            "for": "@media",
            "value": "none | slow | fast",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "Once it has been rendered, the layout can no longer be updated. Example: documents printed on paper.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "slow",
                "prose": "The layout may change dynamically according to the usual rules of CSS, but the output device is not able to render or display changes quickly enough for them to be perceived as a smooth animation. Example: E-ink screens or severely under-powered devices.",
                "type": "value",
                "value": "slow"
              },
              {
                "name": "fast",
                "prose": "The layout may change dynamically according to the usual rules of CSS, and the output device is not unusually constrained in speed, so regularly-updating things like CSS Animations can be used. Example: computer screens.",
                "type": "value",
                "value": "fast"
              }
            ]
          },
          {
            "name": "overflow-block",
            "for": "@media",
            "value": "none | scroll | paged",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "There is no affordance for overflow in the block axis; any overflowing content is simply not displayed. Examples: billboards",
                "type": "value",
                "value": "none"
              },
              {
                "name": "scroll",
                "prose": "Overflowing content in the block axis is exposed by allowing users to scroll to it. Examples: computer screens",
                "type": "value",
                "value": "scroll"
              },
              {
                "name": "paged",
                "prose": "Content is broken up into discrete pages; content that overflows one page in the block axis is displayed on the following page. Examples: printers, ebook readers",
                "type": "value",
                "value": "paged"
              }
            ]
          },
          {
            "name": "overflow-inline",
            "for": "@media",
            "value": "none | scroll",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "There is no affordance for overflow in the inline axis; any overflowing content is simply not displayed.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "scroll",
                "prose": "Overflowing content in the inline axis is exposed by allowing users to scroll to it.",
                "type": "value",
                "value": "scroll"
              }
            ]
          },
          {
            "name": "color",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "color-index",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "monochrome",
            "for": "@media",
            "value": "<integer>",
            "type": "range"
          },
          {
            "name": "color-gamut",
            "for": "@media",
            "value": "srgb | p3 | rec2020",
            "type": "discrete",
            "values": [
              {
                "name": "srgb",
                "prose": "The UA and output device can support approximately the sRGB gamut or more.",
                "type": "value",
                "value": "srgb"
              },
              {
                "name": "p3",
                "prose": "The UA and output device can support approximately the gamut specified by the Display P3 [Display-P3] Color Space or more.",
                "type": "value",
                "value": "p3"
              },
              {
                "name": "rec2020",
                "prose": "The UA and output device can support approximately the gamut specified by the ITU-R Recommendation BT.2020 Color Space or more.",
                "type": "value",
                "value": "rec2020"
              }
            ]
          },
          {
            "name": "pointer",
            "for": "@media",
            "value": "none | coarse | fine",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "The primary input mechanism of the device does not include a pointing device.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "coarse",
                "prose": "The primary input mechanism of the device includes a pointing device of limited accuracy. Examples include touchscreens and motion-detection sensors (like the Kinect peripheral for the Xbox.)",
                "type": "value",
                "value": "coarse"
              },
              {
                "name": "fine",
                "prose": "The primary input mechanism of the device includes an accurate pointing device. Examples include mice, touchpads, and drawing styluses.",
                "type": "value",
                "value": "fine"
              }
            ]
          },
          {
            "name": "hover",
            "for": "@media",
            "value": "none | hover",
            "type": "discrete",
            "values": [
              {
                "name": "none",
                "prose": "Indicates that the primary pointing device can’t hover, or that there is no pointing device. Examples include touchscreens and screens that use a basic drawing stylus. Pointing devices that can hover, but for which doing so is inconvenient and not part of the normal way they are used, also match this value. For example, a touchscreen where a long press is treated as hovering would match hover: none.",
                "type": "value",
                "value": "none"
              },
              {
                "name": "hover",
                "prose": "Indicates that the primary pointing device can easily hover over parts of the page. Examples include mice and devices that physically point at the screen, like the Nintendo Wii controller.",
                "type": "value",
                "value": "hover"
              }
            ]
          },
          {
            "name": "any-pointer",
            "for": "@media",
            "value": "none | coarse | fine",
            "type": "discrete"
          },
          {
            "name": "any-hover",
            "for": "@media",
            "value": "none | hover",
            "type": "discrete"
          },
          {
            "name": "device-width",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "device-height",
            "for": "@media",
            "value": "<length>",
            "type": "range"
          },
          {
            "name": "device-aspect-ratio",
            "for": "@media",
            "value": "<ratio>",
            "type": "range"
          }
        ],
        "values": [
          {
            "name": "not",
            "prose": "An individual media query can have its result negated by prefixing it with the keyword not. If the media query would normally evaluate to true, prefixing it with not makes it evaluate to false, and vice versa.",
            "type": "value",
            "value": "not"
          },
          {
            "name": "only",
            "prose": "To hide these media queries from legacy user agents, the media query can be prefixed with the keyword only. The only keyword has no effect on the media query’s result, but will cause the media query to be parsed by legacy user agents as specifying the unknown media type “only”, and thus be ignored.",
            "type": "value",
            "value": "only"
          },
          {
            "name": "all",
            "prose": "Matches all devices.",
            "type": "value",
            "value": "all"
          },
          {
            "name": "print",
            "prose": "Matches printers, and devices intended to reproduce a printed display, such as a web browser showing a document in “Print Preview”.",
            "type": "value",
            "value": "print"
          },
          {
            "name": "screen",
            "prose": "Matches all devices that aren’t matched by print.",
            "type": "value",
            "value": "screen"
          },
          {
            "name": "tty",
            "type": "value",
            "value": "tty"
          },
          {
            "name": "tv",
            "type": "value",
            "value": "tv"
          },
          {
            "name": "projection",
            "type": "value",
            "value": "projection"
          },
          {
            "name": "handheld",
            "type": "value",
            "value": "handheld"
          },
          {
            "name": "braille",
            "type": "value",
            "value": "braille"
          },
          {
            "name": "embossed",
            "type": "value",
            "value": "embossed"
          },
          {
            "name": "aural",
            "type": "value",
            "value": "aural"
          },
          {
            "name": "speech",
            "type": "value",
            "value": "speech"
          }
        ]
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "<media-query-list>",
        "prose": "To parse a <media-query-list> production, parse a comma-separated list of component values, then parse each entry in the returned list as a <media-query>. Its value is the list of <media-query>s so produced.",
        "type": "type"
      },
      {
        "name": "<media-query>",
        "type": "type",
        "value": "<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?"
      },
      {
        "name": "<media-type>",
        "type": "type",
        "value": "<ident>"
      },
      {
        "name": "<media-condition>",
        "type": "type",
        "value": "<media-not> | <media-in-parens> [ <media-and>* | <media-or>* ]"
      },
      {
        "name": "<media-condition-without-or>",
        "type": "type",
        "value": "<media-not> | <media-in-parens> <media-and>*"
      },
      {
        "name": "<media-not>",
        "type": "type",
        "value": "not <media-in-parens>"
      },
      {
        "name": "<media-and>",
        "type": "type",
        "value": "and <media-in-parens>"
      },
      {
        "name": "<media-or>",
        "type": "type",
        "value": "or <media-in-parens>"
      },
      {
        "name": "<media-in-parens>",
        "type": "type",
        "value": "( <media-condition> ) | ( <media-feature> ) | <general-enclosed>"
      },
      {
        "name": "<media-feature>",
        "type": "type",
        "value": "[ <mf-plain> | <mf-boolean> | <mf-range> ]"
      },
      {
        "name": "<mf-plain>",
        "type": "type",
        "value": "<mf-name> : <mf-value>"
      },
      {
        "name": "<mf-boolean>",
        "type": "type",
        "value": "<mf-name>"
      },
      {
        "name": "<mf-range>",
        "type": "type",
        "value": "<mf-name> <mf-comparison> <mf-value> | <mf-value> <mf-comparison> <mf-name> | <mf-value> <mf-lt> <mf-name> <mf-lt> <mf-value> | <mf-value> <mf-gt> <mf-name> <mf-gt> <mf-value>"
      },
      {
        "name": "<mf-name>",
        "type": "type",
        "value": "<ident>"
      },
      {
        "name": "<mf-value>",
        "type": "type",
        "value": "<number> | <dimension> | <ident> | <ratio>"
      },
      {
        "name": "<mf-lt>",
        "type": "type",
        "value": "'<' '='?"
      },
      {
        "name": "<mf-gt>",
        "type": "type",
        "value": "'>' '='?"
      },
      {
        "name": "<mf-eq>",
        "type": "type",
        "value": "'='"
      },
      {
        "name": "<mf-comparison>",
        "type": "type",
        "value": "<mf-lt> | <mf-gt> | <mf-eq>"
      },
      {
        "name": "<general-enclosed>",
        "type": "type",
        "value": "[ <function-token> <any-value>? ) ] | [ ( <any-value>? ) ]"
      },
      {
        "name": "<mq-boolean>",
        "type": "type",
        "value": "<integer [0,1]>"
      }
    ],
    "warnings": [
      {
        "msg": "Duplicate definition",
        "name": "<mq-boolean>",
        "prose": "The <mq-boolean> value type is an <integer> with the value 0 or 1. Any other integer value is invalid. Note that -0 is always equivalent to 0 in CSS, and so is also accepted as a valid <mq-boolean> value.",
        "type": "type"
      }
    ]
  },
  "motion": {
    "spec": {
      "title": "Motion Path Module Level 1",
      "url": "https://drafts.fxtf.org/motion-1/"
    },
    "properties": [
      {
        "name": "offset-path",
        "value": "none | <ray()> | <path()> | <url> | [ <basic-shape> && <coord-box>? ] | <coord-box>",
        "initial": "none",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "as specified",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "values": [
          {
            "name": "none",
            "prose": "No offset path gets created. When offset-path is none, offset-distance and offset-rotate have no effect.",
            "type": "value",
            "value": "none"
          }
        ],
        "styleDeclaration": [
          "offset-path",
          "offsetPath"
        ]
      },
      {
        "name": "offset-distance",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "refer to the total path length",
        "computedValue": "a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "styleDeclaration": [
          "offset-distance",
          "offsetDistance"
        ]
      },
      {
        "name": "offset-position",
        "value": "auto | <position>",
        "initial": "auto",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "Refer to the size of containing block",
        "computedValue": "For <length> the absolute value, otherwise a percentage.",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "values": [
          {
            "name": "auto",
            "prose": "Indicates the initial position is the position of the box specified with position property.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<position>",
            "prose": "Specifies the initial position, with the the containing block as the positioning area and a dimensionless point (zero-sized box) as the object area.",
            "type": "value",
            "value": "<position>"
          }
        ],
        "styleDeclaration": [
          "offset-position",
          "offsetPosition"
        ]
      },
      {
        "name": "offset-anchor",
        "value": "auto | <position>",
        "initial": "auto",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "Relative to the width and the height of a box",
        "computedValue": "For <length> the absolute value, otherwise a percentage.",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "styleDeclaration": [
          "offset-anchor",
          "offsetAnchor"
        ]
      },
      {
        "name": "offset-rotate",
        "value": "[ auto | reverse ] || <angle>",
        "initial": "auto",
        "appliesTo": "transformable elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "computed <angle> value, optionally preceded by auto",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value",
        "media": "visual",
        "values": [
          {
            "name": "auto",
            "prose": "Indicates that the object is rotated (over time if offset-distance is animated) by the angle of the direction (i.e., directional tangent vector) of the offset path, relative to the positive x-axis. If specified in combination with <angle>, the computed value of <angle> is added to the computed value of auto.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "reverse",
            "prose": "Indicates that the object is rotated (over time if offset-distance is animated) by the angle of the direction (i.e., directional tangent vector) of the offset path, relative to the positive x-axis, plus 180 degrees. If specified in combination with <angle>, the computed value of <angle> is added to the computed value of reverse.",
            "type": "value",
            "value": "reverse"
          }
        ],
        "styleDeclaration": [
          "offset-rotate",
          "offsetRotate"
        ]
      },
      {
        "name": "offset",
        "value": "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
        "initial": "see individual properties",
        "appliesTo": "transformable elements",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "offset"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "ray()",
        "type": "function",
        "value": "ray( <angle> && <ray-size> && contain? )",
        "values": [
          {
            "name": "<angle>",
            "prose": "The offset path is a line segment that starts from the initial position and proceeds in the direction defined by the specified <angle>. As with gradient functions, <angle> values are interpreted as bearing angles, with 0deg pointing up and positive angles representing clockwise rotation. This is also the initial direction.",
            "type": "value",
            "value": "<angle>"
          },
          {
            "name": "<ray-size>",
            "prose": "Specifies the length of the offset path (the distance between the offset-distance: 0% and offset-distance: 100% points) relative to the containing box. Individual keywords are:",
            "type": "value",
            "value": "<ray-size>"
          },
          {
            "name": "contain",
            "prose": "The used value of offset-distance is clamped so that the box is entirely contained within the path. If no offset-distance would lead to the box being enclosed by the path, the path size is minimally increased so that such an offset-distance exists. Not clear what this actually means. See Issue 363.",
            "type": "value",
            "value": "contain"
          }
        ]
      },
      {
        "name": "<ray-size>",
        "type": "type",
        "value": "closest-side | closest-corner | farthest-side | farthest-corner | sides",
        "values": [
          {
            "name": "closest-side",
            "prose": "The distance from the initial position to whichever side of the containing block is closest.",
            "type": "value",
            "value": "closest-side"
          },
          {
            "name": "closest-corner",
            "prose": "The distance from the initial position to whichever corner of the containing block is closest.",
            "type": "value",
            "value": "closest-corner"
          },
          {
            "name": "farthest-side",
            "prose": "The distance from the initial position to whichever side of the containing block is farthest.",
            "type": "value",
            "value": "farthest-side"
          },
          {
            "name": "farthest-corner",
            "prose": "The distance from the initial position to whichever corner of the containing block is farthest.",
            "type": "value",
            "value": "farthest-corner"
          },
          {
            "name": "sides",
            "prose": "The distance from the initial position to the point where the offset path intersects the containing block’s boundary. If the initial position is on the containing block’s boundary, or outside its bounds entirely, the distance is zero.",
            "type": "value",
            "value": "sides"
          }
        ]
      }
    ],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "path()",
        "value": "path( <string> )",
        "pureSyntax": true,
        "type": "function",
        "for": "offsetpath-pathfunc"
      }
    ]
  },
  "scroll-animations": {
    "spec": {
      "title": "Scroll-driven Animations",
      "url": "https://drafts.csswg.org/scroll-animations-1/"
    },
    "properties": [
      {
        "name": "scroll-timeline-name",
        "value": "none | <custom-ident>#",
        "initial": "none",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or a list of <custom-ident>s",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "scroll-timeline-name",
          "scrollTimelineName"
        ]
      },
      {
        "name": "scroll-timeline-axis",
        "value": "[ block | inline | vertical | horizontal ]#",
        "initial": "block",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "a list of the keywords specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "block",
            "prose": "Specifies to use the measure of progress along the block axis of the scroll container. (Default.)",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "Specifies to use the measure of progress along the inline axis of the scroll container.",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "vertical",
            "prose": "Specifies to use the measure of progress along the vertical axis of the scroll container.",
            "type": "value",
            "value": "vertical"
          },
          {
            "name": "horizontal",
            "prose": "Specifies to use the measure of progress along the horizontal axis of the scroll container.",
            "type": "value",
            "value": "horizontal"
          },
          {
            "name": "nearest",
            "prose": "Specifies to use the nearest ancestor scroll container. (Default.)",
            "type": "value",
            "value": "nearest"
          },
          {
            "name": "root",
            "prose": "Specifies to use the document viewport as the scroll container.",
            "type": "value",
            "value": "root"
          }
        ],
        "styleDeclaration": [
          "scroll-timeline-axis",
          "scrollTimelineAxis"
        ]
      },
      {
        "name": "scroll-timeline",
        "value": "[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#",
        "initial": "see individual properties",
        "appliesTo": "scroll containers",
        "inherited": "no",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "not animatable",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "scroll-timeline",
          "scrollTimeline"
        ]
      },
      {
        "name": "view-timeline-name",
        "value": "none | <custom-ident>#",
        "initial": "none",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "the keyword none or a list of <custom-ident>s",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "styleDeclaration": [
          "view-timeline-name",
          "viewTimelineName"
        ]
      },
      {
        "name": "view-timeline-axis",
        "value": "[ block | inline | vertical | horizontal ]#",
        "initial": "block",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "n/a",
        "computedValue": "a list of the keywords specified",
        "canonicalOrder": "per grammar",
        "animationType": "not animatable",
        "values": [
          {
            "name": "block",
            "prose": "Specifies to use the measure of progress along the block axis of the scroll container. (Default.)",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "Specifies to use the measure of progress along the inline axis of the scroll container.",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "vertical",
            "prose": "Specifies to use the measure of progress along the vertical axis of the scroll container.",
            "type": "value",
            "value": "vertical"
          },
          {
            "name": "horizontal",
            "prose": "Specifies to use the measure of progress along the horizontal axis of the scroll container.",
            "type": "value",
            "value": "horizontal"
          },
          {
            "name": "nearest",
            "prose": "Specifies to use the nearest ancestor scroll container. (Default.)",
            "type": "value",
            "value": "nearest"
          },
          {
            "name": "root",
            "prose": "Specifies to use the document viewport as the scroll container.",
            "type": "value",
            "value": "root"
          }
        ],
        "styleDeclaration": [
          "view-timeline-axis",
          "viewTimelineAxis"
        ]
      },
      {
        "name": "view-timeline-inset",
        "value": "[ [ auto | <length-percentage> ]{1,2} ]#",
        "initial": "0",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "relative to the corresponding dimension of the relevant scrollport",
        "computedValue": "a list consisting of two-value pairs representing the start and end insets each as either the keyword auto or a computed <length-percentage> value",
        "canonicalOrder": "per grammar",
        "animationType": "by computed value type",
        "values": [
          {
            "name": "auto",
            "prose": "Indicates to use the value of scroll-padding.",
            "type": "value",
            "value": "auto"
          },
          {
            "name": "<length-percentage>",
            "prose": "Like scroll-padding, defines an inward offset from the corresponding edge of the scrollport.",
            "type": "value",
            "value": "<length-percentage>"
          }
        ],
        "styleDeclaration": [
          "view-timeline-inset",
          "viewTimelineInset"
        ]
      },
      {
        "name": "view-timeline",
        "value": "[ <'view-timeline-name'> <'view-timeline-axis'>? ]#",
        "initial": "see individual properties",
        "appliesTo": "all elements",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "view-timeline",
          "viewTimeline"
        ]
      },
      {
        "name": "animation-range",
        "value": "[ <'animation-range-start'> <'animation-range-end'>? | <timeline-range-name> ]#",
        "initial": "see individual properties",
        "appliesTo": "see individual properties",
        "inherited": "see individual properties",
        "percentages": "see individual properties",
        "computedValue": "see individual properties",
        "animationType": "see individual properties",
        "canonicalOrder": "per grammar",
        "styleDeclaration": [
          "animation-range",
          "animationRange"
        ]
      },
      {
        "name": "animation-range-start",
        "value": "[ normal | <timeline-range-name> <percentage> ]#",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "relative to the specified named timeline range",
        "computedValue": "list, each item either the keyword normal or a timeline range and progress percentage",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "values": [
          {
            "name": "normal",
            "prose": "The start of the active phase is determined as normal.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<timeline-range-name> <percentage>",
            "prose": "The active phase starts at the specified point on the timeline, plus any applicable start delay.",
            "type": "value",
            "value": "<timeline-range-name> <percentage>"
          }
        ],
        "styleDeclaration": [
          "animation-range-start",
          "animationRangeStart"
        ]
      },
      {
        "name": "animation-range-end",
        "value": "[ normal | <timeline-range-name> <percentage> ]#",
        "initial": "normal",
        "appliesTo": "all elements",
        "inherited": "no",
        "percentages": "relative to the specified named timeline range",
        "computedValue": "list, each item either the keyword normal or a timeline range and progress percentage",
        "canonicalOrder": "per grammar",
        "animatable": "no",
        "values": [
          {
            "name": "normal",
            "prose": "The end time of the animation is determined as normal.",
            "type": "value",
            "value": "normal"
          },
          {
            "name": "<timeline-range-name> <percentage>",
            "prose": "The end time of the animation is at the specified point on the timeline minus any applicable end delay, or at the end of the animation duration, whichever comes first.",
            "type": "value",
            "value": "<timeline-range-name> <percentage>"
          }
        ],
        "styleDeclaration": [
          "animation-range-end",
          "animationRangeEnd"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "scroll()",
        "prose": "The scroll() functional notation can be used as a <single-animation-timeline> value in animation-timeline and specifies a scroll progress timeline. Its syntax is",
        "type": "function",
        "value": "scroll( [ <scroller> || <axis> ]? )",
        "values": [
          {
            "name": "block",
            "prose": "Specifies to use the measure of progress along the block axis of the scroll container. (Default.)",
            "type": "value",
            "value": "block"
          },
          {
            "name": "inline",
            "prose": "Specifies to use the measure of progress along the inline axis of the scroll container.",
            "type": "value",
            "value": "inline"
          },
          {
            "name": "vertical",
            "prose": "Specifies to use the measure of progress along the vertical axis of the scroll container.",
            "type": "value",
            "value": "vertical"
          },
          {
            "name": "horizontal",
            "prose": "Specifies to use the measure of progress along the horizontal axis of the scroll container.",
            "type": "value",
            "value": "horizontal"
          },
          {
            "name": "nearest",
            "prose": "Specifies to use the nearest ancestor scroll container. (Default.)",
            "type": "value",
            "value": "nearest"
          },
          {
            "name": "root",
            "prose": "Specifies to use the document viewport as the scroll container.",
            "type": "value",
            "value": "root"
          }
        ]
      },
      {
        "name": "<axis>",
        "type": "type",
        "value": "block | inline | vertical | horizontal"
      },
      {
        "name": "<scroller>",
        "type": "type",
        "value": "root | nearest"
      },
      {
        "name": "view()",
        "prose": "The view() functional notation can be used as a <single-animation-timeline> value in animation-timeline and specifies a view progress timeline in reference to the nearest ancestor scroll container. Its syntax is",
        "type": "function",
        "value": "view( [ <axis> || <'view-timeline-inset'> ]? )"
      },
      {
        "name": "<timeline-range-name>",
        "prose": "A named timeline range is a named segment of an animation timeline. The start of the segment is represented as 0% progress through the range; the end of the segment is represented as 100% progress through the range. Multiple named timeline ranges can be attached to a given timeline, and multiple such ranges can overlap. For example, the contain range of a view progress timeline overlaps with its cover range. Named timeline ranges are represented by the <timeline-range-name> value type, which indicates a CSS identifier representing one of the predefined named timeline ranges.",
        "type": "type"
      }
    ],
    "warnings": [
      {
        "msg": "Missing definition",
        "name": "<keyframe-selector>",
        "value": "from | to | <percentage> | <timeline-range-name> <percentage>"
      },
      {
        "msg": "Dangling value",
        "name": "cover",
        "prose": "Represents the full range of the view progress timeline: 0% progress represents the position at which the start border edge of the element’s principal box coincides with the end edge of its view progress visibility range. 100% progress represents the position at which the end border edge of the element’s principal box coincides with the start edge of its view progress visibility range.",
        "type": "value",
        "value": "cover",
        "for": "animation-timeline-range"
      },
      {
        "msg": "Dangling value",
        "name": "contain",
        "prose": "Represents the range during which the principal box is either fully contained by, or fully covers, its view progress visibility range within the scrollport. 0% progress represents the earlier position at which: the start border edge of the element’s principal box coincides with the start edge of its view progress visibility range. the end border edge of the element’s principal box coincides with the end edge of its view progress visibility range. 100% progress represents the later position at which: the start border edge of the element’s principal box coincides with the start edge of its view progress visibility range. the end border edge of the element’s principal box coincides with the end edge of its view progress visibility range.",
        "type": "value",
        "value": "contain",
        "for": "animation-timeline-range"
      },
      {
        "msg": "Dangling value",
        "name": "entry",
        "prose": "Represents the range during which the principal box is entering the view progress visibility range. 0% is equivalent to 0% of the cover range. 100% is equivalent to 0% of the contain range. Should this be entry or enter?",
        "type": "value",
        "value": "entry",
        "for": "animation-timeline-range"
      },
      {
        "msg": "Dangling value",
        "name": "exit",
        "prose": "Represents the range during which the principal box is exiting the view progress visibility range. 0% is equivalent to 100% of the contain range. 100% is equivalent to 100% of the cover range.",
        "type": "value",
        "value": "exit",
        "for": "animation-timeline-range"
      }
    ]
  },
  "selectors": {
    "spec": {
      "title": "Selectors Level 4",
      "url": "https://drafts.csswg.org/selectors-4/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [
      {
        "name": ":is()",
        "prose": "The matches-any pseudo-class, :is(), is a functional pseudo-class taking a <forgiving-selector-list> as its sole argument."
      },
      {
        "name": ":matches()",
        "prose": "As previous drafts of this specification used the name :matches() for this pseudo-class, UAs may additionally implement this obsolete name as a legacy selector alias for :is() if needed for backwards-compatibility."
      },
      {
        "name": ":not()",
        "prose": "The negation pseudo-class, :not(), is a functional pseudo-class taking a <complex-real-selector-list> as an argument. It represents an element that is not represented by its argument."
      },
      {
        "name": ":where()",
        "prose": "The Specificity-adjustment pseudo-class, :where(), is a functional pseudo-class with the same syntax and functionality as :is(). Unlike :is(), neither the :where() pseudo-class, nor any of its arguments, contribute to the specificity of the selector—its specificity is always zero."
      },
      {
        "name": ":has()",
        "prose": "The relational pseudo-class, :has(), is a functional pseudo-class taking a <relative-selector-list> as an argument. It represents an element if any of the relative selectors would match at least one element when anchored against this element."
      },
      {
        "name": ":defined",
        "prose": "In some host languages, elements can have a distinction between being “defined”/“constructed” or not. The :defined pseudo-class matches elements that are fully defined, as dictated by the host language."
      },
      {
        "name": ":dir()",
        "prose": "The :dir() pseudo-class allows the author to write selectors that represent an element based on its directionality as determined by the document language. For example, [HTML5] defines how to determine the directionality of an element, based on a combination of the dir attribute, the surrounding text, and other factors. As another example, the its:dir and dirRule element of the Internationalization Tag Set [ITS20] are able to define the directionality of an element in [XML10]."
      },
      {
        "name": ":lang()",
        "prose": "If the document language specifies how the (human) content language of an element is determined, it is possible to write selectors that represent an element based on its content language. The :lang() pseudo-class, which accepts a comma-separated list of one or more language ranges, represents an element whose content language is one of the languages listed in its argument. Each language range in :lang() must be a valid CSS <ident> or <string>. (Thus language ranges containing asterisks, for example, must be either correctly escaped or quoted as strings, e.g. :lang(\\*-Latn) or :lang(\"*-Latn\").)"
      },
      {
        "name": ":any-link",
        "prose": "The :any-link pseudo-class represents an element that acts as the source anchor of a hyperlink. For example, in [HTML5], any a or area elements with an href attribute are hyperlinks, and thus match :any-link. It matches an element if the element would match either :link or :visited, and is equivalent to :is(:link, :visited)."
      },
      {
        "name": ":link",
        "prose": "User agents commonly display unvisited hyperlinks differently from previously visited ones. Selectors provides the pseudo-classes :link and :visited to distinguish them:"
      },
      {
        "name": ":visited",
        "prose": "User agents commonly display unvisited hyperlinks differently from previously visited ones. Selectors provides the pseudo-classes :link and :visited to distinguish them:"
      },
      {
        "name": ":local-link",
        "prose": "The :local-link pseudo-class allows authors to style hyperlinks based on the users current location within a site. It represents an element that is the source anchor of a hyperlink whose target’s absolute URL matches the element’s own document URL. If the hyperlink’s target includes a fragment URL, then the fragment URL of the current URL must also match; if it does not, then the fragment URL portion of the current URL is not taken into account in the comparison."
      },
      {
        "name": ":target",
        "prose": "The :target pseudo-class matches the document’s target elements. If the document’s URL has no fragment identifier, then the document has no target elements."
      },
      {
        "name": ":target-within",
        "prose": "The :target-within pseudo-class applies to any element to which the :target pseudo class applies as well as to any element whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :target."
      },
      {
        "name": ":scope",
        "prose": "In some contexts, selectors are matched with respect to one or more scoping roots, such as when calling the querySelector() method in [DOM]. The :scope pseudo-class represents this scoping root, and may be either a true element or a virtual one (such as a DocumentFragment)."
      },
      {
        "name": ":hover",
        "prose": "The :hover pseudo-class applies while the user designates an element (or pseudo-element) with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element. Interactive user agents that cannot detect hovering due to hardware limitations (e.g., a pen device that does not detect hovering) are still conforming; the selector will simply never match in such a UA."
      },
      {
        "name": ":active",
        "prose": "The :active pseudo-class applies while an element is being “activated” by the user, as defined by the host language; for example, while a hyperlink is being triggered."
      },
      {
        "name": ":focus",
        "prose": "The :focus pseudo-class applies while an element (or pseudo-element) has the focus (accepts keyboard or other forms of input)."
      },
      {
        "name": ":focus-visible",
        "prose": "While the :focus pseudo-class always matches the currently-focused element, UAs only sometimes visibly indicate focus (such as by drawing a “focus ring”), instead using a variety of heuristics to visibly indicate the focus only when it would be most helpful to the user. The :focus-visible pseudo-class matches a focused element (or pseudo-element) in these situations only, allowing authors to change the appearance of the focus indicator without changing when a focus indicator appears."
      },
      {
        "name": ":focus-within",
        "prose": "The :focus-within pseudo-class applies to any element (or pseudo-element) for which the :focus pseudo class applies, as well as to an element (or pseudo-element) whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :focus."
      },
      {
        "name": ":current",
        "prose": "The :current pseudo-class represents the element, or an ancestor of the element, that is currently being displayed."
      },
      {
        "name": ":current()",
        "prose": "Its alternate form :current(), like :is(), takes a list of compound selectors as its argument: it represents the :current element that matches the argument or, if that does not match, the innermost ancestor of the :current element that does. (If neither the :current element nor its ancestors match the argument, then the selector does not represent anything.)"
      },
      {
        "name": ":past",
        "prose": "The :past pseudo-class represents any element that is defined to occur entirely prior to a :current element. For example, the WebVTT spec defines the :past pseudo-class relative to the current playback position of a media element. If a time-based order of elements is not defined by the document language, then this represents any element that is a (possibly indirect) previous sibling of a :current element."
      },
      {
        "name": ":future",
        "prose": "The :future pseudo-class represents any element that is defined to occur entirely after a :current element. For example, the WebVTT spec defines the :future pseudo-class relative to the current playback position of a media element. If a time-based order of elements is not defined by the document language, then this represents any element that is a (possibly indirect) next sibling of a :current element."
      },
      {
        "name": ":playing",
        "prose": "The :playing pseudo-class represents an element that is capable of being “played” or “paused”, when that element is “playing”. (This includes both when the element is explicitly playing, and when it’s temporarily stopped for some reason not connected to user intent, but will automatically resume when that reason is resolved, such as a “buffering” or “stalled” state.)"
      },
      {
        "name": ":paused",
        "prose": "The :paused pseudo-class represents an element that is capable of being “played” or “paused”, when that element is “paused” (i.e. not ”playing”). (This includes both an explicit “paused” state, and other non-playing states like “loaded, hasn’t been activated yet”, etc.)"
      },
      {
        "name": ":seeking",
        "prose": "The :seeking pseudo-class represents an element that is capable of ”seeking” when that element is ”seeking”. (For the audio and video elements of HTML, see HTML § 4.8.11.9 Seeking.)"
      },
      {
        "name": ":buffering",
        "prose": "The :buffering pseudo-class represents an element that is capable of being “played” or “paused”, when that element cannot continue playing because it is actively attempting to obtain media data but has not yet obtained enough data to resume playback. (Note that the element is still considered to be “playing” when it is “buffering”. Whenever :buffering matches an element, :playing also matches the element.)"
      },
      {
        "name": ":stalled",
        "prose": "The :stalled pseudo-class represents an element when that element cannot continue playing because it is actively attempting to obtain media data but it has failed to receive any data for some amount of time. For the audio and video elements of HTML, this amount of time is the media element stall timeout. [HTML] (Note that, like with the :buffering pseudo-class, the element is still considered to be “playing” when it is “stalled”. Whenever :stalled matches an element, :playing also matches the element.)"
      },
      {
        "name": ":muted",
        "prose": "The :muted pseudo-class represents an element that is capable of making sound, but is currently “muted“ (forced silent). (For the audio and video elements of HTML, see muted. [HTML])"
      },
      {
        "name": ":volume-locked",
        "prose": "The :volume-locked pseudo-class represents an element that is capable of making sound, and currently has its volume \"locked\" by the UA or the user, so the page author cannot change it. (For the audio and video elements of HTML, see the algorithm for setting the element’s effective media volume. [HTML])"
      },
      {
        "name": ":open",
        "prose": "The :open pseudo-class represents an element that has both “open” and “closed” states, and which is currently in the “open” state."
      },
      {
        "name": ":closed",
        "prose": "The :closed pseudo-class represents an element that has both “open” and “closed” states, and which is currently in the closed state."
      },
      {
        "name": ":modal",
        "prose": "The :modal pseudo-class represents an element which is in a state that excludes all interaction with elements outside it until it has been dismissed. Multiple elements can be :modal simultaneously, with only one of them active (able to receive input)."
      },
      {
        "name": ":fullscreen",
        "prose": "The :fullscreen pseudo-class represents an element which is displayed in a mode that takes up most (usually all) of the screen, such as that defined by the Fullscreen API. [FULLSCREEN]"
      },
      {
        "name": ":picture-in-picture",
        "prose": "The :picture-in-picture pseudo-class represents an element which is displayed in a mode that takes up most (usually all) of the viewport, and whose viewport is confined to part of the screen while being displayed over other content, for example when using the Picture-in-Picture API. [picture-in-picture]"
      },
      {
        "name": ":enabled",
        "prose": "The :enabled pseudo-class represents user interface elements that are in an enabled state; such elements must have a corresponding disabled state."
      },
      {
        "name": ":disabled",
        "prose": "Conversely, the :disabled pseudo-class represents user interface elements that are in a disabled state; such elements must have a corresponding enabled state."
      },
      {
        "name": ":read-write",
        "prose": "An element matches :read-write if it is user-alterable, as defined by the document language. Otherwise, it is :read-only."
      },
      {
        "name": ":read-only",
        "prose": "An element matches :read-write if it is user-alterable, as defined by the document language. Otherwise, it is :read-only."
      },
      {
        "name": ":placeholder-shown",
        "prose": "Input elements can sometimes show placeholder text as a hint to the user on what to type in. See, for example, the placeholder attribute in [HTML5]. The :placeholder-shown pseudo-class matches an input element that is showing such placeholder text, whether that text is given by an attribute or a real element, or is otherwise implied by the UA."
      },
      {
        "name": ":autofill",
        "prose": "The :autofill pseudo-class represents input elements that have been automatically filled by the user agent, and have not been subsequently altered by the user."
      },
      {
        "name": ":default",
        "prose": "The :default pseudo-class applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons and select lists/menus."
      },
      {
        "name": ":checked",
        "prose": "Radio and checkbox elements can be toggled by the user. Some menu items are “checked” when the user selects them. When such elements are toggled “on” the :checked pseudo-class applies. For example, [HTML5] defines that checked checkboxes, radio buttons, and selected <option> elements match :checked."
      },
      {
        "name": ":indeterminate",
        "prose": "The :indeterminate pseudo-class applies to UI elements whose value is in an indeterminate state. For example, radio and checkbox elements can be toggled between checked and unchecked states, but are sometimes in an indeterminate state, neither checked nor unchecked. Similarly a progress meter can be in an indeterminate state when the percent completion is unknown. For example, [HTML5] defines how checkboxes can be made to match :indeterminate."
      },
      {
        "name": ":blank",
        "prose": "The :blank pseudo-class applies to user-input elements whose input value is empty (consists of the empty string or otherwise null input)."
      },
      {
        "name": ":valid",
        "prose": "An element is :valid or :invalid when its contents or value is, respectively, valid or invalid with respect to data validity semantics defined by the document language (e.g. [XFORMS11] or [HTML5]). An element which lacks data validity semantics is neither :valid nor :invalid."
      },
      {
        "name": ":invalid",
        "prose": "An element is :valid or :invalid when its contents or value is, respectively, valid or invalid with respect to data validity semantics defined by the document language (e.g. [XFORMS11] or [HTML5]). An element which lacks data validity semantics is neither :valid nor :invalid."
      },
      {
        "name": ":in-range",
        "prose": "The :in-range and :out-of-range pseudo-classes apply only to elements that have range limitations. An element is :in-range or :out-of-range when the value that the element is bound to is in range or out of range with respect to its range limits as defined by the document language. An element that lacks data range limits or is not a form control is neither :in-range nor :out-of-range. E.g. a slider element with a value of 11 presented as a slider control that only represents the values from 1-10 is :out-of-range. Another example is a menu element with a value of \"E\" that happens to be presented in a popup menu that only has choices \"A\", \"B\" and \"C\"."
      },
      {
        "name": ":out-of-range",
        "prose": "The :in-range and :out-of-range pseudo-classes apply only to elements that have range limitations. An element is :in-range or :out-of-range when the value that the element is bound to is in range or out of range with respect to its range limits as defined by the document language. An element that lacks data range limits or is not a form control is neither :in-range nor :out-of-range. E.g. a slider element with a value of 11 presented as a slider control that only represents the values from 1-10 is :out-of-range. Another example is a menu element with a value of \"E\" that happens to be presented in a popup menu that only has choices \"A\", \"B\" and \"C\"."
      },
      {
        "name": ":required",
        "prose": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to can be validly submitted. Elements that are not form elements are neither required nor optional."
      },
      {
        "name": ":optional",
        "prose": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to can be validly submitted. Elements that are not form elements are neither required nor optional."
      },
      {
        "name": ":user-invalid",
        "prose": "The :user-invalid and the :user-valid pseudo-classes represent an element with incorrect or correct input, respectively, but only after the user has significantly interacted with it."
      },
      {
        "name": ":user-valid",
        "prose": "The :user-invalid and the :user-valid pseudo-classes represent an element with incorrect or correct input, respectively, but only after the user has significantly interacted with it."
      },
      {
        "name": ":root",
        "prose": "The :root pseudo-class represents an element that is the root of the document."
      },
      {
        "name": ":empty",
        "prose": "The :empty pseudo-class represents an element that has no children except, optionally, document white space characters. In terms of the document tree, only element nodes and content nodes (such as [DOM] text nodes, and entity references) whose data has a non-zero length must be considered as affecting emptiness; comments, processing instructions, and other nodes must not affect whether an element is considered empty or not."
      },
      {
        "name": ":nth-child()",
        "value": ":nth-child(An+B [of S]? )"
      },
      {
        "name": ":nth-last-child()",
        "value": ":nth-last-child(An+B [of S]? )"
      },
      {
        "name": ":first-child",
        "prose": "The :first-child pseudo-class represents an element that if first among its inclusive siblings. Same as :nth-child(1)."
      },
      {
        "name": ":last-child",
        "prose": "The :last-child pseudo-class represents an element that is last among its inclusive siblings. Same as :nth-last-child(1)."
      },
      {
        "name": ":only-child",
        "prose": "The :only-child pseudo-class represents an element that has no siblings. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity."
      },
      {
        "name": ":nth-of-type()",
        "value": ":nth-of-type(An+B)"
      },
      {
        "name": ":nth-last-of-type()",
        "value": ":nth-last-of-type(An+B)"
      },
      {
        "name": ":first-of-type",
        "prose": "The :first-of-type pseudo-class represents the same element as :nth-of-type(1)."
      },
      {
        "name": ":last-of-type",
        "prose": "The :last-of-type pseudo-class represents the same element as :nth-last-of-type(1)."
      },
      {
        "name": ":only-of-type",
        "prose": "The :only-of-type pseudo-class represents the same element as :first-of-type:last-of-type."
      },
      {
        "name": ">",
        "prose": "A child combinator describes a childhood relationship between two elements. A child combinator is made of the \"greater-than sign\" (U+003E, >) code point and separates two compound selectors."
      },
      {
        "name": "+",
        "prose": "The next-sibling combinator is made of the “plus sign” (U+002B, +) code point that separates two compound selectors. The elements represented by the two compound selectors share the same parent in the document tree and the element represented by the first compound selector immediately precedes the element represented by the second one. Non-element nodes (e.g. text between elements) are ignored when considering the adjacency of elements."
      },
      {
        "name": "~",
        "prose": "The subsequent-sibling combinator is made of the \"tilde\" (U+007E, ~) code point that separates two compound selectors. The elements represented by the two compound selectors share the same parent in the document tree and the element represented by the first compound selector precedes (not necessarily immediately) the element represented by the second one."
      },
      {
        "name": "||",
        "prose": "The column combinator, which consists of two pipes (||) represents the relationship of a column element to a cell element belonging to the column it represents. Column membership is determined based on the semantics of the document language only: whether and how the elements are presented is not considered. If a cell element belongs to more than one column, it is represented by a selector indicating membership in any of those columns."
      },
      {
        "name": ":nth-col()",
        "value": ":nth-col(An+B)"
      },
      {
        "name": ":nth-last-col()",
        "value": ":nth-last-col(An+B)"
      }
    ],
    "values": [
      {
        "name": "<selector-list>",
        "type": "type",
        "value": "<complex-selector-list>"
      },
      {
        "name": "<complex-selector-list>",
        "type": "type",
        "value": "<complex-selector>#"
      },
      {
        "name": "<complex-real-selector-list>",
        "type": "type",
        "value": "<complex-real-selector>#"
      },
      {
        "name": "<compound-selector-list>",
        "type": "type",
        "value": "<compound-selector>#"
      },
      {
        "name": "<simple-selector-list>",
        "type": "type",
        "value": "<simple-selector>#"
      },
      {
        "name": "<relative-selector-list>",
        "type": "type",
        "value": "<relative-selector>#"
      },
      {
        "name": "<relative-real-selector-list>",
        "type": "type",
        "value": "<relative-real-selector>#"
      },
      {
        "name": "<complex-selector>",
        "type": "type",
        "value": "<complex-selector-unit> [ <combinator>? <complex-selector-unit> ]*"
      },
      {
        "name": "<complex-selector-unit>",
        "type": "type",
        "value": "[ <compound-selector>? <pseudo-compound-selector>* ]!"
      },
      {
        "name": "<complex-real-selector>",
        "type": "type",
        "value": "<compound-selector> [ <combinator>? <compound-selector> ]*"
      },
      {
        "name": "<relative-selector>",
        "type": "type",
        "value": "<combinator>? <complex-selector>"
      },
      {
        "name": "<relative-real-selector>",
        "type": "type",
        "value": "<combinator>? <complex-real-selector>"
      },
      {
        "name": "<compound-selector>",
        "type": "type",
        "value": "[ <type-selector>? <subclass-selector>* ]!"
      },
      {
        "name": "<pseudo-compound-selector>",
        "type": "type",
        "value": "<pseudo-element-selector> <pseudo-class-selector>*"
      },
      {
        "name": "<simple-selector>",
        "type": "type",
        "value": "<type-selector> | <subclass-selector>"
      },
      {
        "name": "<combinator>",
        "type": "type",
        "value": "'>' | '+' | '~' | [ '|' '|' ]"
      },
      {
        "name": "<wq-name>",
        "type": "type",
        "value": "<ns-prefix>? <ident-token>"
      },
      {
        "name": "<ns-prefix>",
        "type": "type",
        "value": "[ <ident-token> | '*' ]? '|'"
      },
      {
        "name": "<type-selector>",
        "type": "type",
        "value": "<wq-name> | <ns-prefix>? '*'"
      },
      {
        "name": "<subclass-selector>",
        "type": "type",
        "value": "<id-selector> | <class-selector> | <attribute-selector> | <pseudo-class-selector>"
      },
      {
        "name": "<id-selector>",
        "type": "type",
        "value": "<hash-token>"
      },
      {
        "name": "<class-selector>",
        "type": "type",
        "value": "'.' <ident-token>"
      },
      {
        "name": "<attribute-selector>",
        "type": "type",
        "value": "'[' <wq-name> ']' | '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'"
      },
      {
        "name": "<attr-matcher>",
        "type": "type",
        "value": "[ '~' | '|' | '^' | '$' | '*' ]? '='"
      },
      {
        "name": "<attr-modifier>",
        "type": "type",
        "value": "i | s"
      },
      {
        "name": "<pseudo-class-selector>",
        "type": "type",
        "value": "':' <ident-token> | ':' <function-token> <any-value> ')'"
      },
      {
        "name": "<pseudo-element-selector>",
        "type": "type",
        "value": "':' <pseudo-class-selector> | <legacy-pseudo-element-selector>"
      },
      {
        "name": "<legacy-pseudo-element-selector>",
        "type": "type",
        "value": "':' [before | after | first-line | first-letter]"
      },
      {
        "name": "<forgiving-selector-list>",
        "prose": "The <forgiving-selector-list> production instead parses each selector in the list individually, simply ignoring ones that fail to parse, so the remaining selectors can still be used.",
        "type": "type"
      }
    ]
  },
  "svg-strokes": {
    "spec": {
      "title": "SVG Strokes",
      "url": "https://svgwg.org/specs/strokes/"
    },
    "properties": [
      {
        "name": "stroke-alignment",
        "value": "center | inner | outer",
        "initial": "center",
        "appliesTo": "shapes and text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computed value": "as specified",
        "animatable": "yes",
        "styleDeclaration": [
          "stroke-alignment",
          "strokeAlignment"
        ]
      },
      {
        "name": "stroke-dashcorner",
        "value": "none | <length>",
        "initial": "none",
        "appliesTo": "shapes and text content elements",
        "inherited": "yes",
        "percentages": "refer to the size of the current viewport (see Units)",
        "media": "visual",
        "computed value": "absolute length or keyword specified",
        "animatable": "yes",
        "styleDeclaration": [
          "stroke-dashcorner",
          "strokeDashcorner"
        ]
      },
      {
        "name": "stroke-dashadjust",
        "value": "none | [stretch | compress] [dashes | gaps]?",
        "initial": "none",
        "appliesTo": "shapes and text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computed value": "as specified",
        "animatable": "yes",
        "styleDeclaration": [
          "stroke-dashadjust",
          "strokeDashadjust"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": []
  },
  "SVG": {
    "spec": {
      "title": "Scalable Vector Graphics (SVG) 2",
      "url": "https://svgwg.org/svg2-draft/"
    },
    "properties": [
      {
        "name": "cx",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "‘circle’ and ‘ellipse’ elements",
        "inherited": "no",
        "percentages": "refer to the width of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animationType": "by computed value",
        "styleDeclaration": [
          "cx"
        ]
      },
      {
        "name": "cy",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "‘circle’ and ‘ellipse’ elements",
        "inherited": "no",
        "percentages": "refer to the height of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animationType": "by computed value",
        "styleDeclaration": [
          "cy"
        ]
      },
      {
        "name": "r",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "‘circle’ element",
        "inherited": "no",
        "percentages": "refer to the normalized diagonal of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animationType": "by computed value",
        "styleDeclaration": [
          "r"
        ]
      },
      {
        "name": "rx",
        "value": "<length-percentage> | auto",
        "initial": "auto",
        "appliesTo": "‘ellipse’, ‘rect’ elements",
        "inherited": "no",
        "percentages": "refer to the width of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animationType": "by computed value",
        "styleDeclaration": [
          "rx"
        ]
      },
      {
        "name": "ry",
        "value": "<length-percentage> | auto",
        "initial": "auto",
        "appliesTo": "‘ellipse’, ‘rect’",
        "inherited": "no",
        "percentages": "refer to the height of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animatableType": "by computed value",
        "styleDeclaration": [
          "ry"
        ]
      },
      {
        "name": "x",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "‘svg’, ‘rect’, ‘image’, ‘foreignObject’ elements",
        "inherited": "no",
        "percentages": "refer to the width of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animationType": "by computed value",
        "styleDeclaration": [
          "x"
        ]
      },
      {
        "name": "y",
        "value": "<length-percentage>",
        "initial": "0",
        "appliesTo": "‘svg’, ‘rect’, ‘image’, ‘foreignObject’ elements",
        "inherited": "no",
        "percentages": "refer to the height of the current SVG viewport (see Units)",
        "media": "visual",
        "computedValue": "an absolute length or percentage",
        "animationType": "by computed value",
        "styleDeclaration": [
          "y"
        ]
      },
      {
        "name": "vector-effect",
        "value": "none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position",
        "initial": "none",
        "appliesTo": "graphics elements and ‘use’",
        "inherited": "no",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "vector-effect",
          "vectorEffect"
        ]
      },
      {
        "name": "d",
        "value": "none | <string>",
        "initial": "none",
        "appliesTo": "‘path’",
        "inherited": "no",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "See prose",
        "styleDeclaration": [
          "d"
        ]
      },
      {
        "name": "shape-subtract",
        "value": "none | [ <basic-shape>| <uri> ]+",
        "initial": "none",
        "appliesTo": "‘text’ elements",
        "inherited": "no",
        "percentages": "Relative to the ‘viewBox’",
        "media": "visual",
        "computedValue": "computed lengths for any <basic-shape>, the absolute URI for <uri>, otherwise as specified",
        "animationType": "See Interpolation of Basic Shapes",
        "styleDeclaration": [
          "shape-subtract",
          "shapeSubtract"
        ]
      },
      {
        "name": "text-anchor",
        "value": "start | middle | end",
        "initial": "start",
        "appliesTo": "text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "text-anchor",
          "textAnchor"
        ]
      },
      {
        "name": "fill",
        "value": "<paint>",
        "initial": "black",
        "appliesTo": "shapes and text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified, but with <color> values computed and <url> values made absolute",
        "animationType": "by computed value",
        "styleDeclaration": [
          "fill"
        ]
      },
      {
        "name": "stroke",
        "value": "<paint>",
        "initial": "none",
        "appliesTo": "shapes and text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified, but with <color> values computed and <url> values made absolute",
        "animationType": "by computed value",
        "styleDeclaration": [
          "stroke"
        ]
      },
      {
        "name": "marker-start",
        "value": "none | <marker-ref>",
        "initial": "none",
        "appliesTo": "shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified, but with <url> values (that are part of a <marker-ref>) made absolute",
        "animationType": "discrete",
        "styleDeclaration": [
          "marker-start",
          "markerStart"
        ]
      },
      {
        "name": "marker-mid",
        "value": "none | <marker-ref>",
        "initial": "none",
        "appliesTo": "shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified, but with <url> values (that are part of a <marker-ref>) made absolute",
        "animationType": "discrete",
        "styleDeclaration": [
          "marker-mid",
          "markerMid"
        ]
      },
      {
        "name": "marker-end",
        "value": "none | <marker-ref>",
        "initial": "none",
        "appliesTo": "shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified, but with <url> values (that are part of a <marker-ref>) made absolute",
        "animationType": "discrete",
        "styleDeclaration": [
          "marker-end",
          "markerEnd"
        ]
      },
      {
        "name": "marker",
        "value": "none | <marker-ref>",
        "initial": "not defined for shorthand properties",
        "appliesTo": "shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "see individual properties",
        "animationType": "discrete",
        "styleDeclaration": [
          "marker"
        ]
      },
      {
        "name": "paint-order",
        "value": "normal | [ fill || stroke || markers ]",
        "initial": "normal",
        "appliesTo": "shapes and text content elements",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "paint-order",
          "paintOrder"
        ]
      },
      {
        "name": "color-interpolation",
        "value": "auto | sRGB | linearRGB",
        "initial": "sRGB",
        "appliesTo": "container elements, graphics elements, gradient elements, ‘use’ and ‘animate’",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "color-interpolation",
          "colorInterpolation"
        ]
      },
      {
        "name": "shape-rendering",
        "value": "auto | optimizeSpeed | crispEdges | geometricPrecision",
        "initial": "auto",
        "appliesTo": "shapes",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "shape-rendering",
          "shapeRendering"
        ]
      },
      {
        "name": "text-rendering",
        "value": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
        "initial": "auto",
        "appliesTo": "‘text’",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "text-rendering",
          "textRendering"
        ]
      },
      {
        "name": "pointer-events",
        "value": "auto | bounding-box | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none",
        "initial": "auto",
        "appliesTo": "container elements, graphics elements and ‘use’",
        "inherited": "yes",
        "percentages": "N/A",
        "media": "visual",
        "computedValue": "as specified",
        "animationType": "discrete",
        "styleDeclaration": [
          "pointer-events",
          "pointerEvents"
        ]
      },
      {
        "name": "stop-color",
        "styleDeclaration": [
          "stop-color",
          "stopColor"
        ]
      },
      {
        "name": "stop-opacity",
        "styleDeclaration": [
          "stop-opacity",
          "stopOpacity"
        ]
      }
    ],
    "atrules": [],
    "selectors": [],
    "values": [
      {
        "name": "<points>",
        "value": "[ <number>+ ]#",
        "type": "type"
      },
      {
        "name": "<dasharray>",
        "value": "[ [ <length-percentage> | <number> ]+ ]#",
        "type": "type"
      },
      {
        "name": "<marker-ref>",
        "value": "<url>",
        "type": "type"
      }
    ]
  },
  "upgrade-insecure-requests": {
    "spec": {
      "title": "Upgrade Insecure Requests",
      "url": "https://w3c.github.io/webappsec-upgrade-insecure-requests/"
    },
    "properties": [],
    "atrules": [],
    "selectors": [],
    "values": [],
    "warnings": [
      {
        "msg": "Dangling value",
        "name": "Do Not Upgrade",
        "type": "value",
        "value": "Do Not Upgrade",
        "for": "insecure requests policy"
      },
      {
        "msg": "Dangling value",
        "name": "Upgrade",
        "type": "value",
        "value": "Upgrade",
        "for": "insecure requests policy"
      }
    ]
  }
}